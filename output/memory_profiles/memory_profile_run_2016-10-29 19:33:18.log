Filename: main_bosch.py

Line #    Mem usage    Increment   Line Contents
================================================
   356    164.0 MiB      0.0 MiB   @profile(stream=f_mem)
   357                             def main(run_info_fname=None,
   358                                      compile_data=False,
   359                                      train_model=False,
   360                                      make_submission=False,
   361                                      N_start=None,
   362                                      N_files_train=1,
   363                                      N_files_test=1,
   364                             
   365                                      feature_list_file=None,
   366                                      analyze_feature_importance=False,
   367                                      cv=False,
   368                                      # if True running cross validation if False, run single model training session and importance analysis
   369                                      early_stop_rounds=10,
   370                                      N_rounds=1000,
   371                                      testsize=0.1,
   372                                      xgb_params=None,
   373                             
   374                                      skip_date_csv=False,
   375                                      skip_num_csv=False,
   376                                      skip_cat_csv=False
   377                                      ):
   378    164.0 MiB      0.0 MiB       datetime_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
   379                             
   380    164.0 MiB      0.0 MiB       if compile_data:
   381    164.0 MiB      0.0 MiB           run_info = dict()
   382    164.0 MiB      0.0 MiB           N_splits = ub.N_split
   383    164.0 MiB      0.0 MiB           if N_files_train > N_splits:
   384                                         N_files_train = N_splits
   385    164.0 MiB      0.0 MiB           if N_files_test > N_splits:
   386                                         N_files_test = N_splits
   387                             
   388    164.0 MiB      0.0 MiB           if analyze_feature_importance and (feature_list_file is not None):
   389                                         assert 0
   390                             
   391    164.0 MiB      0.0 MiB           run_info['compile_data'] = compile_data
   392    164.0 MiB      0.0 MiB           run_info['N_splits'] = N_splits
   393    164.0 MiB      0.0 MiB           run_info['N_files_train'] = N_files_train
   394    164.0 MiB      0.0 MiB           run_info['N_files_test'] = N_files_test
   395    164.0 MiB      0.0 MiB           run_info['features_list_file'] = feature_list_file
   396    164.0 MiB      0.0 MiB           run_info['skip_date_csv'] = skip_date_csv
   397    164.0 MiB      0.0 MiB           run_info['skip_num_csv'] = skip_num_csv
   398    164.0 MiB      0.0 MiB           run_info['skip_cat_csv'] = skip_cat_csv
   399                             
   400    164.0 MiB      0.0 MiB           df_train, n_start = load_data(load_test=False, N_start=N_start, N_read=N_files_train, N_split=N_splits,
   401    164.0 MiB      0.0 MiB                                         feature_list_file=feature_list_file,
   402    164.0 MiB      0.0 MiB                                         load_categorical_csv=(not skip_cat_csv),
   403    164.0 MiB      0.0 MiB                                         load_date_csv=(not skip_date_csv),
   404    615.0 MiB    451.0 MiB                                         load_numerical_csv=(not skip_num_csv))
   405    615.0 MiB      0.0 MiB           df_test, _ = load_data(load_test=True, N_start=n_start, N_read=N_files_test, N_split=N_splits,
   406    615.0 MiB      0.0 MiB                                  feature_list_file=feature_list_file,
   407    615.0 MiB      0.0 MiB                                  load_categorical_csv=(not skip_cat_csv),
   408    615.0 MiB      0.0 MiB                                  load_date_csv=(not skip_date_csv),
   409   1045.0 MiB    430.0 MiB                                  load_numerical_csv=(not skip_num_csv))
   410                             
   411   1045.0 MiB      0.0 MiB           ub.log('generating id diff columns based on various dates columns')
   412   1045.0 MiB      0.0 MiB           dates_cols = [x for x in list(df_train.columns) if ('start_date' in x or 'end_date' in x) and ('rank' not in x)]
   413                             
   414                                     # print dates_cols
   415                             
   416   1045.0 MiB      0.0 MiB           df_datesort = pd.concat([df_train[['Id'] + dates_cols], df_test[['Id'] + dates_cols]],
   417   1045.0 MiB      0.0 MiB                                   ignore_index=True)
   418   1045.0 MiB      0.0 MiB           gc.collect()
   419                             
   420   1045.0 MiB      0.0 MiB           for c in dates_cols:
   421                                         # print c
   422                                         df_datesort.sort_values(by=[c, 'Id'], inplace=True)
   423                                         df_datesort[c + '_id_diff'] = df_datesort['Id'].diff().fillna(999999).astype(int)
   424                                         df_datesort[c + '_id_diff_reverse'] = df_datesort['Id'].iloc[::-1].diff().fillna(999999).astype(int)
   425                                         df_datesort[c + '_id_diff_magic'] = \
   426                                             1 + 2 * (df_datesort[c + '_id_diff'] > 1) + 1 * (df_datesort[c + '_id_diff_reverse'] < -1)
   427                             
   428                                         df_datesort.drop([c], axis=1, inplace=True)
   429                             
   430   1045.0 MiB      0.0 MiB           df_datesort.head(n=N_DEBUG_LINES).to_csv(os.path.join(ub.data_dir, 'df_datesort_debug.csv'))
   431                             
   432   1045.0 MiB      0.0 MiB           gc.collect()
   433   1485.9 MiB    440.9 MiB           df_train = df_train.merge(df_datesort, on='Id')
   434   1486.0 MiB      0.1 MiB           df_train.head(n=N_DEBUG_LINES).to_csv(os.path.join(ub.data_dir, 'df_train_debug.csv'))
   435                             
   436   1045.1 MiB   -441.0 MiB           gc.collect()
   437   1486.0 MiB    440.9 MiB           df_test = df_test.merge(df_datesort, on='Id')
   438   1486.1 MiB      0.0 MiB           df_test.head(n=N_DEBUG_LINES).to_csv(os.path.join(ub.data_dir, 'df_test_debug.csv'))
   439                             
   440   1486.1 MiB      0.0 MiB           df_test['Response'] = 0
   441                             
   442   1486.1 MiB      0.0 MiB           print df_train.shape
   443   1486.1 MiB      0.0 MiB           print df_test.shape
   444   1045.1 MiB   -441.0 MiB           gc.collect()
   445                             
   446                                     # if N_files_train == N_splits:
   447                                     #     split_data(df_train,
   448                                     #                output_fname_template=os.path.join(ub.processed_data_dir, 'df_train_preprocessed_part{}.csv'))
   449                                     # if N_files_test == N_splits:
   450                                     #     split_data(df_test,
   451                                     #                output_fname_template=os.path.join(ub.processed_data_dir, 'df_test_preprocessed_part{}.csv'))
   452                             
   453   1045.1 MiB      0.0 MiB           fillna = True
   454   1045.1 MiB      0.0 MiB           run_info['fillna'] = fillna
   455   1045.1 MiB      0.0 MiB           if fillna:
   456   1045.1 MiB      0.0 MiB               ub.log('Filling na...')
   457   1045.1 MiB      0.0 MiB               for df in [df_train, df_test]:
   458   1045.1 MiB      0.0 MiB                   cols_full_flag = df.isnull().any()
   459   1045.1 MiB      0.0 MiB                   non_full_cols = list(cols_full_flag[cols_full_flag].index)
   460   1045.1 MiB      0.0 MiB                   print 'Non-full columns: {}'.format(len(non_full_cols))
   461                                             # print non_full_cols
   462                             
   463                                             if 1:
   464   1045.1 MiB      0.0 MiB                       df.fillna(-999999, inplace=True)
   465                                             else:
   466                                                 # print df.PersonalField7.unique()
   467                                                 for c in non_full_cols:
   468                                                     if len(df[c].unique()) > 2:
   469                                                         most_frequent_items = df[c].value_counts().idxmax()
   470                                                         print c, most_frequent_items
   471                                                         df[c].fillna(value=most_frequent_items, inplace=True)
   472                                                     else:  # if it is only a pair of value [somthing, nan] then fill in "missing"
   473                                                         df[c].fillna(value='missing', inplace=True)
   474                                                         print c, df[c].unique()
   475                             
   476   1045.1 MiB      0.0 MiB                   cols_full_flag = df.isnull().any()
   477   1045.1 MiB      0.0 MiB                   non_full_cols = list(cols_full_flag[cols_full_flag].index)
   478   1045.1 MiB      0.0 MiB                   print 'Non-full columns: {}'.format(len(non_full_cols))
   479                             
   480   1045.1 MiB      0.0 MiB                   le = LabelEncoder()
   481   1045.1 MiB      0.0 MiB                   obj_cols = df.select_dtypes(include=['object']).columns
   482                                             # print 'Obj columns: ', list(obj_cols)
   483   1045.1 MiB      0.0 MiB                   for col in obj_cols:
   484                                                 df[col] = le.fit_transform(df[col])
   485                             
   486   1045.1 MiB      0.0 MiB               df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   487   1045.1 MiB      0.0 MiB               df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   488                             
   489   1045.1 MiB      0.0 MiB           ub.log('Dropping Id and Response columns...')
   490   1045.1 MiB      0.0 MiB           columns_to_drop = ['Id', 'Response']
   491   1045.1 MiB      0.0 MiB           shuffle_col = df_train[['Id']].copy()
   492   1045.1 MiB      0.0 MiB           shuffle_col['Id'] = np.random.rand(len(shuffle_col))
   493                             
   494   1045.1 MiB      0.0 MiB           y_total_df = df_train['Response']
   495   1045.1 MiB      0.0 MiB           y_total = df_train['Response'].values
   496   1045.1 MiB      0.1 MiB           df_train.drop(columns_to_drop, axis=1, inplace=True)
   497   1045.1 MiB      0.0 MiB           df_test.drop(columns_to_drop, axis=1, inplace=True)
   498                             
   499   1045.1 MiB      0.0 MiB           print df_train.shape
   500   1045.1 MiB      0.0 MiB           print df_test.shape
   501   1045.1 MiB      0.0 MiB           prior = np.sum(y_total) / (1. * len(y_total))
   502   1045.1 MiB      0.0 MiB           print 'prior: {}'.format(prior)
   503   1045.1 MiB      0.0 MiB           run_info['prior'] = prior
   504                             
   505   1045.1 MiB      0.0 MiB           gc.collect()
   506                             
   507   1045.1 MiB      0.0 MiB           feature_imp_fname_template = os.path.join(ub.output_dir, 'feature_importance_xgb_{}')
   508   1045.1 MiB      0.0 MiB           run_info['feature_imp_fname_template'] = feature_imp_fname_template
   509   1045.1 MiB      0.0 MiB           top_features_fname = feature_imp_fname_template.format('accumu_list.txt')
   510   1045.1 MiB      0.0 MiB           run_info['top_features_fname'] = top_features_fname
   511                             
   512                                     # if feature_down_select:
   513                                     #     ub.log('Feature down selected based on {}...'.format(top_features_fname))
   514                                     #     #todo may need to set a maxN for the number of features to use
   515                                     #
   516                                     #     with open(top_features_fname, 'r') as tf:
   517                                     #         selected_cols = [x.strip() for x in tf.readlines()]
   518                                     #     df_train = df_train[selected_cols]
   519                                     #     df_test = df_test[selected_cols]
   520                                     #     print df_train.shape
   521                                     #     print df_test.shape
   522                                     #     print df_train.columns
   523                             
   524   1045.1 MiB      0.0 MiB           feature_names = list(df_train.columns)
   525                             
   526   1045.1 MiB      0.0 MiB           postfix_train = '{}_{}of{}'.format(datetime_str, N_files_train, N_splits)
   527   1045.1 MiB      0.0 MiB           postfix_test = '{}_{}of{}'.format(datetime_str, N_files_test, N_splits)
   528                             
   529   1045.1 MiB      0.0 MiB           run_info['postfix_train'] = postfix_train
   530   1045.1 MiB      0.0 MiB           run_info['postfix_test'] = postfix_test
   531                             
   532   1045.1 MiB      0.0 MiB           run_info['testsize'] = testsize
   533                             
   534   1045.1 MiB      0.0 MiB           train_test_split_method = 1
   535                             
   536   1045.1 MiB      0.0 MiB           ub.log('Train/val split using testsize={}, split_method={}'.format(testsize, train_test_split_method))
   537   1045.1 MiB      0.0 MiB           if train_test_split_method == 1:
   538   1045.1 MiB      0.0 MiB               train_idx = shuffle_col[shuffle_col['Id'] > testsize].index
   539   1045.1 MiB      0.0 MiB               val_idx = shuffle_col[shuffle_col['Id'] <= testsize].index
   540   1045.1 MiB      0.0 MiB               ub.log('Done shuffling...')
   541   1045.1 MiB      0.0 MiB               print 'len of train_idx', len(train_idx)
   542   1045.1 MiB      0.0 MiB               print 'len of val_idx', len(val_idx)
   543   1045.1 MiB      0.0 MiB               y_train = y_total_df.loc[train_idx].values
   544   1045.1 MiB      0.0 MiB               y_val = y_total_df.loc[val_idx].values
   545                             
   546   1442.8 MiB    397.6 MiB               xgtrain = xgb.DMatrix(df_train.loc[train_idx].values, y_train, feature_names=feature_names)
   547   1442.8 MiB      0.0 MiB               ub.log('Assembled xgtrain')
   548   1503.2 MiB     60.5 MiB               xgval = xgb.DMatrix(df_train.loc[val_idx].values, y_val, feature_names=feature_names)
   549   1503.2 MiB      0.0 MiB               ub.log('Assembled xgval')
   550   1503.2 MiB      0.0 MiB               del df_train
   551   1503.2 MiB      0.0 MiB               ub.log('Deleted df_train')
   552   1062.2 MiB   -441.0 MiB               gc.collect()
   553                                     else:
   554                                         x_train, x_val, y_train, y_val = train_test_split(df_train.values, y_total, test_size=testsize)
   555                                         ub.log('Done shuffling...')
   556                                         print x_train.shape
   557                                         print x_val.shape
   558                                         del df_train
   559                                         gc.collect()
   560                                         ub.log('Deleted df_train')
   561                             
   562                                         xgtrain = xgb.DMatrix(x_train, y_train, feature_names=feature_names)
   563                                         ub.log('Assembled xgtrain')
   564                                         xgval = xgb.DMatrix(x_val, y_val, feature_names=feature_names)
   565                                         ub.log('Assembled xgval')
   566                                         del x_train
   567                                         del x_val
   568                                         gc.collect()
   569                             
   570   1062.2 MiB      0.0 MiB           fname_xgtrain = os.path.join(ub.processed_data_dir, 'xgtrain_{}.buffer'.format(postfix_train))
   571   1064.4 MiB      2.2 MiB           xgtrain.save_binary(fname_xgtrain)
   572   1064.4 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgtrain))
   573                             
   574   1064.4 MiB      0.0 MiB           fname_xgval = os.path.join(ub.processed_data_dir, 'xgval_{}.buffer'.format(postfix_train))
   575   1064.4 MiB      0.0 MiB           xgval.save_binary(fname_xgval)
   576   1064.4 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgval))
   577                             
   578   1506.1 MiB    441.7 MiB           xgtest = xgb.DMatrix(df_test.values, feature_names=feature_names)
   579   1506.1 MiB      0.0 MiB           ub.log('Assembled xgtest')
   580   1506.1 MiB      0.0 MiB           fname_xgtest = os.path.join(ub.processed_data_dir, 'xgtest_{}.buffer'.format(postfix_test))
   581   1506.1 MiB      0.0 MiB           xgtest.save_binary(fname_xgtest)
   582   1506.1 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgtest))
   583                             
   584   1506.1 MiB      0.0 MiB           del df_test
   585   1506.1 MiB      0.0 MiB           gc.collect()
   586   1506.1 MiB      0.0 MiB           ub.log('Deleted df_test')
   587                             
   588   1506.1 MiB      0.0 MiB           print 'train and val set sizes'
   589   1506.1 MiB      0.0 MiB           print xgtrain.num_row(), xgtrain.num_col()
   590   1506.1 MiB      0.0 MiB           print xgval.num_row(), xgval.num_col()
   591   1506.1 MiB      0.0 MiB           run_info['xgtrain_nrows'] = xgtrain.num_row()
   592   1506.1 MiB      0.0 MiB           run_info['xgval_nrows'] = xgval.num_row()
   593                             
   594   1506.1 MiB      0.0 MiB           run_info['fname_xgtrain'] = fname_xgtrain
   595   1506.1 MiB      0.0 MiB           run_info['fname_xgval'] = fname_xgval
   596   1506.1 MiB      0.0 MiB           run_info['fname_xgtest'] = fname_xgtest
   597                             
   598   1506.1 MiB      0.0 MiB           fname_ytrain = os.path.join(ub.processed_data_dir, 'ytrain_{}.npy'.format(postfix_train))
   599   1506.1 MiB      0.0 MiB           fname_yval = os.path.join(ub.processed_data_dir, 'yval_{}.npy'.format(postfix_train))
   600                             
   601   1506.1 MiB      0.0 MiB           np.save(fname_ytrain, y_train)
   602   1506.1 MiB      0.0 MiB           ub.log('Saved ' + fname_ytrain)
   603                             
   604   1506.1 MiB      0.0 MiB           np.save(fname_yval, y_val)
   605   1506.1 MiB      0.0 MiB           ub.log('Saved ' + fname_yval)
   606                             
   607   1506.1 MiB      0.0 MiB           run_info['fname_ytrain'] = fname_ytrain
   608   1506.1 MiB      0.0 MiB           run_info['fname_yval'] = fname_yval
   609                             
   610   1506.1 MiB      0.0 MiB       if train_model:
   611   1506.1 MiB      0.0 MiB           assert compile_data or (run_info_fname is not None)
   612                             
   613   1506.1 MiB      0.0 MiB           run_info['cv'] = cv
   614   1506.1 MiB      0.0 MiB           run_info['analyze_feature_importance'] = analyze_feature_importance
   615   1506.1 MiB      0.0 MiB           run_info['early_stop_rounds'] = early_stop_rounds
   616                             
   617   1506.1 MiB      0.0 MiB           if not compile_data:
   618                                         ub.log('(train_model) Loading run info from {} ...'.format(run_info_fname))
   619                                         with open(run_info_fname, 'r') as fp:
   620                                             run_info = eval(fp.read())
   621                                         print json.dumps(run_info, indent=2)
   622                             
   623                                         run_info_fname = run_info_fname.replace('.txt', '_{}.txt'.format(datetime_str))
   624                             
   625                                         logged_home_dir = None
   626                                         if ub.home_dir not in run_info['fname_xgtrain']:
   627                                             for i in ub.possible_home_dirs:
   628                                                 if i in run_info['fname_xgtrain']:
   629                                                     logged_home_dir = i
   630                             
   631                                             for k in ['fname_xgtrain', 'fname_xgval', 'fname_ytrain', 'fname_yval']:
   632                                                 run_info[k] = run_info[k].replace(logged_home_dir, ub.home_dir)
   633                             
   634                                             if analyze_feature_importance:
   635                                                 for k in ['feature_imp_fname_template', 'top_feature_fname']:
   636                                                     run_info[k] = run_info[k].replace(logged_home_dir, ub.home_dir)
   637                             
   638                                         ub.log('Loading xgtrain data {} ...'.format(run_info['fname_xgtrain']))
   639                                         xgtrain = xgb.DMatrix(run_info['fname_xgtrain'])
   640                             
   641                                         ub.log('Loading xgval data {} ...'.format(run_info['fname_xgval']))
   642                                         xgval = xgb.DMatrix(run_info['fname_xgval'])
   643                             
   644                                         ub.log('Loading ytrain data {} ...'.format(run_info['fname_ytrain']))
   645                                         y_train = np.load(run_info['fname_ytrain'])
   646                             
   647                                         ub.log('Loading yval data {} ...'.format(run_info['fname_yval']))
   648                                         y_val = np.load(run_info['fname_yval'])
   649                             
   650   1506.1 MiB      0.0 MiB           prior = run_info['prior']
   651   1506.1 MiB      0.0 MiB           postfix_train = run_info['postfix_train']
   652                             
   653   1506.1 MiB      0.0 MiB           if xgb_params is None:
   654                                         xgb_params = get_params(bases_core=prior)
   655                             
   656   1506.1 MiB      0.0 MiB           xgb_params['base_score'] = prior  # n_positive / n_total
   657                                     # xgb_params['scale_pos_weight'] = (1.0 - prior) / prior
   658   1506.1 MiB      0.0 MiB           run_info['xgb_params'] = xgb_params
   659   1506.1 MiB      0.0 MiB           ub.log('Get xgb_params')
   660   1506.1 MiB      0.0 MiB           print xgb_params
   661                             
   662   1506.1 MiB      0.0 MiB           xgb_num_rounds = N_rounds
   663   1506.1 MiB      0.0 MiB           run_info['xgb_num_rounds'] = xgb_num_rounds
   664   1506.1 MiB      0.0 MiB           print 'xgb_num_rounds', xgb_num_rounds
   665   1506.1 MiB      0.0 MiB           if cv:
   666                                         ub.log('Running cross validation...')
   667                                         eval_hist = xgb.cv(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   668                                                            early_stopping_rounds=early_stop_rounds,
   669                                                            feval=ub.mcc_eval, maximize=True,
   670                                                            verbose_eval=1, show_stdv=True, nfold=3, seed=0, stratified=True)
   671                                         print eval_hist
   672                                         eval_hist_fname = os.path.join(ub.output_dir, 'cv_eval_history_{}.csv'.format(postfix_train))
   673                                         if not compile_data:
   674                                             eval_hist_fname = eval_hist_fname.replace('.csv', '_{}.csv'.format(datetime_str))
   675                             
   676                                         run_info['eval_hist_fname'] = eval_hist_fname
   677                                         eval_hist.to_csv(eval_hist_fname)
   678                             
   679                                         run_info['cv_score_test'] = eval_hist['test-MCC-mean'].max()
   680                                         run_info['cv_score_train'] = eval_hist['train-MCC-mean'].max()
   681                             
   682                                     if 1:
   683   1506.1 MiB      0.0 MiB               ub.log('Running training...')
   684   1506.1 MiB      0.0 MiB               watchlist = [(xgtrain, 'train'), (xgval, 'eval')]
   685   1506.1 MiB      0.0 MiB               model = xgb.train(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   686   1506.1 MiB      0.0 MiB                                 early_stopping_rounds=early_stop_rounds,
   687   1506.1 MiB      0.0 MiB                                 feval=ub.mcc_eval, maximize=True,
   688   1903.4 MiB    397.2 MiB                                 evals=watchlist, verbose_eval=True)
   689                             
   690   1903.4 MiB      0.0 MiB               model_fname = os.path.join(ub.output_dir, 'xbg_{}.model'.format(postfix_train))
   691   1903.4 MiB      0.0 MiB               if not compile_data:
   692                                             model_fname = model_fname.replace('.model', '_{}.model'.format(datetime_str))
   693   1903.4 MiB      0.0 MiB               ub.log('Saving model: {}...'.format(model_fname))
   694   1903.4 MiB      0.0 MiB               model.save_model(model_fname)
   695   1903.4 MiB      0.0 MiB               model.dump_model(model_fname + '.raw.txt')
   696   1903.4 MiB      0.0 MiB               run_info['model_fname'] = model_fname
   697                             
   698   1903.4 MiB      0.0 MiB               ntree_limit = model.best_iteration + 1
   699                             
   700   1903.4 MiB      0.0 MiB               ub.log('Predictions on xgtrain...', 'highlight')
   701   1903.4 MiB      0.0 MiB               predictions = model.predict(xgtrain, ntree_limit=ntree_limit)
   702                             
   703   1903.4 MiB      0.0 MiB               best_proba, best_mcc, y_pred = ub.eval_mcc(y_train, predictions, True)
   704   1903.4 MiB      0.0 MiB               mcc_official = matthews_corrcoef(y_train, y_pred)
   705   1903.4 MiB      0.0 MiB               print 'ntree limit:', ntree_limit
   706   1903.4 MiB      0.0 MiB               print 'best_mcc:', best_mcc
   707   1903.4 MiB      0.0 MiB               print 'best_proba:', best_proba
   708   1903.4 MiB      0.0 MiB               print 'matthews_corroef', mcc_official
   709                             
   710   1903.4 MiB      0.0 MiB               run_info['ntree_limit_train'] = ntree_limit
   711   1903.4 MiB      0.0 MiB               run_info['best_mcc_train'] = best_mcc
   712   1903.4 MiB      0.0 MiB               run_info['best_proba_train'] = best_proba
   713   1903.4 MiB      0.0 MiB               run_info['mcc_official_train'] = mcc_official
   714                             
   715   1903.4 MiB      0.0 MiB               ub.log('Predictions on xgval...', 'highlight')
   716   1903.4 MiB      0.0 MiB               predictions = model.predict(xgval, ntree_limit=ntree_limit)
   717                             
   718   1903.4 MiB      0.0 MiB               best_proba, best_mcc, y_pred = ub.eval_mcc(y_val, predictions, True)
   719   1903.4 MiB      0.0 MiB               mcc_official = matthews_corrcoef(y_val, y_pred)
   720   1903.4 MiB      0.0 MiB               print 'ntree limit:', ntree_limit
   721   1903.4 MiB      0.0 MiB               print 'best_mcc:', best_mcc
   722   1903.4 MiB      0.0 MiB               print 'best_proba:', best_proba
   723   1903.4 MiB      0.0 MiB               print 'matthews_corroef', mcc_official
   724                             
   725   1903.4 MiB      0.0 MiB               run_info['ntree_limit_val'] = ntree_limit
   726   1903.4 MiB      0.0 MiB               run_info['best_mcc_val'] = best_mcc
   727   1903.4 MiB      0.0 MiB               run_info['best_proba_val'] = best_proba
   728   1903.4 MiB      0.0 MiB               run_info['mcc_official_val'] = mcc_official
   729                             
   730   1903.4 MiB      0.0 MiB               if analyze_feature_importance:
   731                                             ub.log('Analyzing feature importance...')
   732                                             feature_imp_fname_template = run_info['feature_imp_fname_template']
   733                                             top_features_fname = run_info['top_features_fname']
   734                                             feature_imp_fname = feature_imp_fname_template.format(postfix_train)
   735                                             imp = model.get_fscore()
   736                                             imp = sorted(imp.items(), key=operator.itemgetter(1))
   737                                             imp_df = pd.DataFrame(imp, columns=['feature', 'fscore'])
   738                                             imp_df['fscore'] = imp_df['fscore'] / imp_df['fscore'].sum()
   739                             
   740                                             ub.log('Output result csv to {}...'.format(feature_imp_fname + '.csv'))
   741                                             imp_df.to_csv(feature_imp_fname + '.csv')
   742                             
   743                                             plt.figure()
   744                                             imp_df.plot(kind='barh', x='feature', y='fscore', legend=False, figsize=(6, 10))
   745                                             plt.title('XGBoost Feature Importance @ {}'.format(postfix_train))
   746                                             plt.xlabel('relative importance')
   747                                             plt.gcf().savefig(feature_imp_fname + '.png', bbox_inches='tight')
   748                             
   749                                             feature_lists = glob.glob(feature_imp_fname_template.replace('{}', '*.csv'))
   750                                             ub.log('Aggregating previous analysis results...')
   751                                             print feature_lists
   752                                             features_df = None
   753                                             if feature_lists:
   754                                                 for f_l in feature_lists:
   755                                                     tmp_df = pd.read_csv(f_l, index_col=0)
   756                                                     if features_df is None:
   757                                                         features_df = tmp_df
   758                                                     else:
   759                                                         features_df = pd.concat([features_df, tmp_df], ignore_index=True)
   760                             
   761                                             f_df = features_df.groupby(['feature']).mean().reset_index()
   762                                             f_df['overall'] = True
   763                                             imp_df['overall'] = False
   764                                             merged_df = pd.concat([imp_df, f_df]).sort_values(by=['overall', 'fscore'], ascending=False)
   765                                             sns_plot = sns.factorplot(y='feature', x='fscore', data=merged_df, hue='overall', kind='bar',
   766                                                                       hue_order=[True, False], size=20, aspect=0.5)
   767                                             sns_plot.savefig(feature_imp_fname + '_overall.png', bbox_inches='tight')
   768                             
   769                                             ub.log('Output overall result csv to {}...'.format(top_features_fname))
   770                                             with open(top_features_fname, 'w') as tf:
   771                                                 tf.write('\n'.join(list(set(merged_df.feature.values))))
   772                             
   773                                             merged_df.to_csv(top_features_fname.replace('.txt', '_df.csv'), index=False)
   774                             
   775                             
   776                                             # json has trouble serializing np.float32
   777                                             # with open(run_info_fname, 'w') as fp:
   778                                             #    json.dump(run_info, fp)
   779                             
   780   1903.4 MiB      0.0 MiB       if make_submission:
   781                                     assert (run_info_fname is not None)
   782                             
   783                                     if not train_model and not compile_data:
   784                                         ub.log('(make_submission) Loading run info from {} ...'.format(run_info_fname))
   785                                         with open(run_info_fname, 'r') as fp:
   786                                             run_info = eval(fp.read())
   787                                         print json.dumps(run_info, indent=2)
   788                             
   789                                     if ub.home_dir not in run_info['model_fname']:
   790                                         for i in ub.possible_home_dirs:
   791                                             if i in run_info['model_fname']:
   792                                                 logged_home_dir = i
   793                             
   794                                     for k in ['fname_xgtest', 'model_fname']:
   795                                         if ub.home_dir not in run_info[k]:
   796                                             for i in ub.possible_home_dirs:
   797                                                 if i in run_info[k]:
   798                                                     run_info[k] = run_info[k].replace(i, ub.home_dir)
   799                             
   800                                     if not train_model:
   801                                         model = xgb.Booster()
   802                                         ub.log('Loading model {} ...'.format(run_info['model_fname']))
   803                                         model.load_model(run_info['model_fname'])
   804                             
   805                                     if not compile_data:
   806                                         ub.log('Loading xgtest data {} ...'.format(run_info['fname_xgtest']))
   807                                         xgtest = xgb.DMatrix(run_info['fname_xgtest'])
   808                             
   809                                     ub.log('XGB making predictions...')
   810                             
   811                                     postfix_train = run_info['postfix_train']
   812                             
   813                                     ypred = model.predict(xgtest, ntree_limit=run_info['ntree_limit_train'])
   814                                     nrows = len(ypred)
   815                             
   816                                     sample = pd.read_csv(os.path.join(ub.data_dir, 'sample_submission.csv'), nrows=nrows)
   817                                     sample['Response'] = ypred
   818                                     fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}_prob.csv".format(postfix_train))
   819                                     if not compile_data:
   820                                         fname_output = fname_output.replace('.csv', '_{}.csv'.format(datetime_str))
   821                                     ub.log('Writing output file (raw proba) {} ...'.format(fname_output))
   822                                     sample.to_csv(fname_output, index=False)
   823                             
   824                                     best_proba = (run_info['best_proba_train'] + run_info['best_proba_val']) / 2.0
   825                                     ub.log('Using threshold: best_proba == {}'.format(best_proba))
   826                                     sample['Response'] = (ypred > best_proba).astype(int)
   827                                     fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}.csv".format(postfix_train))
   828                                     if not compile_data:
   829                                         fname_output = fname_output.replace('.csv', '_{}.csv'.format(datetime_str))
   830                                     ub.log('Writing output file {} ...'.format(fname_output))
   831                                     sample.to_csv(fname_output, index=False)
   832                             
   833   1903.4 MiB      0.0 MiB       if compile_data or train_model:
   834   1903.4 MiB      0.0 MiB           if compile_data:
   835   1903.4 MiB      0.0 MiB               if run_info_fname is not None:
   836                                             ub.log('Ignore input run_info_fname {}'.format(run_info_fname))
   837   1903.4 MiB      0.0 MiB               run_info_fname = os.path.join(ub.output_dir, 'run_info_{}.txt'.format(postfix_train))
   838                                     # else run_info_fname is an input parameter
   839   1903.4 MiB      0.0 MiB           ub.log('Saving run_info into {}'.format(run_info_fname))
   840   1903.4 MiB      0.0 MiB           print pd.Series(run_info)
   841   1903.4 MiB      0.0 MiB           with open(run_info_fname, 'w') as fp:
   842   1903.4 MiB      0.0 MiB               fp.write(str(run_info))
   843                             
   844   1903.4 MiB      0.0 MiB       return run_info_fname


