Filename: main_bosch.py

Line #    Mem usage    Increment   Line Contents
================================================
   315    168.2 MiB      0.0 MiB   @profile(stream=f_mem)
   316                             def main(run_info_fname=None,
   317                                      compile_data=False,
   318                                      train_model=False,
   319                                      make_submission=False,
   320                                      N_start=None,
   321                                      N_files_train=1,
   322                                      N_files_test=1,
   323                                      feature_down_select=False,
   324                                      N_features=700,
   325                                      analyze_feature_importance=False,
   326                                      cv=False,
   327                                      # if True running cross validation if False, run single model training session and importance analysis
   328                                      early_stop_rounds=50,
   329                                      N_rounds=1000,
   330                                      testsize=0.1,
   331                                      xgb_params=None
   332                                      ):
   333    168.2 MiB      0.0 MiB       datetime_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
   334                             
   335    168.2 MiB      0.0 MiB       if compile_data:
   336                                     run_info = dict()
   337                                     N_splits = ub.N_split
   338                                     if N_files_train > N_splits:
   339                                         N_files_train = N_splits
   340                                     if N_files_test > N_splits:
   341                                         N_files_test = N_splits
   342                             
   343                                     if analyze_feature_importance and feature_down_select:
   344                                         assert 0
   345                             
   346                                     run_info['N_splits'] = N_splits
   347                                     run_info['N_files_train'] = N_files_train
   348                                     run_info['N_files_test'] = N_files_test
   349                                     run_info['feature_down_select'] = feature_down_select
   350                                     run_info['N_features'] = N_features
   351                                     run_info['cv'] = cv
   352                                     run_info['analyze_feature_importance'] = analyze_feature_importance
   353                                     run_info['early_stop_rounds'] = early_stop_rounds
   354                             
   355                                     df_train, n_start = load_data(load_test=False, N_start=N_start, N_read=N_files_train, N_split=N_splits,
   356                                                                   shuffle=False,
   357                                                                   feature_down_select=feature_down_select, N_features=N_features)
   358                                     df_test, _ = load_data(load_test=True, N_start=n_start, N_read=N_files_test, N_split=N_splits, shuffle=False,
   359                                                            feature_down_select=feature_down_select, N_features=N_features)
   360                             
   361                                     ub.log('generating id diff columns based on various dates columns')
   362                                     dates_cols = [x for x in list(df_train.columns) if 'start_date' in x or 'end_date' in x]
   363                             
   364                                     # print dates_cols
   365                             
   366                                     df_datesort = pd.concat([df_train[['Id'] + dates_cols], df_test[['Id'] + dates_cols]],
   367                                                             ignore_index=True)
   368                                     gc.collect()
   369                             
   370                                     for c in dates_cols:
   371                                         df_datesort.sort_values(by=[c, 'Id'], inplace=True)
   372                                         df_datesort[c + '_id_diff'] = df_datesort['Id'].diff().fillna(999999).astype(int)
   373                                         df_datesort[c + '_id_diff_reverse'] = df_datesort['Id'].iloc[::-1].diff().fillna(999999).astype(int)
   374                             
   375                                         df_datesort.drop([c], axis=1, inplace=True)
   376                             
   377                                     df_datesort.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_datesort_debug.csv'))
   378                             
   379                                     gc.collect()
   380                                     df_train = df_train.merge(df_datesort, on='Id')
   381                                     df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_debug.csv'))
   382                             
   383                                     gc.collect()
   384                                     df_test = df_test.merge(df_datesort, on='Id')
   385                                     df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_test_debug.csv'))
   386                             
   387                                     df_test['Response'] = 0
   388                             
   389                                     print df_train.shape
   390                                     print df_test.shape
   391                                     gc.collect()
   392                             
   393                                     # if N_files_train == N_splits:
   394                                     #     split_data(df_train,
   395                                     #                output_fname_template=os.path.join(ub.processed_data_dir, 'df_train_preprocessed_part{}.csv'))
   396                                     # if N_files_test == N_splits:
   397                                     #     split_data(df_test,
   398                                     #                output_fname_template=os.path.join(ub.processed_data_dir, 'df_test_preprocessed_part{}.csv'))
   399                             
   400                                     fillna = True
   401                                     run_info['fillna'] = fillna
   402                                     if fillna:
   403                                         ub.log('Filling na...')
   404                                         for df in [df_train, df_test]:
   405                                             cols_full_flag = df.isnull().any()
   406                                             non_full_cols = list(cols_full_flag[cols_full_flag].index)
   407                                             print 'Non-full columns: {}'.format(len(non_full_cols))
   408                                             # print non_full_cols
   409                             
   410                                             if 1:
   411                                                 df.fillna(-999999, inplace=True)
   412                                             else:
   413                                                 # print df.PersonalField7.unique()
   414                                                 for c in non_full_cols:
   415                                                     if len(df[c].unique()) > 2:
   416                                                         most_frequent_items = df[c].value_counts().idxmax()
   417                                                         print c, most_frequent_items
   418                                                         df[c].fillna(value=most_frequent_items, inplace=True)
   419                                                     else:  # if it is only a pair of value [somthing, nan] then fill in "missing"
   420                                                         df[c].fillna(value='missing', inplace=True)
   421                                                         print c, df[c].unique()
   422                             
   423                                             cols_full_flag = df.isnull().any()
   424                                             non_full_cols = list(cols_full_flag[cols_full_flag].index)
   425                                             print 'Non-full columns: {}'.format(len(non_full_cols))
   426                             
   427                                             le = LabelEncoder()
   428                                             obj_cols = df.select_dtypes(include=['object']).columns
   429                                             # print 'Obj columns: ', list(obj_cols)
   430                                             for col in obj_cols:
   431                                                 df[col] = le.fit_transform(df[col])
   432                             
   433                                         df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   434                                         df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   435                             
   436                                     ub.log('Dropping Id and Response columns...')
   437                                     columns_to_drop = ['Id', 'Response']
   438                                     shuffle_col = df_train[['Id']].copy()
   439                                     shuffle_col['Id'] = np.random.randn(len(shuffle_col))
   440                             
   441                                     y_total_df = df_train['Response']
   442                                     y_total = df_train['Response'].values
   443                                     df_train.drop(columns_to_drop, axis=1, inplace=True)
   444                                     df_test.drop(columns_to_drop, axis=1, inplace=True)
   445                             
   446                                     print df_train.shape
   447                                     print df_test.shape
   448                                     prior = np.sum(y_total) / (1. * len(y_total))
   449                                     print 'prior: {}'.format(prior)
   450                                     run_info['prior'] = prior
   451                             
   452                                     gc.collect()
   453                             
   454                                     feature_imp_fname_template = os.path.join(ub.output_dir, 'feature_importance_xgb_{}')
   455                                     run_info['feature_imp_fname_template'] = feature_imp_fname_template
   456                                     top_features_fname = feature_imp_fname_template.format('accumu_list.txt')
   457                                     run_info['top_features_fname'] = top_features_fname
   458                             
   459                                     # if feature_down_select:
   460                                     #     ub.log('Feature down selected based on {}...'.format(top_features_fname))
   461                                     #     #todo may need to set a maxN for the number of features to use
   462                                     #
   463                                     #     with open(top_features_fname, 'r') as tf:
   464                                     #         selected_cols = [x.strip() for x in tf.readlines()]
   465                                     #     df_train = df_train[selected_cols]
   466                                     #     df_test = df_test[selected_cols]
   467                                     #     print df_train.shape
   468                                     #     print df_test.shape
   469                                     #     print df_train.columns
   470                             
   471                                     feature_names = list(df_train.columns)
   472                             
   473                                     postfix_train = '{}_{}of{}'.format(datetime_str, N_files_train, N_splits)
   474                                     postfix_test = '{}_{}of{}'.format(datetime_str, N_files_test, N_splits)
   475                             
   476                                     run_info['postfix_train'] = postfix_train
   477                                     run_info['postfix_test'] = postfix_test
   478                             
   479                                     run_info['testsize'] = testsize
   480                             
   481                                     train_test_split_method = 1
   482                             
   483                                     ub.log('Train/val split using testsize={}, split_method={}'.format(testsize, train_test_split_method))
   484                                     if train_test_split_method == 1:
   485                                         train_idx = shuffle_col[shuffle_col['Id'] > testsize].index
   486                                         val_idx = shuffle_col[shuffle_col['Id'] <= testsize].index
   487                                         ub.log('Done shuffling...')
   488                                         print 'len of train_idx', len(train_idx)
   489                                         print 'len of val_idx', len(val_idx)
   490                                         y_train = y_total_df.loc[train_idx].values
   491                                         y_val = y_total_df.loc[val_idx].values
   492                             
   493                                         xgtrain = xgb.DMatrix(df_train.loc[train_idx].values, y_train, feature_names=feature_names)
   494                                         ub.log('Assembled xgtrain')
   495                                         xgval = xgb.DMatrix(df_train.loc[val_idx].values, y_val, feature_names=feature_names)
   496                                         ub.log('Assembled xgval')
   497                                         del df_train
   498                                         ub.log('Deleted df_train')
   499                                         gc.collect()
   500                                     else:
   501                                         x_train, x_val, y_train, y_val = train_test_split(df_train.values, y_total, test_size=testsize)
   502                                         ub.log('Done shuffling...')
   503                                         print x_train.shape
   504                                         print x_val.shape
   505                                         del df_train
   506                                         gc.collect()
   507                                         ub.log('Deleted df_train')
   508                             
   509                                         xgtrain = xgb.DMatrix(x_train, y_train, feature_names=feature_names)
   510                                         ub.log('Assembled xgtrain')
   511                                         xgval = xgb.DMatrix(x_val, y_val, feature_names=feature_names)
   512                                         ub.log('Assembled xgval')
   513                                         del x_train
   514                                         del x_val
   515                                         gc.collect()
   516                             
   517                                     fname_xgtrain = os.path.join(ub.processed_data_dir, 'xgtrain_{}.buffer'.format(postfix_train))
   518                                     xgtrain.save_binary(fname_xgtrain)
   519                                     ub.log('Saved {}'.format(fname_xgtrain))
   520                             
   521                                     fname_xgval = os.path.join(ub.processed_data_dir, 'xgval_{}.buffer'.format(postfix_train))
   522                                     xgval.save_binary(fname_xgval)
   523                                     ub.log('Saved {}'.format(fname_xgval))
   524                             
   525                                     xgtest = xgb.DMatrix(df_test.values, feature_names=feature_names)
   526                                     ub.log('Assembled xgtest')
   527                                     fname_xgtest = os.path.join(ub.processed_data_dir, 'xgtest_{}.buffer'.format(postfix_test))
   528                                     xgtest.save_binary(fname_xgtest)
   529                                     ub.log('Saved {}'.format(fname_xgtest))
   530                             
   531                                     del df_test
   532                                     gc.collect()
   533                                     ub.log('Deleted df_test')
   534                             
   535                                     print 'train and val set sizes'
   536                                     print xgtrain.num_row(), xgtrain.num_col()
   537                                     print xgval.num_row(), xgval.num_col()
   538                             
   539                                     run_info['fname_xgtrain'] = fname_xgtrain
   540                                     run_info['fname_xgval'] = fname_xgval
   541                                     run_info['fname_xgtest'] = fname_xgtest
   542                             
   543                                     fname_ytrain = os.path.join(ub.processed_data_dir, 'ytrain_{}.npy'.format(postfix_train))
   544                                     fname_yval = os.path.join(ub.processed_data_dir, 'yval_{}.npy'.format(postfix_train))
   545                             
   546                                     np.save(fname_ytrain, y_train)
   547                                     ub.log('Saved ' + fname_ytrain)
   548                             
   549                                     np.save(fname_yval, y_val)
   550                                     ub.log('Saved ' + fname_yval)
   551                             
   552                                     run_info['fname_ytrain'] = fname_ytrain
   553                                     run_info['fname_yval'] = fname_yval
   554                             
   555    168.2 MiB      0.0 MiB       if train_model:
   556    168.2 MiB      0.0 MiB           assert compile_data or (run_info_fname is not None)
   557                             
   558    168.2 MiB      0.0 MiB           if not compile_data:
   559    168.2 MiB      0.0 MiB               ub.log('(train_model) Loading run info from {} ...'.format(run_info_fname))
   560    168.2 MiB      0.0 MiB               with open(run_info_fname, 'r') as fp:
   561    168.2 MiB      0.0 MiB                   run_info = eval(fp.read())
   562    168.2 MiB      0.0 MiB               print json.dumps(run_info, indent=2)
   563                             
   564    168.2 MiB      0.0 MiB               run_info_fname = run_info_fname.replace('.txt', '_{}.txt'.format(datetime_str))
   565                             
   566    168.2 MiB      0.0 MiB               logged_home_dir = None
   567    168.2 MiB      0.0 MiB               if ub.home_dir not in run_info['fname_xgtrain']:
   568                                             for i in ub.possible_home_dirs:
   569                                                 if i in run_info['fname_xgtrain']:
   570                                                     logged_home_dir = i
   571                             
   572                                             for k in ['fname_xgtrain', 'fname_xgval', 'fname_ytrain', 'fname_yval']:
   573                                                 run_info[k] = run_info[k].replace(logged_home_dir, ub.home_dir)
   574                             
   575                                             if analyze_feature_importance:
   576                                                 for k in ['feature_imp_fname_template', 'top_feature_fname']:
   577                                                     run_info[k] = run_info[k].replace(logged_home_dir, ub.home_dir)
   578                             
   579    168.2 MiB      0.0 MiB               ub.log('Loading xgtrain data {} ...'.format(run_info['fname_xgtrain']))
   580   3177.0 MiB   3008.9 MiB               xgtrain = xgb.DMatrix(run_info['fname_xgtrain'])
   581                             
   582   3177.0 MiB      0.0 MiB               ub.log('Loading xgval data {} ...'.format(run_info['fname_xgval']))
   583   6712.1 MiB   3535.0 MiB               xgval = xgb.DMatrix(run_info['fname_xgval'])
   584                             
   585   6712.1 MiB      0.0 MiB               ub.log('Loading ytrain data {} ...'.format(run_info['fname_ytrain']))
   586   6716.5 MiB      4.4 MiB               y_train = np.load(run_info['fname_ytrain'])
   587                             
   588   6716.5 MiB      0.0 MiB               ub.log('Loading yval data {} ...'.format(run_info['fname_yval']))
   589   6721.2 MiB      4.8 MiB               y_val = np.load(run_info['fname_yval'])
   590                             
   591   6721.2 MiB      0.0 MiB           prior = run_info['prior']
   592   6721.2 MiB      0.0 MiB           postfix_train = run_info['postfix_train']
   593                             
   594   6721.2 MiB      0.0 MiB           run_info['cv'] = cv
   595   6721.2 MiB      0.0 MiB           run_info['analyze_feature_importance'] = analyze_feature_importance
   596   6721.2 MiB      0.0 MiB           run_info['early_stop_rounds'] = early_stop_rounds
   597                             
   598   6721.2 MiB      0.0 MiB           if xgb_params is None:
   599                                         xgb_params = get_params(bases_core=prior)
   600                             
   601   6721.2 MiB      0.0 MiB           xgb_params['base_score'] = prior  # n_positive / n_total
   602                                     # xgb_params['scale_pos_weight'] = (1.0 - prior) / prior
   603   6721.2 MiB      0.0 MiB           run_info['xgb_params'] = xgb_params
   604   6721.2 MiB      0.0 MiB           ub.log('Get xgb_params')
   605   6721.2 MiB      0.0 MiB           print xgb_params
   606                             
   607   6721.2 MiB      0.0 MiB           xgb_num_rounds = N_rounds
   608   6721.2 MiB      0.0 MiB           run_info['xgb_num_rounds'] = xgb_num_rounds
   609   6721.2 MiB      0.0 MiB           print 'xgb_num_rounds', xgb_num_rounds
   610   6721.2 MiB      0.0 MiB           if cv:
   611   6721.2 MiB      0.0 MiB               ub.log('Running cross validation...')
   612   6721.2 MiB      0.0 MiB               eval_hist = xgb.cv(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   613   6721.2 MiB      0.0 MiB                                  early_stopping_rounds=early_stop_rounds,
   614   6721.2 MiB      0.0 MiB                                  feval=ub.mcc_eval, maximize=True,
   615   6790.3 MiB     69.1 MiB                                  verbose_eval=1, show_stdv=True, nfold=3, seed=0, stratified=True)
   616   6790.3 MiB      0.0 MiB               print eval_hist
   617   6790.3 MiB      0.0 MiB               eval_hist_fname = os.path.join(ub.output_dir, 'cv_eval_history_{}.csv'.format(postfix_train))
   618   6790.3 MiB      0.0 MiB               if not compile_data:
   619   6790.3 MiB      0.0 MiB                   eval_hist_fname = eval_hist_fname.replace('.csv', '_{}.csv'.format(datetime_str))
   620                             
   621                             
   622   6790.3 MiB      0.0 MiB               run_info['eval_hist_fname'] = eval_hist_fname
   623   6790.3 MiB      0.0 MiB               eval_hist.to_csv(eval_hist_fname)
   624                             
   625   6790.7 MiB      0.4 MiB               run_info['cv_score_test'] = eval_hist['test-MCC-mean'].max()
   626   6790.7 MiB      0.0 MiB               run_info['cv_score_train'] = eval_hist['train-MCC-mean'].max()
   627                             
   628                                     if 1:
   629   6790.7 MiB      0.0 MiB               ub.log('Running training...')
   630   6790.7 MiB      0.0 MiB               watchlist = [(xgtrain, 'train'), (xgval, 'eval')]
   631   6790.7 MiB      0.0 MiB               model = xgb.train(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   632   6790.7 MiB      0.0 MiB                                 early_stopping_rounds=early_stop_rounds,
   633   6790.7 MiB      0.0 MiB                                 feval=ub.mcc_eval, maximize=True,
   634   9800.6 MiB   3009.9 MiB                                 evals=watchlist, verbose_eval=True)
   635                             
   636   9800.6 MiB      0.0 MiB               model_fname = os.path.join(ub.output_dir, 'xbg_{}.model'.format(postfix_train))
   637   9800.6 MiB      0.0 MiB               if not compile_data:
   638   9800.6 MiB      0.0 MiB                   model_fname = model_fname.replace('.model', '_{}.model'.format(datetime_str))
   639   9800.6 MiB      0.0 MiB               ub.log('Saving model: {}...'.format(model_fname))
   640   9800.6 MiB      0.0 MiB               model.save_model(model_fname)
   641   9800.6 MiB      0.0 MiB               model.dump_model(model_fname + '.raw.txt')
   642   9800.6 MiB      0.0 MiB               run_info['model_fname'] = model_fname
   643                             
   644   9800.6 MiB      0.0 MiB               ntree_limit = model.best_iteration + 1
   645                             
   646   9800.6 MiB      0.0 MiB               ub.log('Predictions on xgtrain...', 'highlight')
   647   9800.6 MiB      0.0 MiB               predictions = model.predict(xgtrain, ntree_limit=ntree_limit)
   648                             
   649   9800.6 MiB      0.0 MiB               best_proba, best_mcc, y_pred = ub.eval_mcc(y_train, predictions, True)
   650   9800.6 MiB      0.0 MiB               mcc_official = matthews_corrcoef(y_train, y_pred)
   651   9800.6 MiB      0.0 MiB               print 'ntree limit:', ntree_limit
   652   9800.6 MiB      0.0 MiB               print 'best_mcc:', best_mcc
   653   9800.6 MiB      0.0 MiB               print 'best_proba:', best_proba
   654   9800.6 MiB      0.0 MiB               print 'matthews_corroef', mcc_official
   655                             
   656   9800.6 MiB      0.0 MiB               run_info['ntree_limit_train'] = ntree_limit
   657   9800.6 MiB      0.0 MiB               run_info['best_mcc_train'] = best_mcc
   658   9800.6 MiB      0.0 MiB               run_info['best_proba_train'] = best_proba
   659   9800.6 MiB      0.0 MiB               run_info['mcc_official_train'] = mcc_official
   660                             
   661   9800.6 MiB      0.0 MiB               ub.log('Predictions on xgval...', 'highlight')
   662   9800.6 MiB      0.0 MiB               predictions = model.predict(xgval, ntree_limit=ntree_limit)
   663                             
   664   9800.6 MiB      0.0 MiB               best_proba, best_mcc, y_pred = ub.eval_mcc(y_val, predictions, True)
   665   9800.6 MiB      0.0 MiB               mcc_official = matthews_corrcoef(y_val, y_pred)
   666   9800.6 MiB      0.0 MiB               print 'ntree limit:', ntree_limit
   667   9800.6 MiB      0.0 MiB               print 'best_mcc:', best_mcc
   668   9800.6 MiB      0.0 MiB               print 'best_proba:', best_proba
   669   9800.6 MiB      0.0 MiB               print 'matthews_corroef', mcc_official
   670                             
   671   9800.6 MiB      0.0 MiB               run_info['ntree_limit_val'] = ntree_limit
   672   9800.6 MiB      0.0 MiB               run_info['best_mcc_val'] = best_mcc
   673   9800.6 MiB      0.0 MiB               run_info['best_proba_val'] = best_proba
   674   9800.6 MiB      0.0 MiB               run_info['mcc_official_val'] = mcc_official
   675                             
   676   9800.6 MiB      0.0 MiB               if analyze_feature_importance:
   677                                             ub.log('Analyzing feature importance...')
   678                                             feature_imp_fname_template = run_info['feature_imp_fname_template']
   679                                             top_features_fname = run_info['top_features_fname']
   680                                             feature_imp_fname = feature_imp_fname_template.format(postfix_train)
   681                                             imp = model.get_fscore()
   682                                             imp = sorted(imp.items(), key=operator.itemgetter(1))
   683                                             imp_df = pd.DataFrame(imp, columns=['feature', 'fscore'])
   684                                             imp_df['fscore'] = imp_df['fscore'] / imp_df['fscore'].sum()
   685                             
   686                                             ub.log('Output result csv to {}...'.format(feature_imp_fname + '.csv'))
   687                                             imp_df.to_csv(feature_imp_fname + '.csv')
   688                             
   689                                             plt.figure()
   690                                             imp_df.plot(kind='barh', x='feature', y='fscore', legend=False, figsize=(6, 10))
   691                                             plt.title('XGBoost Feature Importance @ {}'.format(postfix_train))
   692                                             plt.xlabel('relative importance')
   693                                             plt.gcf().savefig(feature_imp_fname + '.png', bbox_inches='tight')
   694                             
   695                                             feature_lists = glob.glob(feature_imp_fname_template.replace('{}', '*.csv'))
   696                                             ub.log('Aggregating previous analysis results...')
   697                                             print feature_lists
   698                                             features_df = None
   699                                             if feature_lists:
   700                                                 for f_l in feature_lists:
   701                                                     tmp_df = pd.read_csv(f_l, index_col=0)
   702                                                     if features_df is None:
   703                                                         features_df = tmp_df
   704                                                     else:
   705                                                         features_df = pd.concat([features_df, tmp_df], ignore_index=True)
   706                             
   707                                             f_df = features_df.groupby(['feature']).mean().reset_index()
   708                                             f_df['overall'] = True
   709                                             imp_df['overall'] = False
   710                                             merged_df = pd.concat([imp_df, f_df]).sort_values(by=['overall', 'fscore'], ascending=False)
   711                                             sns_plot = sns.factorplot(y='feature', x='fscore', data=merged_df, hue='overall', kind='bar',
   712                                                                       hue_order=[True, False], size=20, aspect=0.5)
   713                                             sns_plot.savefig(feature_imp_fname + '_overall.png', bbox_inches='tight')
   714                             
   715                                             ub.log('Output overall result csv to {}...'.format(top_features_fname))
   716                                             with open(top_features_fname, 'w') as tf:
   717                                                 tf.write('\n'.join(list(set(merged_df.feature.values))))
   718                             
   719                                             merged_df.to_csv(top_features_fname.replace('.txt', '_df.csv'), index=False)
   720                             
   721                             
   722                                             # json has trouble serializing np.float32
   723                                             # with open(run_info_fname, 'w') as fp:
   724                                             #    json.dump(run_info, fp)
   725                             
   726   9800.6 MiB      0.0 MiB       if make_submission:
   727   9800.6 MiB      0.0 MiB           assert (run_info_fname is not None)
   728                             
   729   9800.6 MiB      0.0 MiB           if not train_model and not compile_data:
   730                                         ub.log('(make_submission) Loading run info from {} ...'.format(run_info_fname))
   731                                         with open(run_info_fname, 'r') as fp:
   732                                             run_info = eval(fp.read())
   733                                         print json.dumps(run_info, indent=2)
   734                             
   735   9800.6 MiB      0.0 MiB           if ub.home_dir not in run_info['model_fname']:
   736                                         for i in ub.possible_home_dirs:
   737                                             if i in run_info['model_fname']:
   738                                                 logged_home_dir = i
   739                             
   740   9800.6 MiB      0.0 MiB           for k in ['fname_xgtest', 'model_fname']:
   741   9800.6 MiB      0.0 MiB               if ub.home_dir not in run_info[k]:
   742                                             for i in ub.possible_home_dirs:
   743                                                 if i in run_info[k]:
   744                                                     run_info[k] = run_info[k].replace(i, ub.home_dir)
   745                             
   746   9800.6 MiB      0.0 MiB           if not train_model:
   747                                         model = xgb.Booster()
   748                                         ub.log('Loading model {} ...'.format(run_info['model_fname']))
   749                                         model.load_model(run_info['model_fname'])
   750                             
   751   9800.6 MiB      0.0 MiB           if not compile_data:
   752   9800.6 MiB      0.0 MiB               ub.log('Loading xgtest data {} ...'.format(run_info['fname_xgtest']))
   753  16339.3 MiB   6538.7 MiB               xgtest = xgb.DMatrix(run_info['fname_xgtest'])
   754                             
   755  16339.3 MiB      0.0 MiB           ub.log('XGB making predictions...')
   756                             
   757  16339.3 MiB      0.0 MiB           postfix_train = run_info['postfix_train']
   758                             
   759  16339.3 MiB      0.0 MiB           ypred = model.predict(xgtest, ntree_limit=run_info['ntree_limit_train'])
   760  16339.3 MiB      0.0 MiB           nrows = len(ypred)
   761                             
   762  16389.7 MiB     50.4 MiB           sample = pd.read_csv(os.path.join(ub.data_dir, 'sample_submission.csv'), nrows=nrows)
   763  16342.5 MiB    -47.2 MiB           sample['Response'] = ypred
   764  16342.5 MiB      0.0 MiB           fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}_prob.csv".format(postfix_train))
   765  16342.5 MiB      0.0 MiB           if not compile_data:
   766  16342.5 MiB      0.0 MiB               fname_output = fname_output.replace('.csv', '_{}.csv'.format(datetime_str))
   767  16342.5 MiB      0.0 MiB           ub.log('Writing output file (raw proba) {} ...'.format(fname_output))
   768  16342.5 MiB      0.0 MiB           sample.to_csv(fname_output, index=False)
   769                             
   770  16342.5 MiB      0.0 MiB           best_proba = (run_info['best_proba_train'] + run_info['best_proba_val']) / 2.0
   771  16342.5 MiB      0.0 MiB           ub.log('Using threshold: best_proba == {}'.format(best_proba))
   772  16360.3 MiB     17.8 MiB           sample['Response'] = (ypred > best_proba).astype(int)
   773  16360.3 MiB      0.0 MiB           fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}.csv".format(postfix_train))
   774  16360.3 MiB      0.0 MiB           if not compile_data:
   775  16360.3 MiB      0.0 MiB               fname_output = fname_output.replace('.csv', '_{}.csv'.format(datetime_str))
   776  16360.3 MiB      0.0 MiB           ub.log('Writing output file {} ...'.format(fname_output))
   777  16360.3 MiB      0.0 MiB           sample.to_csv(fname_output, index=False)
   778                             
   779  16360.3 MiB      0.0 MiB       if compile_data or train_model:
   780  16360.3 MiB      0.0 MiB           if compile_data:
   781                                         if run_info_fname is not None:
   782                                             ub.log('Ignore input run_info_fname {}'.format(run_info_fname))
   783                                         run_info_fname = os.path.join(ub.output_dir, 'run_info_{}.txt'.format(postfix_train))
   784                                     # else run_info_fname is an input parameter
   785  16360.3 MiB      0.0 MiB           ub.log('Saving run_info into {}'.format(run_info_fname))
   786  16360.3 MiB      0.0 MiB           print pd.Series(run_info)
   787  16360.3 MiB      0.0 MiB           with open(run_info_fname, 'w') as fp:
   788  16360.3 MiB      0.0 MiB               fp.write(str(run_info))
   789                             
   790  16360.3 MiB      0.0 MiB       return run_info_fname


