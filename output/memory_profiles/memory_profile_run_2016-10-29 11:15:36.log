Filename: main_bosch.py

Line #    Mem usage    Increment   Line Contents
================================================
   310    161.3 MiB      0.0 MiB   @profile(stream=f_mem)
   311                             def main(run_info_fname=None,
   312                                      compile_data=False,
   313                                      train_model=False,
   314                                      make_submission=False,
   315                                      N_start=None,
   316                                      N_files_train=1,
   317                                      N_files_test=1,
   318                                      feature_down_select=False,
   319                                      N_features=700,
   320                                      analyze_feature_importance=False,
   321                                      cv=False,
   322                                      # if True running cross validation if False, run single model training session and importance analysis
   323                                      early_stop_rounds=50,
   324                                      N_rounds=1000,
   325                                      testsize=0.1,
   326                                      xgb_params=None
   327                                      ):
   328    161.3 MiB      0.0 MiB       datetime_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
   329                             
   330    161.3 MiB      0.0 MiB       if compile_data:
   331    161.3 MiB      0.0 MiB           run_info = dict()
   332    161.3 MiB      0.0 MiB           N_splits = ub.N_split
   333    161.3 MiB      0.0 MiB           if N_files_train > N_splits:
   334                                         N_files_train = N_splits
   335    161.3 MiB      0.0 MiB           if N_files_test > N_splits:
   336                                         N_files_test = N_splits
   337                             
   338    161.3 MiB      0.0 MiB           if analyze_feature_importance and feature_down_select:
   339                                         assert 0
   340                             
   341    161.3 MiB      0.0 MiB           run_info['N_splits'] = N_splits
   342    161.3 MiB      0.0 MiB           run_info['N_files_train'] = N_files_train
   343    161.3 MiB      0.0 MiB           run_info['N_files_test'] = N_files_test
   344    161.3 MiB      0.0 MiB           run_info['feature_down_select'] = feature_down_select
   345    161.3 MiB      0.0 MiB           run_info['N_features'] = N_features
   346    161.3 MiB      0.0 MiB           run_info['cv'] = cv
   347    161.3 MiB      0.0 MiB           run_info['analyze_feature_importance'] = analyze_feature_importance
   348    161.3 MiB      0.0 MiB           run_info['early_stop_rounds'] = early_stop_rounds
   349                             
   350    161.3 MiB      0.0 MiB           df_train, n_start = load_data(load_test=False, N_start=N_start, N_read=N_files_train, N_split=N_splits,
   351    161.3 MiB      0.0 MiB                                         shuffle=False,
   352   2599.3 MiB   2438.0 MiB                                         feature_down_select=feature_down_select, N_features=N_features)
   353   2599.3 MiB      0.0 MiB           df_test, _ = load_data(load_test=True, N_start=n_start, N_read=N_files_test, N_split=N_splits, shuffle=False,
   354   4522.4 MiB   1923.0 MiB                                  feature_down_select=feature_down_select, N_features=N_features)
   355                             
   356   4522.4 MiB      0.0 MiB           ub.log('generating id diff columns based on various dates columns')
   357   4522.4 MiB      0.0 MiB           dates_cols = [x for x in list(df_train.columns) if ('start_date' in x or 'end_date' in x) and ('rank' not in x)]
   358                             
   359                                     # print dates_cols
   360                             
   361   4523.1 MiB      0.8 MiB           df_datesort = pd.concat([df_train[['Id'] + dates_cols], df_test[['Id'] + dates_cols]],
   362   4523.1 MiB      0.0 MiB                                   ignore_index=True)
   363   4523.1 MiB      0.0 MiB           gc.collect()
   364                             
   365   6751.8 MiB   2228.6 MiB           for c in dates_cols:
   366   6751.8 MiB      0.0 MiB               print c
   367   6751.6 MiB     -0.2 MiB               df_datesort.sort_values(by=[c, 'Id'], inplace=True)
   368   6751.6 MiB      0.0 MiB               df_datesort[c + '_id_diff'] = df_datesort['Id'].diff().fillna(999999).astype(int)
   369   6751.6 MiB      0.0 MiB               df_datesort[c + '_id_diff_reverse'] = df_datesort['Id'].iloc[::-1].diff().fillna(999999).astype(int)
   370                                         df_datesort[c + '_id_diff_magic'] = \
   371   6751.6 MiB      0.0 MiB                   1 + 2 * (df_datesort[c + '_id_diff'] > 1) + 1 * (df_datesort[c + '_id_diff_reverse'] < -1)
   372                             
   373   6751.8 MiB      0.2 MiB               df_datesort.drop([c], axis=1, inplace=True)
   374                             
   375   5473.9 MiB  -1277.8 MiB           df_datesort.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_datesort_debug.csv'))
   376                             
   377   4523.3 MiB   -950.6 MiB           gc.collect()
   378   6238.6 MiB   1715.3 MiB           df_train = df_train.merge(df_datesort, on='Id')
   379   6238.9 MiB      0.2 MiB           df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_debug.csv'))
   380                             
   381   4550.8 MiB  -1688.0 MiB           gc.collect()
   382   6456.4 MiB   1905.6 MiB           df_test = df_test.merge(df_datesort, on='Id')
   383   6456.4 MiB      0.0 MiB           df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_test_debug.csv'))
   384                             
   385   6470.7 MiB     14.3 MiB           df_test['Response'] = 0
   386                             
   387   6470.7 MiB      0.0 MiB           print df_train.shape
   388   6470.7 MiB      0.0 MiB           print df_test.shape
   389   4782.7 MiB  -1688.0 MiB           gc.collect()
   390                             
   391                                     # if N_files_train == N_splits:
   392                                     #     split_data(df_train,
   393                                     #                output_fname_template=os.path.join(ub.processed_data_dir, 'df_train_preprocessed_part{}.csv'))
   394                                     # if N_files_test == N_splits:
   395                                     #     split_data(df_test,
   396                                     #                output_fname_template=os.path.join(ub.processed_data_dir, 'df_test_preprocessed_part{}.csv'))
   397                             
   398   4782.7 MiB      0.0 MiB           fillna = True
   399   4782.7 MiB      0.0 MiB           run_info['fillna'] = fillna
   400   4782.7 MiB      0.0 MiB           if fillna:
   401   4782.7 MiB      0.0 MiB               ub.log('Filling na...')
   402   4782.7 MiB      0.0 MiB               for df in [df_train, df_test]:
   403   4879.7 MiB     97.0 MiB                   cols_full_flag = df.isnull().any()
   404   4879.7 MiB      0.0 MiB                   non_full_cols = list(cols_full_flag[cols_full_flag].index)
   405   4879.7 MiB      0.0 MiB                   print 'Non-full columns: {}'.format(len(non_full_cols))
   406                                             # print non_full_cols
   407                             
   408                                             if 1:
   409   4879.7 MiB      0.0 MiB                       df.fillna(-999999, inplace=True)
   410                                             else:
   411                                                 # print df.PersonalField7.unique()
   412                                                 for c in non_full_cols:
   413                                                     if len(df[c].unique()) > 2:
   414                                                         most_frequent_items = df[c].value_counts().idxmax()
   415                                                         print c, most_frequent_items
   416                                                         df[c].fillna(value=most_frequent_items, inplace=True)
   417                                                     else:  # if it is only a pair of value [somthing, nan] then fill in "missing"
   418                                                         df[c].fillna(value='missing', inplace=True)
   419                                                         print c, df[c].unique()
   420                             
   421   4879.7 MiB      0.0 MiB                   cols_full_flag = df.isnull().any()
   422   4879.7 MiB      0.0 MiB                   non_full_cols = list(cols_full_flag[cols_full_flag].index)
   423   4879.7 MiB      0.0 MiB                   print 'Non-full columns: {}'.format(len(non_full_cols))
   424                             
   425   4879.7 MiB      0.0 MiB                   le = LabelEncoder()
   426   4879.7 MiB      0.0 MiB                   obj_cols = df.select_dtypes(include=['object']).columns
   427                                             # print 'Obj columns: ', list(obj_cols)
   428   4879.7 MiB      0.0 MiB                   for col in obj_cols:
   429   4879.3 MiB     -0.4 MiB                       df[col] = le.fit_transform(df[col])
   430                             
   431   4366.4 MiB   -512.9 MiB               df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   432   4366.4 MiB      0.0 MiB               df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   433                             
   434   4366.4 MiB      0.0 MiB           ub.log('Dropping Id and Response columns...')
   435   4366.4 MiB      0.0 MiB           columns_to_drop = ['Id', 'Response']
   436   4779.1 MiB    412.8 MiB           shuffle_col = df_train[['Id']].copy()
   437   4779.1 MiB      0.0 MiB           shuffle_col['Id'] = np.random.randn(len(shuffle_col))
   438                             
   439   4779.1 MiB      0.0 MiB           y_total_df = df_train['Response']
   440   4779.1 MiB      0.0 MiB           y_total = df_train['Response'].values
   441   5426.1 MiB    647.0 MiB           df_train.drop(columns_to_drop, axis=1, inplace=True)
   442   5526.2 MiB    100.1 MiB           df_test.drop(columns_to_drop, axis=1, inplace=True)
   443                             
   444   5526.2 MiB      0.0 MiB           print df_train.shape
   445   5526.2 MiB      0.0 MiB           print df_test.shape
   446   5526.2 MiB      0.0 MiB           prior = np.sum(y_total) / (1. * len(y_total))
   447   5526.2 MiB      0.0 MiB           print 'prior: {}'.format(prior)
   448   5526.2 MiB      0.0 MiB           run_info['prior'] = prior
   449                             
   450   5526.2 MiB      0.0 MiB           gc.collect()
   451                             
   452   5526.2 MiB      0.0 MiB           feature_imp_fname_template = os.path.join(ub.output_dir, 'feature_importance_xgb_{}')
   453   5526.2 MiB      0.0 MiB           run_info['feature_imp_fname_template'] = feature_imp_fname_template
   454   5526.2 MiB      0.0 MiB           top_features_fname = feature_imp_fname_template.format('accumu_list.txt')
   455   5526.2 MiB      0.0 MiB           run_info['top_features_fname'] = top_features_fname
   456                             
   457                                     # if feature_down_select:
   458                                     #     ub.log('Feature down selected based on {}...'.format(top_features_fname))
   459                                     #     #todo may need to set a maxN for the number of features to use
   460                                     #
   461                                     #     with open(top_features_fname, 'r') as tf:
   462                                     #         selected_cols = [x.strip() for x in tf.readlines()]
   463                                     #     df_train = df_train[selected_cols]
   464                                     #     df_test = df_test[selected_cols]
   465                                     #     print df_train.shape
   466                                     #     print df_test.shape
   467                                     #     print df_train.columns
   468                             
   469   5526.2 MiB      0.0 MiB           feature_names = list(df_train.columns)
   470                             
   471   5526.2 MiB      0.0 MiB           postfix_train = '{}_{}of{}'.format(datetime_str, N_files_train, N_splits)
   472   5526.2 MiB      0.0 MiB           postfix_test = '{}_{}of{}'.format(datetime_str, N_files_test, N_splits)
   473                             
   474   5526.2 MiB      0.0 MiB           run_info['postfix_train'] = postfix_train
   475   5526.2 MiB      0.0 MiB           run_info['postfix_test'] = postfix_test
   476                             
   477   5526.2 MiB      0.0 MiB           run_info['testsize'] = testsize
   478                             
   479   5526.2 MiB      0.0 MiB           train_test_split_method = 1
   480                             
   481   5526.2 MiB      0.0 MiB           ub.log('Train/val split using testsize={}, split_method={}'.format(testsize, train_test_split_method))
   482   5526.2 MiB      0.0 MiB           if train_test_split_method == 1:
   483   5526.2 MiB      0.0 MiB               train_idx = shuffle_col[shuffle_col['Id'] > testsize].index
   484   5526.2 MiB      0.0 MiB               val_idx = shuffle_col[shuffle_col['Id'] <= testsize].index
   485   5526.2 MiB      0.0 MiB               ub.log('Done shuffling...')
   486   5526.2 MiB      0.0 MiB               print 'len of train_idx', len(train_idx)
   487   5526.2 MiB      0.0 MiB               print 'len of val_idx', len(val_idx)
   488   5526.2 MiB      0.0 MiB               y_train = y_total_df.loc[train_idx].values
   489   5526.2 MiB      0.0 MiB               y_val = y_total_df.loc[val_idx].values
   490                             
   491   6407.4 MiB    881.3 MiB               xgtrain = xgb.DMatrix(df_train.loc[train_idx].values, y_train, feature_names=feature_names)
   492   6407.4 MiB      0.0 MiB               ub.log('Assembled xgtrain')
   493   7448.4 MiB   1041.0 MiB               xgval = xgb.DMatrix(df_train.loc[val_idx].values, y_val, feature_names=feature_names)
   494   7448.4 MiB      0.0 MiB               ub.log('Assembled xgval')
   495   7448.4 MiB      0.0 MiB               del df_train
   496   7448.4 MiB      0.0 MiB               ub.log('Deleted df_train')
   497   5526.2 MiB  -1922.2 MiB               gc.collect()
   498                                     else:
   499                                         x_train, x_val, y_train, y_val = train_test_split(df_train.values, y_total, test_size=testsize)
   500                                         ub.log('Done shuffling...')
   501                                         print x_train.shape
   502                                         print x_val.shape
   503                                         del df_train
   504                                         gc.collect()
   505                                         ub.log('Deleted df_train')
   506                             
   507                                         xgtrain = xgb.DMatrix(x_train, y_train, feature_names=feature_names)
   508                                         ub.log('Assembled xgtrain')
   509                                         xgval = xgb.DMatrix(x_val, y_val, feature_names=feature_names)
   510                                         ub.log('Assembled xgval')
   511                                         del x_train
   512                                         del x_val
   513                                         gc.collect()
   514                             
   515   5526.2 MiB      0.0 MiB           fname_xgtrain = os.path.join(ub.processed_data_dir, 'xgtrain_{}.buffer'.format(postfix_train))
   516   5526.3 MiB      0.1 MiB           xgtrain.save_binary(fname_xgtrain)
   517   5526.3 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgtrain))
   518                             
   519   5526.3 MiB      0.0 MiB           fname_xgval = os.path.join(ub.processed_data_dir, 'xgval_{}.buffer'.format(postfix_train))
   520   5526.3 MiB      0.0 MiB           xgval.save_binary(fname_xgval)
   521   5526.3 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgval))
   522                             
   523   7448.5 MiB   1922.2 MiB           xgtest = xgb.DMatrix(df_test.values, feature_names=feature_names)
   524   7448.5 MiB      0.0 MiB           ub.log('Assembled xgtest')
   525   7448.5 MiB      0.0 MiB           fname_xgtest = os.path.join(ub.processed_data_dir, 'xgtest_{}.buffer'.format(postfix_test))
   526   7448.5 MiB      0.0 MiB           xgtest.save_binary(fname_xgtest)
   527   7448.5 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgtest))
   528                             
   529   7448.5 MiB      0.0 MiB           del df_test
   530   7448.5 MiB      0.0 MiB           gc.collect()
   531   7448.5 MiB      0.0 MiB           ub.log('Deleted df_test')
   532                             
   533   7448.5 MiB      0.0 MiB           print 'train and val set sizes'
   534   7448.5 MiB      0.0 MiB           print xgtrain.num_row(), xgtrain.num_col()
   535   7448.5 MiB      0.0 MiB           print xgval.num_row(), xgval.num_col()
   536                             
   537   7448.5 MiB      0.0 MiB           run_info['fname_xgtrain'] = fname_xgtrain
   538   7448.5 MiB      0.0 MiB           run_info['fname_xgval'] = fname_xgval
   539   7448.5 MiB      0.0 MiB           run_info['fname_xgtest'] = fname_xgtest
   540                             
   541   7448.5 MiB      0.0 MiB           fname_ytrain = os.path.join(ub.processed_data_dir, 'ytrain_{}.npy'.format(postfix_train))
   542   7448.5 MiB      0.0 MiB           fname_yval = os.path.join(ub.processed_data_dir, 'yval_{}.npy'.format(postfix_train))
   543                             
   544   7448.5 MiB      0.0 MiB           np.save(fname_ytrain, y_train)
   545   7448.5 MiB      0.0 MiB           ub.log('Saved ' + fname_ytrain)
   546                             
   547   7448.5 MiB      0.0 MiB           np.save(fname_yval, y_val)
   548   7448.5 MiB      0.0 MiB           ub.log('Saved ' + fname_yval)
   549                             
   550   7448.5 MiB      0.0 MiB           run_info['fname_ytrain'] = fname_ytrain
   551   7448.5 MiB      0.0 MiB           run_info['fname_yval'] = fname_yval
   552                             
   553   7448.5 MiB      0.0 MiB       if train_model:
   554                                     assert compile_data or (run_info_fname is not None)
   555                             
   556                                     if not compile_data:
   557                                         ub.log('(train_model) Loading run info from {} ...'.format(run_info_fname))
   558                                         with open(run_info_fname, 'r') as fp:
   559                                             run_info = eval(fp.read())
   560                                         print json.dumps(run_info, indent=2)
   561                             
   562                                         run_info_fname = run_info_fname.replace('.txt', '_{}.txt'.format(datetime_str))
   563                             
   564                                         logged_home_dir = None
   565                                         if ub.home_dir not in run_info['fname_xgtrain']:
   566                                             for i in ub.possible_home_dirs:
   567                                                 if i in run_info['fname_xgtrain']:
   568                                                     logged_home_dir = i
   569                             
   570                                             for k in ['fname_xgtrain', 'fname_xgval', 'fname_ytrain', 'fname_yval']:
   571                                                 run_info[k] = run_info[k].replace(logged_home_dir, ub.home_dir)
   572                             
   573                                             if analyze_feature_importance:
   574                                                 for k in ['feature_imp_fname_template', 'top_feature_fname']:
   575                                                     run_info[k] = run_info[k].replace(logged_home_dir, ub.home_dir)
   576                             
   577                                         ub.log('Loading xgtrain data {} ...'.format(run_info['fname_xgtrain']))
   578                                         xgtrain = xgb.DMatrix(run_info['fname_xgtrain'])
   579                             
   580                                         ub.log('Loading xgval data {} ...'.format(run_info['fname_xgval']))
   581                                         xgval = xgb.DMatrix(run_info['fname_xgval'])
   582                             
   583                                         ub.log('Loading ytrain data {} ...'.format(run_info['fname_ytrain']))
   584                                         y_train = np.load(run_info['fname_ytrain'])
   585                             
   586                                         ub.log('Loading yval data {} ...'.format(run_info['fname_yval']))
   587                                         y_val = np.load(run_info['fname_yval'])
   588                             
   589                                     prior = run_info['prior']
   590                                     postfix_train = run_info['postfix_train']
   591                             
   592                                     run_info['cv'] = cv
   593                                     run_info['analyze_feature_importance'] = analyze_feature_importance
   594                                     run_info['early_stop_rounds'] = early_stop_rounds
   595                             
   596                                     if xgb_params is None:
   597                                         xgb_params = get_params(bases_core=prior)
   598                             
   599                                     xgb_params['base_score'] = prior  # n_positive / n_total
   600                                     # xgb_params['scale_pos_weight'] = (1.0 - prior) / prior
   601                                     run_info['xgb_params'] = xgb_params
   602                                     ub.log('Get xgb_params')
   603                                     print xgb_params
   604                             
   605                                     xgb_num_rounds = N_rounds
   606                                     run_info['xgb_num_rounds'] = xgb_num_rounds
   607                                     print 'xgb_num_rounds', xgb_num_rounds
   608                                     if cv:
   609                                         ub.log('Running cross validation...')
   610                                         eval_hist = xgb.cv(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   611                                                            early_stopping_rounds=early_stop_rounds,
   612                                                            feval=ub.mcc_eval, maximize=True,
   613                                                            verbose_eval=1, show_stdv=True, nfold=3, seed=0, stratified=True)
   614                                         print eval_hist
   615                                         eval_hist_fname = os.path.join(ub.output_dir, 'cv_eval_history_{}.csv'.format(postfix_train))
   616                                         if not compile_data:
   617                                             eval_hist_fname = eval_hist_fname.replace('.csv', '_{}.csv'.format(datetime_str))
   618                             
   619                                         run_info['eval_hist_fname'] = eval_hist_fname
   620                                         eval_hist.to_csv(eval_hist_fname)
   621                             
   622                                         run_info['cv_score_test'] = eval_hist['test-MCC-mean'].max()
   623                                         run_info['cv_score_train'] = eval_hist['train-MCC-mean'].max()
   624                             
   625                                     if 1:
   626                                         ub.log('Running training...')
   627                                         watchlist = [(xgtrain, 'train'), (xgval, 'eval')]
   628                                         model = xgb.train(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   629                                                           early_stopping_rounds=early_stop_rounds,
   630                                                           feval=ub.mcc_eval, maximize=True,
   631                                                           evals=watchlist, verbose_eval=True)
   632                             
   633                                         model_fname = os.path.join(ub.output_dir, 'xbg_{}.model'.format(postfix_train))
   634                                         if not compile_data:
   635                                             model_fname = model_fname.replace('.model', '_{}.model'.format(datetime_str))
   636                                         ub.log('Saving model: {}...'.format(model_fname))
   637                                         model.save_model(model_fname)
   638                                         model.dump_model(model_fname + '.raw.txt')
   639                                         run_info['model_fname'] = model_fname
   640                             
   641                                         ntree_limit = model.best_iteration + 1
   642                             
   643                                         ub.log('Predictions on xgtrain...', 'highlight')
   644                                         predictions = model.predict(xgtrain, ntree_limit=ntree_limit)
   645                             
   646                                         best_proba, best_mcc, y_pred = ub.eval_mcc(y_train, predictions, True)
   647                                         mcc_official = matthews_corrcoef(y_train, y_pred)
   648                                         print 'ntree limit:', ntree_limit
   649                                         print 'best_mcc:', best_mcc
   650                                         print 'best_proba:', best_proba
   651                                         print 'matthews_corroef', mcc_official
   652                             
   653                                         run_info['ntree_limit_train'] = ntree_limit
   654                                         run_info['best_mcc_train'] = best_mcc
   655                                         run_info['best_proba_train'] = best_proba
   656                                         run_info['mcc_official_train'] = mcc_official
   657                             
   658                                         ub.log('Predictions on xgval...', 'highlight')
   659                                         predictions = model.predict(xgval, ntree_limit=ntree_limit)
   660                             
   661                                         best_proba, best_mcc, y_pred = ub.eval_mcc(y_val, predictions, True)
   662                                         mcc_official = matthews_corrcoef(y_val, y_pred)
   663                                         print 'ntree limit:', ntree_limit
   664                                         print 'best_mcc:', best_mcc
   665                                         print 'best_proba:', best_proba
   666                                         print 'matthews_corroef', mcc_official
   667                             
   668                                         run_info['ntree_limit_val'] = ntree_limit
   669                                         run_info['best_mcc_val'] = best_mcc
   670                                         run_info['best_proba_val'] = best_proba
   671                                         run_info['mcc_official_val'] = mcc_official
   672                             
   673                                         if analyze_feature_importance:
   674                                             ub.log('Analyzing feature importance...')
   675                                             feature_imp_fname_template = run_info['feature_imp_fname_template']
   676                                             top_features_fname = run_info['top_features_fname']
   677                                             feature_imp_fname = feature_imp_fname_template.format(postfix_train)
   678                                             imp = model.get_fscore()
   679                                             imp = sorted(imp.items(), key=operator.itemgetter(1))
   680                                             imp_df = pd.DataFrame(imp, columns=['feature', 'fscore'])
   681                                             imp_df['fscore'] = imp_df['fscore'] / imp_df['fscore'].sum()
   682                             
   683                                             ub.log('Output result csv to {}...'.format(feature_imp_fname + '.csv'))
   684                                             imp_df.to_csv(feature_imp_fname + '.csv')
   685                             
   686                                             plt.figure()
   687                                             imp_df.plot(kind='barh', x='feature', y='fscore', legend=False, figsize=(6, 10))
   688                                             plt.title('XGBoost Feature Importance @ {}'.format(postfix_train))
   689                                             plt.xlabel('relative importance')
   690                                             plt.gcf().savefig(feature_imp_fname + '.png', bbox_inches='tight')
   691                             
   692                                             feature_lists = glob.glob(feature_imp_fname_template.replace('{}', '*.csv'))
   693                                             ub.log('Aggregating previous analysis results...')
   694                                             print feature_lists
   695                                             features_df = None
   696                                             if feature_lists:
   697                                                 for f_l in feature_lists:
   698                                                     tmp_df = pd.read_csv(f_l, index_col=0)
   699                                                     if features_df is None:
   700                                                         features_df = tmp_df
   701                                                     else:
   702                                                         features_df = pd.concat([features_df, tmp_df], ignore_index=True)
   703                             
   704                                             f_df = features_df.groupby(['feature']).mean().reset_index()
   705                                             f_df['overall'] = True
   706                                             imp_df['overall'] = False
   707                                             merged_df = pd.concat([imp_df, f_df]).sort_values(by=['overall', 'fscore'], ascending=False)
   708                                             sns_plot = sns.factorplot(y='feature', x='fscore', data=merged_df, hue='overall', kind='bar',
   709                                                                       hue_order=[True, False], size=20, aspect=0.5)
   710                                             sns_plot.savefig(feature_imp_fname + '_overall.png', bbox_inches='tight')
   711                             
   712                                             ub.log('Output overall result csv to {}...'.format(top_features_fname))
   713                                             with open(top_features_fname, 'w') as tf:
   714                                                 tf.write('\n'.join(list(set(merged_df.feature.values))))
   715                             
   716                                             merged_df.to_csv(top_features_fname.replace('.txt', '_df.csv'), index=False)
   717                             
   718                             
   719                                             # json has trouble serializing np.float32
   720                                             # with open(run_info_fname, 'w') as fp:
   721                                             #    json.dump(run_info, fp)
   722                             
   723   7448.5 MiB      0.0 MiB       if make_submission:
   724                                     assert (run_info_fname is not None)
   725                             
   726                                     if not train_model and not compile_data:
   727                                         ub.log('(make_submission) Loading run info from {} ...'.format(run_info_fname))
   728                                         with open(run_info_fname, 'r') as fp:
   729                                             run_info = eval(fp.read())
   730                                         print json.dumps(run_info, indent=2)
   731                             
   732                                     if ub.home_dir not in run_info['model_fname']:
   733                                         for i in ub.possible_home_dirs:
   734                                             if i in run_info['model_fname']:
   735                                                 logged_home_dir = i
   736                             
   737                                     for k in ['fname_xgtest', 'model_fname']:
   738                                         if ub.home_dir not in run_info[k]:
   739                                             for i in ub.possible_home_dirs:
   740                                                 if i in run_info[k]:
   741                                                     run_info[k] = run_info[k].replace(i, ub.home_dir)
   742                             
   743                                     if not train_model:
   744                                         model = xgb.Booster()
   745                                         ub.log('Loading model {} ...'.format(run_info['model_fname']))
   746                                         model.load_model(run_info['model_fname'])
   747                             
   748                                     if not compile_data:
   749                                         ub.log('Loading xgtest data {} ...'.format(run_info['fname_xgtest']))
   750                                         xgtest = xgb.DMatrix(run_info['fname_xgtest'])
   751                             
   752                                     ub.log('XGB making predictions...')
   753                             
   754                                     postfix_train = run_info['postfix_train']
   755                             
   756                                     ypred = model.predict(xgtest, ntree_limit=run_info['ntree_limit_train'])
   757                                     nrows = len(ypred)
   758                             
   759                                     sample = pd.read_csv(os.path.join(ub.data_dir, 'sample_submission.csv'), nrows=nrows)
   760                                     sample['Response'] = ypred
   761                                     fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}_prob.csv".format(postfix_train))
   762                                     if not compile_data:
   763                                         fname_output = fname_output.replace('.csv', '_{}.csv'.format(datetime_str))
   764                                     ub.log('Writing output file (raw proba) {} ...'.format(fname_output))
   765                                     sample.to_csv(fname_output, index=False)
   766                             
   767                                     best_proba = (run_info['best_proba_train'] + run_info['best_proba_val']) / 2.0
   768                                     ub.log('Using threshold: best_proba == {}'.format(best_proba))
   769                                     sample['Response'] = (ypred > best_proba).astype(int)
   770                                     fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}.csv".format(postfix_train))
   771                                     if not compile_data:
   772                                         fname_output = fname_output.replace('.csv', '_{}.csv'.format(datetime_str))
   773                                     ub.log('Writing output file {} ...'.format(fname_output))
   774                                     sample.to_csv(fname_output, index=False)
   775                             
   776   7448.5 MiB      0.0 MiB       if compile_data or train_model:
   777   7448.5 MiB      0.0 MiB           if compile_data:
   778   7448.5 MiB      0.0 MiB               if run_info_fname is not None:
   779                                             ub.log('Ignore input run_info_fname {}'.format(run_info_fname))
   780   7448.5 MiB      0.0 MiB               run_info_fname = os.path.join(ub.output_dir, 'run_info_{}.txt'.format(postfix_train))
   781                                     # else run_info_fname is an input parameter
   782   7448.5 MiB      0.0 MiB           ub.log('Saving run_info into {}'.format(run_info_fname))
   783   7448.5 MiB      0.0 MiB           print pd.Series(run_info)
   784   7448.5 MiB      0.0 MiB           with open(run_info_fname, 'w') as fp:
   785   7448.5 MiB      0.0 MiB               fp.write(str(run_info))
   786                             
   787   7448.5 MiB      0.0 MiB       return run_info_fname


