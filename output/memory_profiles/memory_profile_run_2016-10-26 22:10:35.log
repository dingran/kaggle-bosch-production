Filename: main_bosch.py

Line #    Mem usage    Increment   Line Contents
================================================
   289    161.2 MiB      0.0 MiB   @profile(stream=f_mem)
   290                             def main(run_info_fname=None,
   291                                      compile_data=False,
   292                                      train_model=False,
   293                                      make_submission=False,
   294                                      N_start=None,
   295                                      N_files_train=1,
   296                                      N_files_test=1,
   297                                      feature_down_select=False,
   298                                      N_features=700,
   299                                      analyze_feature_importance=False,
   300                                      cv=False,
   301                                      # if True running cross validation if False, run single model training session and importance analysis
   302                                      early_stop_rounds=50,
   303                                      N_rounds=1000,
   304                                      testsize=0.1,
   305                                      xgb_params=None
   306                                      ):
   307    161.2 MiB      0.0 MiB       datetime_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
   308                             
   309    161.2 MiB      0.0 MiB       if compile_data:
   310                                     run_info = dict()
   311                                     N_splits = ub.N_split
   312                                     if N_files_train > N_splits:
   313                                         N_files_train = N_splits
   314                                     if N_files_test > N_splits:
   315                                         N_files_test = N_splits
   316                             
   317                                     if analyze_feature_importance and feature_down_select:
   318                                         assert 0
   319                             
   320                                     run_info['N_splits'] = N_splits
   321                                     run_info['N_files_train'] = N_files_train
   322                                     run_info['N_files_test'] = N_files_test
   323                                     run_info['feature_down_select'] = feature_down_select
   324                                     run_info['N_features'] = N_features
   325                                     run_info['cv'] = cv
   326                                     run_info['analyze_feature_importance'] = analyze_feature_importance
   327                                     run_info['early_stop_rounds'] = early_stop_rounds
   328                             
   329                                     df_train, n_start = load_data(load_test=False, N_start=N_start, N_read=N_files_train, N_split=N_splits,
   330                                                                   shuffle=False,
   331                                                                   feature_down_select=feature_down_select, N_features=N_features)
   332                                     df_test, _ = load_data(load_test=True, N_start=n_start, N_read=N_files_test, N_split=N_splits, shuffle=False,
   333                                                            feature_down_select=feature_down_select, N_features=N_features)
   334                             
   335                                     ub.log('generating id diff columns based on various dates columns')
   336                                     dates_cols = [x for x in list(df_train.columns) if 'start_date' in x or 'end_date' in x]
   337                             
   338                                     # print dates_cols
   339                             
   340                                     df_datesort = pd.concat([df_train[['Id'] + dates_cols], df_test[['Id'] + dates_cols]],
   341                                                             ignore_index=True)
   342                                     gc.collect()
   343                             
   344                                     for c in dates_cols:
   345                                         df_datesort.sort_values(by=[c, 'Id'], inplace=True)
   346                                         df_datesort[c + '_id_diff'] = df_datesort['Id'].diff().fillna(999999).astype(int)
   347                                         df_datesort[c + '_id_diff_reverse'] = df_datesort['Id'].iloc[::-1].diff().fillna(999999).astype(int)
   348                             
   349                                         df_datesort.drop([c], axis=1, inplace=True)
   350                             
   351                                     df_datesort.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_datesort_debug.csv'))
   352                             
   353                                     gc.collect()
   354                                     df_train = df_train.merge(df_datesort, on='Id')
   355                                     df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_debug.csv'))
   356                             
   357                                     gc.collect()
   358                                     df_test = df_test.merge(df_datesort, on='Id')
   359                                     df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_test_debug.csv'))
   360                             
   361                                     df_test['Response'] = 0
   362                             
   363                                     print df_train.shape
   364                                     print df_test.shape
   365                                     gc.collect()
   366                             
   367                                     # if N_files_train == N_splits:
   368                                     #     split_data(df_train,
   369                                     #                output_fname_template=os.path.join(ub.processed_data_dir, 'df_train_preprocessed_part{}.csv'))
   370                                     # if N_files_test == N_splits:
   371                                     #     split_data(df_test,
   372                                     #                output_fname_template=os.path.join(ub.processed_data_dir, 'df_test_preprocessed_part{}.csv'))
   373                             
   374                                     fillna = True
   375                                     run_info['fillna'] = fillna
   376                                     if fillna:
   377                                         ub.log('Filling na...')
   378                                         for df in [df_train, df_test]:
   379                                             cols_full_flag = df.isnull().any()
   380                                             non_full_cols = list(cols_full_flag[cols_full_flag].index)
   381                                             print 'Non-full columns: {}'.format(len(non_full_cols))
   382                                             # print non_full_cols
   383                             
   384                                             if 1:
   385                                                 df.fillna(-999999, inplace=True)
   386                                             else:
   387                                                 # print df.PersonalField7.unique()
   388                                                 for c in non_full_cols:
   389                                                     if len(df[c].unique()) > 2:
   390                                                         most_frequent_items = df[c].value_counts().idxmax()
   391                                                         print c, most_frequent_items
   392                                                         df[c].fillna(value=most_frequent_items, inplace=True)
   393                                                     else:  # if it is only a pair of value [somthing, nan] then fill in "missing"
   394                                                         df[c].fillna(value='missing', inplace=True)
   395                                                         print c, df[c].unique()
   396                             
   397                                             cols_full_flag = df.isnull().any()
   398                                             non_full_cols = list(cols_full_flag[cols_full_flag].index)
   399                                             print 'Non-full columns: {}'.format(len(non_full_cols))
   400                             
   401                                             le = LabelEncoder()
   402                                             obj_cols = df.select_dtypes(include=['object']).columns
   403                                             # print 'Obj columns: ', list(obj_cols)
   404                                             for col in obj_cols:
   405                                                 df[col] = le.fit_transform(df[col])
   406                             
   407                                         df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   408                                         df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   409                             
   410                                     ub.log('Dropping Id and Response columns...')
   411                                     columns_to_drop = ['Id', 'Response']
   412                                     shuffle_col = df_train[['Id']].copy()
   413                                     shuffle_col['Id'] = np.random.randn(len(shuffle_col))
   414                             
   415                                     y_total_df = df_train['Response']
   416                                     y_total = df_train['Response'].values
   417                                     df_train.drop(columns_to_drop, axis=1, inplace=True)
   418                                     df_test.drop(columns_to_drop, axis=1, inplace=True)
   419                             
   420                                     print df_train.shape
   421                                     print df_test.shape
   422                                     prior = np.sum(y_total) / (1. * len(y_total))
   423                                     print 'prior: {}'.format(prior)
   424                                     run_info['prior'] = prior
   425                                     gc.collect()
   426                             
   427                                     feature_imp_fname_template = os.path.join(ub.output_dir, 'feature_importance_xgb_{}')
   428                                     run_info['feature_imp_fname_template'] = feature_imp_fname_template
   429                                     top_features_fname = feature_imp_fname_template.format('accumu_list.txt')
   430                                     run_info['top_features_fname'] = top_features_fname
   431                             
   432                                     # if feature_down_select:
   433                                     #     ub.log('Feature down selected based on {}...'.format(top_features_fname))
   434                                     #     #todo may need to set a maxN for the number of features to use
   435                                     #
   436                                     #     with open(top_features_fname, 'r') as tf:
   437                                     #         selected_cols = [x.strip() for x in tf.readlines()]
   438                                     #     df_train = df_train[selected_cols]
   439                                     #     df_test = df_test[selected_cols]
   440                                     #     print df_train.shape
   441                                     #     print df_test.shape
   442                                     #     print df_train.columns
   443                             
   444                                     feature_names = list(df_train.columns)
   445                             
   446                                     postfix_train = '{}_{}of{}'.format(datetime_str, N_files_train, N_splits)
   447                                     postfix_test = '{}_{}of{}'.format(datetime_str, N_files_test, N_splits)
   448                             
   449                                     run_info['postfix_train'] = postfix_train
   450                                     run_info['postfix_test'] = postfix_test
   451                             
   452                                     run_info['testsize'] = testsize
   453                             
   454                                     train_test_split_method = 1
   455                             
   456                                     ub.log('Train/val split using testsize={}, split_method={}'.format(testsize, train_test_split_method))
   457                                     if train_test_split_method == 1:
   458                                         train_idx = shuffle_col[shuffle_col['Id'] > testsize].index
   459                                         val_idx = shuffle_col[shuffle_col['Id'] <= testsize].index
   460                                         ub.log('Done shuffling...')
   461                                         print 'len of train_idx', len(train_idx)
   462                                         print 'len of val_idx', len(val_idx)
   463                                         y_train = y_total_df.loc[train_idx].values
   464                                         y_val = y_total_df.loc[val_idx].values
   465                             
   466                                         xgtrain = xgb.DMatrix(df_train.loc[train_idx].values, y_train, feature_names=feature_names)
   467                                         ub.log('Assembled xgtrain')
   468                                         xgval = xgb.DMatrix(df_train.loc[val_idx].values, y_val, feature_names=feature_names)
   469                                         ub.log('Assembled xgval')
   470                                         del df_train
   471                                         ub.log('Deleted df_train')
   472                                         gc.collect()
   473                                     else:
   474                                         x_train, x_val, y_train, y_val = train_test_split(df_train.values, y_total, test_size=testsize)
   475                                         ub.log('Done shuffling...')
   476                                         print x_train.shape
   477                                         print x_val.shape
   478                                         del df_train
   479                                         gc.collect()
   480                                         ub.log('Deleted df_train')
   481                             
   482                                         xgtrain = xgb.DMatrix(x_train, y_train, feature_names=feature_names)
   483                                         ub.log('Assembled xgtrain')
   484                                         xgval = xgb.DMatrix(x_val, y_val, feature_names=feature_names)
   485                                         ub.log('Assembled xgval')
   486                                         del x_train
   487                                         del x_val
   488                                         gc.collect()
   489                             
   490                                     fname_xgtrain = os.path.join(ub.processed_data_dir, 'xgtrain_{}.buffer'.format(postfix_train))
   491                                     xgtrain.save_binary(fname_xgtrain)
   492                                     ub.log('Saved {}'.format(fname_xgtrain))
   493                             
   494                                     fname_xgval = os.path.join(ub.processed_data_dir, 'xgval_{}.buffer'.format(postfix_train))
   495                                     xgval.save_binary(fname_xgval)
   496                                     ub.log('Saved {}'.format(fname_xgval))
   497                             
   498                                     xgtest = xgb.DMatrix(df_test.values, feature_names=feature_names)
   499                                     ub.log('Assembled xgtest')
   500                                     fname_xgtest = os.path.join(ub.processed_data_dir, 'xgtest_{}.buffer'.format(postfix_test))
   501                                     xgtest.save_binary(fname_xgtest)
   502                                     ub.log('Saved {}'.format(fname_xgtest))
   503                             
   504                                     del df_test
   505                                     gc.collect()
   506                                     ub.log('Deleted df_test')
   507                             
   508                                     print 'train and val set sizes'
   509                                     print xgtrain.num_row(), xgtrain.num_col()
   510                                     print xgval.num_row(), xgval.num_col()
   511                             
   512                                     run_info['fname_xgtrain'] = fname_xgtrain
   513                                     run_info['fname_xgval'] = fname_xgval
   514                                     run_info['fname_xgtest'] = fname_xgtest
   515                             
   516                                     fname_ytrain = os.path.join(ub.processed_data_dir, 'ytrain_{}.npy'.format(postfix_train))
   517                                     fname_yval = os.path.join(ub.processed_data_dir, 'yval_{}.npy'.format(postfix_train))
   518                             
   519                                     np.save(fname_ytrain, y_train)
   520                                     ub.log('Saved ' + fname_ytrain)
   521                             
   522                                     np.save(fname_yval, y_val)
   523                                     ub.log('Saved ' + fname_yval)
   524                             
   525                                     run_info['fname_ytrain'] = fname_ytrain
   526                                     run_info['fname_yval'] = fname_yval
   527                             
   528    161.2 MiB      0.0 MiB       if train_model:
   529    161.2 MiB      0.0 MiB           assert compile_data or (run_info_fname is not None)
   530                             
   531    161.2 MiB      0.0 MiB           if not compile_data:
   532    161.2 MiB      0.0 MiB               ub.log('(train_model) Loading run info from {} ...'.format(run_info_fname))
   533    161.2 MiB      0.0 MiB               with open(run_info_fname, 'r') as fp:
   534    161.2 MiB      0.0 MiB                   run_info = eval(fp.read())
   535    161.2 MiB      0.0 MiB               print json.dumps(run_info, indent=2)
   536                             
   537    161.2 MiB      0.0 MiB               run_info_fname = run_info_fname.replace('.txt', '_{}.txt'.format(datetime_str))
   538                             
   539    161.2 MiB      0.0 MiB               logged_home_dir = None
   540    161.2 MiB      0.0 MiB               if ub.home_dir not in run_info['fname_xgtrain']:
   541    161.2 MiB      0.0 MiB                   for i in ub.possible_home_dirs:
   542    161.2 MiB      0.0 MiB                       if i in run_info['fname_xgtrain']:
   543    161.2 MiB      0.0 MiB                           logged_home_dir = i
   544                             
   545    161.2 MiB      0.0 MiB                   for k in ['fname_xgtrain', 'fname_xgval', 'fname_ytrain', 'fname_yval']:
   546    161.2 MiB      0.0 MiB                       run_info[k] = run_info[k].replace(logged_home_dir, ub.home_dir)
   547                             
   548    161.2 MiB      0.0 MiB                   if analyze_feature_importance:
   549                                                 for k in ['feature_imp_fname_template', 'top_feature_fname']:
   550                                                     run_info[k] = run_info[k].replace(logged_home_dir, ub.home_dir)
   551                             
   552    161.2 MiB      0.0 MiB               ub.log('Loading xgtrain data {} ...'.format(run_info['fname_xgtrain']))
   553   3170.1 MiB   3008.9 MiB               xgtrain = xgb.DMatrix(run_info['fname_xgtrain'])
   554                             
   555   3170.1 MiB      0.0 MiB               ub.log('Loading xgval data {} ...'.format(run_info['fname_xgval']))
   556   6705.6 MiB   3535.5 MiB               xgval = xgb.DMatrix(run_info['fname_xgval'])
   557                             
   558   6705.6 MiB      0.0 MiB               ub.log('Loading ytrain data {} ...'.format(run_info['fname_ytrain']))
   559   6709.6 MiB      4.0 MiB               y_train = np.load(run_info['fname_ytrain'])
   560                             
   561   6709.6 MiB      0.0 MiB               ub.log('Loading yval data {} ...'.format(run_info['fname_yval']))
   562   6714.7 MiB      5.1 MiB               y_val = np.load(run_info['fname_yval'])
   563                             
   564   6714.7 MiB      0.0 MiB           prior = run_info['prior']
   565   6714.7 MiB      0.0 MiB           postfix_train = run_info['postfix_train']
   566                             
   567   6714.7 MiB      0.0 MiB           if xgb_params is None:
   568                                         xgb_params = get_params(basescore=prior)
   569                                     else:
   570   6714.7 MiB      0.0 MiB               xgb_params['basescore'] = prior
   571   6714.7 MiB      0.0 MiB           run_info['xgb_params'] = xgb_params
   572   6714.7 MiB      0.0 MiB           ub.log('Get xgb_params')
   573   6714.7 MiB      0.0 MiB           print xgb_params
   574                             
   575   6714.7 MiB      0.0 MiB           xgb_num_rounds = N_rounds
   576   6714.7 MiB      0.0 MiB           run_info['xgb_num_rounds'] = xgb_num_rounds
   577   6714.7 MiB      0.0 MiB           print 'xgb_num_rounds', xgb_num_rounds
   578   6714.7 MiB      0.0 MiB           if cv:
   579                                         ub.log('Running cross validation...')
   580                                         eval_hist = xgb.cv(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   581                                                            early_stopping_rounds=early_stop_rounds,
   582                                                            feval=ub.mcc_eval, maximize=True,
   583                                                            verbose_eval=1, show_stdv=True, nfold=3, seed=0, stratified=True)
   584                                         print eval_hist
   585                                         run_info['eval_hist'] = eval_hist
   586                             
   587                                     else:
   588   6714.7 MiB      0.0 MiB               ub.log('Running training...')
   589   6714.7 MiB      0.0 MiB               watchlist = [(xgtrain, 'train'), (xgval, 'eval')]
   590   6714.7 MiB      0.0 MiB               model = xgb.train(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   591   6714.7 MiB      0.0 MiB                                 early_stopping_rounds=early_stop_rounds,
   592   6714.7 MiB      0.0 MiB                                 feval=ub.mcc_eval, maximize=True,
   593   9744.4 MiB   3029.7 MiB                                 evals=watchlist, verbose_eval=True)
   594                             
   595   9744.4 MiB      0.0 MiB               model_fname = os.path.join(ub.output_dir, 'xbg_{}.model'.format(postfix_train))
   596   9744.4 MiB      0.0 MiB               if not compile_data:
   597   9744.4 MiB      0.0 MiB                   model_fname=model_fname.replace('.model', '_{}.model'.format(datetime_str))
   598   9744.4 MiB      0.0 MiB               ub.log('Saving model: {}...'.format(model_fname))
   599   9744.4 MiB      0.0 MiB               model.save_model(model_fname)
   600   9744.4 MiB      0.0 MiB               model.dump_model(model_fname + '.raw.txt')
   601   9744.4 MiB      0.0 MiB               run_info['model_fname'] = model_fname
   602                             
   603   9744.4 MiB      0.0 MiB               ntree_limit = model.best_iteration + 1
   604                             
   605   9744.4 MiB      0.0 MiB               ub.log('Predictions on xgtrain...', 'highlight')
   606   9744.4 MiB      0.0 MiB               predictions = model.predict(xgtrain, ntree_limit=ntree_limit)
   607                             
   608   9756.3 MiB     11.9 MiB               best_proba, best_mcc, y_pred = ub.eval_mcc(y_train, predictions, True)
   609   9764.8 MiB      8.6 MiB               mcc_official = matthews_corrcoef(y_train, y_pred)
   610   9764.8 MiB      0.0 MiB               print 'ntree limit:', ntree_limit
   611   9764.8 MiB      0.0 MiB               print 'best_mcc:', best_mcc
   612   9764.8 MiB      0.0 MiB               print 'best_proba:', best_proba
   613   9764.8 MiB      0.0 MiB               print 'matthews_corroef', mcc_official
   614                             
   615   9764.8 MiB      0.0 MiB               run_info['ntree_limit_train'] = ntree_limit
   616   9764.8 MiB      0.0 MiB               run_info['best_mcc_train'] = best_mcc
   617   9764.8 MiB      0.0 MiB               run_info['best_proba_train'] = best_proba
   618   9764.8 MiB      0.0 MiB               run_info['mcc_official_train'] = mcc_official
   619                             
   620   9764.8 MiB      0.0 MiB               ub.log('Predictions on xgval...', 'highlight')
   621   9764.8 MiB      0.0 MiB               predictions = model.predict(xgval, ntree_limit=ntree_limit)
   622                             
   623   9766.1 MiB      1.3 MiB               best_proba, best_mcc, y_pred = ub.eval_mcc(y_val, predictions, True)
   624   9771.0 MiB      4.8 MiB               mcc_official = matthews_corrcoef(y_val, y_pred)
   625   9771.0 MiB      0.0 MiB               print 'ntree limit:', ntree_limit
   626   9771.0 MiB      0.0 MiB               print 'best_mcc:', best_mcc
   627   9771.0 MiB      0.0 MiB               print 'best_proba:', best_proba
   628   9771.0 MiB      0.0 MiB               print 'matthews_corroef', mcc_official
   629                             
   630   9771.0 MiB      0.0 MiB               run_info['ntree_limit_val'] = ntree_limit
   631   9771.0 MiB      0.0 MiB               run_info['best_mcc_val'] = best_mcc
   632   9771.0 MiB      0.0 MiB               run_info['best_proba_val'] = best_proba
   633   9771.0 MiB      0.0 MiB               run_info['mcc_official_val'] = mcc_official
   634                             
   635   9771.0 MiB      0.0 MiB               if analyze_feature_importance:
   636                                             ub.log('Analyzing feature importance...')
   637                                             feature_imp_fname_template = run_info['feature_imp_fname_template']
   638                                             top_features_fname = run_info['top_features_fname']
   639                                             feature_imp_fname = feature_imp_fname_template.format(postfix_train)
   640                                             imp = model.get_fscore()
   641                                             imp = sorted(imp.items(), key=operator.itemgetter(1))
   642                                             imp_df = pd.DataFrame(imp, columns=['feature', 'fscore'])
   643                                             imp_df['fscore'] = imp_df['fscore'] / imp_df['fscore'].sum()
   644                             
   645                                             ub.log('Output result csv to {}...'.format(feature_imp_fname + '.csv'))
   646                                             imp_df.to_csv(feature_imp_fname + '.csv')
   647                             
   648                                             plt.figure()
   649                                             imp_df.plot(kind='barh', x='feature', y='fscore', legend=False, figsize=(6, 10))
   650                                             plt.title('XGBoost Feature Importance @ {}'.format(postfix_train))
   651                                             plt.xlabel('relative importance')
   652                                             plt.gcf().savefig(feature_imp_fname + '.png', bbox_inches='tight')
   653                             
   654                                             feature_lists = glob.glob(feature_imp_fname_template.replace('{}', '*.csv'))
   655                                             ub.log('Aggregating previous analysis results...')
   656                                             print feature_lists
   657                                             features_df = None
   658                                             if feature_lists:
   659                                                 for f_l in feature_lists:
   660                                                     tmp_df = pd.read_csv(f_l, index_col=0)
   661                                                     if features_df is None:
   662                                                         features_df = tmp_df
   663                                                     else:
   664                                                         features_df = pd.concat([features_df, tmp_df], ignore_index=True)
   665                             
   666                                             f_df = features_df.groupby(['feature']).mean().reset_index()
   667                                             f_df['overall'] = True
   668                                             imp_df['overall'] = False
   669                                             merged_df = pd.concat([imp_df, f_df]).sort_values(by=['overall', 'fscore'], ascending=False)
   670                                             sns_plot = sns.factorplot(y='feature', x='fscore', data=merged_df, hue='overall', kind='bar',
   671                                                                       hue_order=[True, False], size=20, aspect=0.5)
   672                                             sns_plot.savefig(feature_imp_fname + '_overall.png', bbox_inches='tight')
   673                             
   674                                             ub.log('Output overall result csv to {}...'.format(top_features_fname))
   675                                             with open(top_features_fname, 'w') as tf:
   676                                                 tf.write('\n'.join(list(set(merged_df.feature.values))))
   677                             
   678                                             merged_df.to_csv(top_features_fname.replace('.txt', '_df.csv'), index=False)
   679                             
   680                             
   681                                             # json has trouble serializing np.float32
   682                                             # with open(run_info_fname, 'w') as fp:
   683                                             #    json.dump(run_info, fp)
   684                             
   685   9771.0 MiB      0.0 MiB       if make_submission:
   686   9771.0 MiB      0.0 MiB           assert (run_info_fname is not None)
   687                             
   688   9771.0 MiB      0.0 MiB           if not train_model and not compile_data:
   689                                         ub.log('(make_submission) Loading run info from {} ...'.format(run_info_fname))
   690                                         with open(run_info_fname, 'r') as fp:
   691                                             run_info = eval(fp.read())
   692                                         print json.dumps(run_info, indent=2)
   693                             
   694   9771.0 MiB      0.0 MiB           if ub.home_dir not in run_info['model_fname']:
   695                                         for i in ub.possible_home_dirs:
   696                                             if i in run_info['model_fname']:
   697                                                 logged_home_dir = i
   698                             
   699   9771.0 MiB      0.0 MiB           for k in ['fname_xgtest', 'model_fname']:
   700   9771.0 MiB      0.0 MiB               if ub.home_dir not in run_info[k]:
   701   9771.0 MiB      0.0 MiB                   for i in ub.possible_home_dirs:
   702   9771.0 MiB      0.0 MiB                       if i in run_info[k]:
   703   9771.0 MiB      0.0 MiB                           run_info[k] = run_info[k].replace(i, ub.home_dir)
   704                             
   705   9771.0 MiB      0.0 MiB           if not train_model:
   706                                         model = xgb.Booster()
   707                                         ub.log('Loading model {} ...'.format(run_info['model_fname']))
   708                                         model.load_model(run_info['model_fname'])
   709                             
   710   9771.0 MiB      0.0 MiB           if not compile_data:
   711   9771.0 MiB      0.0 MiB               ub.log('Loading xgtest data {} ...'.format(run_info['fname_xgtest']))
   712  16308.1 MiB   6537.2 MiB               xgtest = xgb.DMatrix(run_info['fname_xgtest'])
   713                             
   714  16308.1 MiB      0.0 MiB           ub.log('XGB making predictions...')
   715                             
   716  16308.1 MiB      0.0 MiB           postfix_train = run_info['postfix_train']
   717                             
   718  16308.1 MiB      0.0 MiB           ypred = model.predict(xgtest, ntree_limit=run_info['ntree_limit_train'])
   719  16308.1 MiB      0.0 MiB           nrows = len(ypred)
   720                             
   721  16332.7 MiB     24.6 MiB           sample = pd.read_csv(os.path.join(ub.data_dir, 'sample_submission.csv'), nrows=nrows)
   722  16314.9 MiB    -17.8 MiB           sample['Response'] = ypred
   723  16314.9 MiB      0.0 MiB           fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}_prob.csv".format(postfix_train))
   724  16314.9 MiB      0.0 MiB           if not compile_data:
   725  16314.9 MiB      0.0 MiB               fname_output = fname_output.replace('.csv', '_{}.csv'.format(datetime_str))
   726  16314.9 MiB      0.0 MiB           ub.log('Writing output file (raw proba) {} ...'.format(fname_output))
   727  16317.9 MiB      3.0 MiB           sample.to_csv(fname_output, index=False)
   728                             
   729  16317.9 MiB      0.0 MiB           best_proba = (run_info['best_proba_train'] + run_info['best_proba_val'])/2.0
   730  16317.9 MiB      0.0 MiB           ub.log('Using threshold: best_proba == {}'.format(best_proba))
   731  16332.6 MiB     14.7 MiB           sample['Response'] = (ypred > best_proba).astype(int)
   732  16332.6 MiB      0.0 MiB           fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}.csv".format(postfix_train))
   733  16332.6 MiB      0.0 MiB           if not compile_data:
   734  16332.6 MiB      0.0 MiB               fname_output = fname_output.replace('.csv', '_{}.csv'.format(datetime_str))
   735  16332.6 MiB      0.0 MiB           ub.log('Writing output file {} ...'.format(fname_output))
   736  16332.6 MiB      0.0 MiB           sample.to_csv(fname_output, index=False)
   737                             
   738  16332.6 MiB      0.0 MiB       if compile_data or train_model:
   739  16332.6 MiB      0.0 MiB           if compile_data:
   740                                         if run_info_fname is not None:
   741                                             ub.log('Ignore input run_info_fname {}'.format(run_info_fname))
   742                                         run_info_fname = os.path.join(ub.output_dir, 'run_info_{}.txt'.format(postfix_train))
   743                                     # else run_info_fname is an input parameter
   744  16332.6 MiB      0.0 MiB           ub.log('Saving run_info into {}'.format(run_info_fname))
   745  16332.6 MiB      0.0 MiB           print pd.Series(run_info)
   746  16332.6 MiB      0.0 MiB           with open(run_info_fname, 'w') as fp:
   747  16332.6 MiB      0.0 MiB               fp.write(str(run_info))
   748                             
   749  16332.6 MiB      0.0 MiB       return run_info_fname


