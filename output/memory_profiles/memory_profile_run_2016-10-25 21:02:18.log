Filename: explore2.py

Line #    Mem usage    Increment   Line Contents
================================================
   274    164.1 MiB      0.0 MiB   @profile(stream=f_mem)
   275                             def main(run_info_fname=None,
   276                                      N_start=None,
   277                                      N_files_train=10,
   278                                      N_files_test=10,
   279                                      cv=False,
   280                                      # if True running cross validation if False, run single model training session and importance analysis
   281                                      feature_down_select=False,
   282                                      analyze_feature_importance=False,
   283                                      early_stop_rounds=10
   284                                      ):
   285    164.1 MiB      0.0 MiB       datetime_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
   286                             
   287    164.1 MiB      0.0 MiB       if run_info_fname is None:
   288    164.1 MiB      0.0 MiB           run_info = dict()
   289    164.1 MiB      0.0 MiB           N_splits = ub.N_split
   290    164.1 MiB      0.0 MiB           if N_files_train > N_splits:
   291                                         N_files_train = N_splits
   292    164.1 MiB      0.0 MiB           if N_files_test > N_splits:
   293                                         N_files_test = N_splits
   294                             
   295    164.1 MiB      0.0 MiB           if analyze_feature_importance and feature_down_select:
   296                                         assert 0
   297                             
   298    164.1 MiB      0.0 MiB           run_info['N_splits'] = N_splits
   299    164.1 MiB      0.0 MiB           run_info['N_files_train'] = N_files_train
   300    164.1 MiB      0.0 MiB           run_info['N_files_test'] = N_files_test
   301    164.1 MiB      0.0 MiB           run_info['feature_down_select'] = feature_down_select
   302    164.1 MiB      0.0 MiB           run_info['cv'] = cv
   303    164.1 MiB      0.0 MiB           run_info['analyze_feature_importance'] = analyze_feature_importance
   304    164.1 MiB      0.0 MiB           run_info['early_stop_rounds'] = early_stop_rounds
   305                             
   306    164.1 MiB      0.0 MiB           df_train, n_start = load_data(load_test=False, N_start=N_start, N_read=N_files_train, N_split=N_splits,
   307    164.1 MiB      0.0 MiB                                         shuffle=False,
   308    413.0 MiB    248.8 MiB                                         filter=feature_down_select)
   309    413.0 MiB      0.0 MiB           df_test, _ = load_data(load_test=True, N_start=n_start, N_read=N_files_test, N_split=N_splits, shuffle=False,
   310    544.1 MiB    131.1 MiB                                  filter=feature_down_select)
   311                             
   312    544.1 MiB      0.0 MiB           ub.log('generating id diff columns based on various dates columns')
   313    544.1 MiB      0.0 MiB           dates_cols = [x for x in list(df_train.columns) if 'start_date' in x or 'end_date' in x]
   314                             
   315                                     # print dates_cols
   316                             
   317    580.8 MiB     36.8 MiB           df_datesort = pd.concat([df_train[['Id'] + dates_cols], df_test[['Id'] + dates_cols]],
   318    661.7 MiB     80.9 MiB                                   ignore_index=True)
   319    661.7 MiB      0.0 MiB           gc.collect()
   320                             
   321   2128.0 MiB   1466.3 MiB           for c in dates_cols:
   322   1975.4 MiB   -152.6 MiB               df_datesort.sort_values(by=[c, 'Id'], inplace=True)
   323   1975.4 MiB      0.0 MiB               df_datesort[c + '_id_diff'] = df_datesort['Id'].diff().fillna(999999).astype(int)
   324   1975.4 MiB      0.0 MiB               df_datesort[c + '_id_diff_reverse'] = df_datesort['Id'].iloc[::-1].diff().fillna(999999).astype(int)
   325                             
   326   2128.0 MiB    152.6 MiB               df_datesort.drop([c], axis=1, inplace=True)
   327                             
   328   2128.0 MiB      0.0 MiB           df_datesort.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_datesort_debug.csv'))
   329                             
   330    734.1 MiB  -1393.9 MiB           gc.collect()
   331    926.4 MiB    192.3 MiB           df_train = df_train.merge(df_datesort, on='Id')
   332    926.4 MiB      0.0 MiB           df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_debug.csv'))
   333                             
   334    776.1 MiB   -150.3 MiB           gc.collect()
   335   1006.9 MiB    230.8 MiB           df_test = df_test.merge(df_datesort, on='Id')
   336   1006.9 MiB      0.0 MiB           df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_test_debug.csv'))
   337                             
   338   1006.9 MiB      0.0 MiB           df_test['Response'] = 0
   339                             
   340   1006.9 MiB      0.0 MiB           print df_train.shape
   341   1006.9 MiB      0.0 MiB           print df_test.shape
   342    857.0 MiB   -149.9 MiB           gc.collect()
   343                             
   344    857.0 MiB      0.0 MiB           if N_files_train == N_splits:
   345                                         split_data(df_train,
   346                                                    output_fname_template=os.path.join(ub.processed_data_dir, 'df_train_preprocessed_part{}.csv'))
   347    857.0 MiB      0.0 MiB           if N_files_test == N_splits:
   348                                         split_data(df_test,
   349                                                    output_fname_template=os.path.join(ub.processed_data_dir, 'df_test_preprocessed_part{}.csv'))
   350                             
   351    857.0 MiB      0.0 MiB           fillna = True
   352    857.0 MiB      0.0 MiB           run_info['fillna'] = fillna
   353    857.0 MiB      0.0 MiB           if fillna:
   354    857.0 MiB      0.0 MiB               ub.log('Filling na...')
   355    865.1 MiB      8.1 MiB               for df in [df_train, df_test]:
   356    865.1 MiB      0.0 MiB                   cols_full_flag = df.isnull().any()
   357    865.1 MiB      0.0 MiB                   non_full_cols = list(cols_full_flag[cols_full_flag].index)
   358    865.1 MiB      0.0 MiB                   print 'Non-full columns: {}'.format(len(non_full_cols))
   359                                             # print non_full_cols
   360                             
   361                                             if 1:
   362    865.1 MiB      0.0 MiB                       df.fillna(-999999, inplace=True)
   363                                             else:
   364                                                 # print df.PersonalField7.unique()
   365                                                 for c in non_full_cols:
   366                                                     if len(df[c].unique()) > 2:
   367                                                         most_frequent_items = df[c].value_counts().idxmax()
   368                                                         print c, most_frequent_items
   369                                                         df[c].fillna(value=most_frequent_items, inplace=True)
   370                                                     else:  # if it is only a pair of value [somthing, nan] then fill in "missing"
   371                                                         df[c].fillna(value='missing', inplace=True)
   372                                                         print c, df[c].unique()
   373                             
   374    865.1 MiB      0.0 MiB                   cols_full_flag = df.isnull().any()
   375    865.1 MiB      0.0 MiB                   non_full_cols = list(cols_full_flag[cols_full_flag].index)
   376    865.1 MiB      0.0 MiB                   print 'Non-full columns: {}'.format(len(non_full_cols))
   377                             
   378    865.1 MiB      0.0 MiB                   le = LabelEncoder()
   379    865.1 MiB      0.0 MiB                   obj_cols = df.select_dtypes(include=['object']).columns
   380                                             # print 'Obj columns: ', list(obj_cols)
   381    865.1 MiB      0.0 MiB                   for col in obj_cols:
   382                                                 df[col] = le.fit_transform(df[col])
   383                             
   384    865.1 MiB      0.0 MiB               df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   385    865.1 MiB      0.0 MiB               df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   386                             
   387    865.1 MiB      0.0 MiB           ub.log('Dropping Id and Response columns...')
   388    865.1 MiB      0.0 MiB           columns_to_drop = ['Id', 'Response']
   389    865.1 MiB      0.0 MiB           shuffle_col = df_train[['Id']].copy()
   390    865.1 MiB      0.0 MiB           shuffle_col['Id'] = np.random.randn(len(shuffle_col))
   391                             
   392    865.1 MiB      0.0 MiB           y_total_df = df_train['Response']
   393    865.1 MiB      0.0 MiB           y_total = df_train['Response'].values
   394    979.5 MiB    114.4 MiB           df_train.drop(columns_to_drop, axis=1, inplace=True)
   395    978.8 MiB     -0.8 MiB           df_test.drop(columns_to_drop, axis=1, inplace=True)
   396                             
   397    978.8 MiB      0.0 MiB           print df_train.shape
   398    978.8 MiB      0.0 MiB           print df_test.shape
   399    978.8 MiB      0.0 MiB           prior = np.sum(y_total) / (1. * len(y_total))
   400    978.8 MiB      0.0 MiB           print 'prior: {}'.format(prior)
   401    978.8 MiB      0.0 MiB           run_info['prior'] = prior
   402    978.8 MiB      0.0 MiB           gc.collect()
   403                             
   404    978.8 MiB      0.0 MiB           feature_imp_fname_tmplate = os.path.join(ub.output_dir, 'feature_importance_xgb_{}')
   405    978.8 MiB      0.0 MiB           top_features_fname = feature_imp_fname_tmplate.format('accumu_list.txt')
   406                                     # if feature_down_select:
   407                                     #     ub.log('Feature down selected based on {}...'.format(top_features_fname))
   408                                     #     #todo may need to set a maxN for the number of features to use
   409                                     #
   410                                     #     with open(top_features_fname, 'r') as tf:
   411                                     #         selected_cols = [x.strip() for x in tf.readlines()]
   412                                     #     df_train = df_train[selected_cols]
   413                                     #     df_test = df_test[selected_cols]
   414                                     #     print df_train.shape
   415                                     #     print df_test.shape
   416                                     #     print df_train.columns
   417                             
   418    978.8 MiB      0.0 MiB           feature_names = list(df_train.columns)
   419                             
   420    978.8 MiB      0.0 MiB           postfix_train = '{}_{}of{}'.format(datetime_str, N_files_train, N_splits)
   421    978.8 MiB      0.0 MiB           postfix_test = '{}_{}of{}'.format(datetime_str, N_files_test, N_splits)
   422                             
   423    978.8 MiB      0.0 MiB           run_info['postfix_train'] = postfix_train
   424    978.8 MiB      0.0 MiB           run_info['postfix_test'] = postfix_test
   425                             
   426    978.8 MiB      0.0 MiB           testsize = 0.3
   427    978.8 MiB      0.0 MiB           run_info['testsize'] = testsize
   428                             
   429    978.8 MiB      0.0 MiB           train_test_split_method = 1
   430                             
   431    978.8 MiB      0.0 MiB           ub.log('Train/val split using testsize={}, split_method={}'.format(testsize, train_test_split_method))
   432    978.8 MiB      0.0 MiB           if train_test_split_method == 1:
   433    978.8 MiB      0.0 MiB               train_idx = shuffle_col[shuffle_col['Id'] > testsize].index
   434    978.8 MiB      0.0 MiB               val_idx = shuffle_col[shuffle_col['Id'] <= testsize].index
   435    978.8 MiB      0.0 MiB               ub.log('Done shuffling...')
   436    978.8 MiB      0.0 MiB               print 'len of train_idx', len(train_idx)
   437    978.8 MiB      0.0 MiB               print 'len of val_idx', len(val_idx)
   438    978.8 MiB      0.0 MiB               y_train = y_total_df.loc[train_idx].values
   439    978.8 MiB      0.0 MiB               y_val = y_total_df.loc[val_idx].values
   440                             
   441   1068.0 MiB     89.2 MiB               xgtrain = xgb.DMatrix(df_train.loc[train_idx].values, y_train, feature_names=feature_names)
   442   1068.0 MiB      0.0 MiB               ub.log('Assembled xgtrain')
   443   1211.2 MiB    143.2 MiB               xgval = xgb.DMatrix(df_train.loc[val_idx].values, y_val, feature_names=feature_names)
   444   1211.2 MiB      0.0 MiB               ub.log('Assembled xgval')
   445   1211.2 MiB      0.0 MiB               del df_train
   446   1211.2 MiB      0.0 MiB               ub.log('Deleted df_train')
   447    980.8 MiB   -230.4 MiB               gc.collect()
   448                                     else:
   449                                         x_train, x_val, y_train, y_val = train_test_split(df_train.values, y_total, test_size=testsize)
   450                                         ub.log('Done shuffling...')
   451                                         print x_train.shape
   452                                         print x_val.shape
   453                                         del df_train
   454                                         gc.collect()
   455                                         ub.log('Deleted df_train')
   456                             
   457                                         xgtrain = xgb.DMatrix(x_train, y_train, feature_names=feature_names)
   458                                         ub.log('Assembled xgtrain')
   459                                         xgval = xgb.DMatrix(x_val, y_val, feature_names=feature_names)
   460                                         ub.log('Assembled xgval')
   461                                         del x_train
   462                                         del x_val
   463                                         gc.collect()
   464                             
   465    980.8 MiB      0.0 MiB           fname_xgtrain = os.path.join(ub.processed_data_dir, 'xgtrain_{}.buffer'.format(postfix_train))
   466    980.9 MiB      0.1 MiB           xgtrain.save_binary(fname_xgtrain)
   467    980.9 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgtrain))
   468                             
   469    980.9 MiB      0.0 MiB           fname_xgval = os.path.join(ub.processed_data_dir, 'xgval_{}.buffer'.format(postfix_train))
   470    980.9 MiB      0.0 MiB           xgval.save_binary(fname_xgval)
   471    980.9 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgval))
   472                             
   473   1212.1 MiB    231.2 MiB           xgtest = xgb.DMatrix(df_test.values, feature_names=feature_names)
   474   1212.1 MiB      0.0 MiB           ub.log('Assembled xgtest')
   475   1212.1 MiB      0.0 MiB           fname_xgtest = os.path.join(ub.processed_data_dir, 'xgtest_{}.buffer'.format(postfix_test))
   476   1212.1 MiB      0.0 MiB           xgtest.save_binary(fname_xgtest)
   477   1212.1 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgtest))
   478                             
   479   1212.1 MiB      0.0 MiB           del df_test
   480   1212.1 MiB      0.0 MiB           gc.collect()
   481   1212.1 MiB      0.0 MiB           ub.log('Deleted df_test')
   482                             
   483   1212.1 MiB      0.0 MiB           print 'train and val set sizes'
   484   1212.1 MiB      0.0 MiB           print xgtrain.num_row(), xgtrain.num_col()
   485   1212.1 MiB      0.0 MiB           print xgval.num_row(), xgval.num_col()
   486                             
   487   1212.1 MiB      0.0 MiB           run_info['fname_xgtrain'] = fname_xgtrain
   488   1212.1 MiB      0.0 MiB           run_info['fname_xgval'] = fname_xgval
   489   1212.1 MiB      0.0 MiB           run_info['fname_xgtest'] = fname_xgtest
   490                             
   491   1212.1 MiB      0.0 MiB           xgb_params = get_params(basescore=prior)
   492   1212.1 MiB      0.0 MiB           run_info['xgb_params'] = xgb_params
   493   1212.1 MiB      0.0 MiB           ub.log('Get xgb_params')
   494   1212.1 MiB      0.0 MiB           print xgb_params
   495                             
   496   1212.1 MiB      0.0 MiB           xgb_num_rounds = 2000
   497   1212.1 MiB      0.0 MiB           run_info['xgb_num_rounds'] = xgb_num_rounds
   498   1212.1 MiB      0.0 MiB           print 'xgb_num_rounds', xgb_num_rounds
   499   1212.1 MiB      0.0 MiB           if cv:
   500                                         ub.log('Running cross validation...')
   501                                         eval_hist = xgb.cv(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   502                                                            early_stopping_rounds=early_stop_rounds,
   503                                                            feval=ub.mcc_eval, maximize=True,
   504                                                            verbose_eval=1, show_stdv=True, nfold=4, seed=0, stratified=True)
   505                                         print eval_hist
   506                                         run_info['eval_hist'] = eval_hist
   507                             
   508                                     else:
   509   1212.1 MiB      0.0 MiB               ub.log('Running training...')
   510   1212.1 MiB      0.0 MiB               feature_imp_fname = feature_imp_fname_tmplate.format(postfix_train)
   511   1212.1 MiB      0.0 MiB               watchlist = [(xgtrain, 'train'), (xgval, 'eval')]
   512   1212.1 MiB      0.0 MiB               model = xgb.train(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   513   1212.1 MiB      0.0 MiB                                 early_stopping_rounds=early_stop_rounds,
   514   1212.1 MiB      0.0 MiB                                 feval=ub.mcc_eval, maximize=True,
   515   1302.4 MiB     90.3 MiB                                 evals=watchlist, verbose_eval=True)
   516                             
   517   1302.4 MiB      0.0 MiB               model_fname = os.path.join(ub.output_dir, 'xbg_{}.model'.format(postfix_train))
   518   1302.4 MiB      0.0 MiB               ub.log('Saving model: {}...'.format(model_fname))
   519   1302.4 MiB      0.0 MiB               model.save_model(model_fname)
   520   1302.4 MiB      0.0 MiB               model.dump_model(model_fname + '.raw.txt')
   521   1302.4 MiB      0.0 MiB               run_info['model_fname'] = model_fname
   522                             
   523   1302.4 MiB      0.0 MiB               ntree_limit = model.best_iteration + 1
   524                             
   525   1302.4 MiB      0.0 MiB               ub.log('Predictions on xgtrain...', 'highlight')
   526   1302.4 MiB      0.0 MiB               predictions = model.predict(xgtrain, ntree_limit=ntree_limit)
   527                             
   528   1302.4 MiB      0.0 MiB               best_proba, best_mcc, y_pred = ub.eval_mcc(y_train, predictions, True)
   529   1302.4 MiB      0.0 MiB               mcc_official = matthews_corrcoef(y_train, y_pred)
   530   1302.4 MiB      0.0 MiB               print 'ntree limit:', ntree_limit
   531   1302.4 MiB      0.0 MiB               print 'best_mcc:', best_mcc
   532   1302.4 MiB      0.0 MiB               print 'best_proba:', best_proba
   533   1302.4 MiB      0.0 MiB               print 'matthews_corroef', mcc_official
   534                             
   535   1302.4 MiB      0.0 MiB               ub.log('Predictions on xgval...', 'highlight')
   536   1302.4 MiB      0.0 MiB               predictions = model.predict(xgval, ntree_limit=ntree_limit)
   537                             
   538   1302.4 MiB      0.0 MiB               best_proba, best_mcc, y_pred = ub.eval_mcc(y_val, predictions, True)
   539   1302.4 MiB      0.0 MiB               mcc_official = matthews_corrcoef(y_val, y_pred)
   540   1302.4 MiB      0.0 MiB               print 'ntree limit:', ntree_limit
   541   1302.4 MiB      0.0 MiB               print 'best_mcc:', best_mcc
   542   1302.4 MiB      0.0 MiB               print 'best_proba:', best_proba
   543   1302.4 MiB      0.0 MiB               print 'matthews_corroef', mcc_official
   544                             
   545   1302.4 MiB      0.0 MiB               run_info['ntree_limit'] = ntree_limit
   546   1302.4 MiB      0.0 MiB               run_info['best_mcc'] = best_mcc
   547   1302.4 MiB      0.0 MiB               run_info['best_proba'] = best_proba
   548   1302.4 MiB      0.0 MiB               run_info['mcc_official'] = mcc_official
   549                             
   550   1302.4 MiB      0.0 MiB               if analyze_feature_importance:
   551                                             ub.log('Analyzing feature importance...')
   552                                             imp = model.get_fscore()
   553                                             imp = sorted(imp.items(), key=operator.itemgetter(1))
   554                                             imp_df = pd.DataFrame(imp, columns=['feature', 'fscore'])
   555                                             imp_df['fscore'] = imp_df['fscore'] / imp_df['fscore'].sum()
   556                             
   557                                             ub.log('Output result csv to {}...'.format(feature_imp_fname + '.csv'))
   558                                             imp_df.to_csv(feature_imp_fname + '.csv')
   559                             
   560                                             plt.figure()
   561                                             imp_df.plot(kind='barh', x='feature', y='fscore', legend=False, figsize=(6, 10))
   562                                             plt.title('XGBoost Feature Importance @ {}'.format(postfix_train))
   563                                             plt.xlabel('relative importance')
   564                                             plt.gcf().savefig(feature_imp_fname + '.png', bbox_inches='tight')
   565                             
   566                                             feature_lists = glob.glob(feature_imp_fname_tmplate.replace('{}', '*.csv'))
   567                                             ub.log('Aggregating previous analysis results...')
   568                                             print feature_lists
   569                                             features_df = None
   570                                             if feature_lists:
   571                                                 for f_l in feature_lists:
   572                                                     tmp_df = pd.read_csv(f_l, index_col=0)
   573                                                     if features_df is None:
   574                                                         features_df = tmp_df
   575                                                     else:
   576                                                         features_df = pd.concat([features_df, tmp_df], ignore_index=True)
   577                             
   578                                             f_df = features_df.groupby(['feature']).mean().reset_index()
   579                                             f_df['overall'] = True
   580                                             imp_df['overall'] = False
   581                                             merged_df = pd.concat([imp_df, f_df]).sort_values(by=['overall', 'fscore'], ascending=False)
   582                                             sns_plot = sns.factorplot(y='feature', x='fscore', data=merged_df, hue='overall', kind='bar',
   583                                                                       hue_order=[True, False], size=20, aspect=0.5)
   584                                             sns_plot.savefig(feature_imp_fname + '_overall.png', bbox_inches='tight')
   585                             
   586                                             ub.log('Output overall result csv to {}...'.format(top_features_fname))
   587                                             with open(top_features_fname, 'w') as tf:
   588                                                 tf.write('\n'.join(list(set(merged_df.feature.values))))
   589                             
   590                                             merged_df.to_csv(top_features_fname.replace('.txt', '_df.csv'), index=False)
   591                             
   592   1302.4 MiB      0.0 MiB           run_info_fname = os.path.join(ub.output_dir, 'run_info_{}.txt'.format(postfix_train))
   593   1302.4 MiB      0.0 MiB           ub.log('Saving run_info into {}'.format(run_info_fname))
   594   1302.4 MiB      0.0 MiB           print run_info
   595   1302.4 MiB      0.0 MiB           with open(run_info_fname, 'w') as fp:
   596   1302.4 MiB      0.0 MiB               fp.write(str(run_info))
   597                             
   598                                         # json has trouble serializing np.float32
   599                                         # with open(run_info_fname, 'w') as fp:
   600                                         #    json.dump(run_info, fp)
   601                                 else:
   602                                     ub.log('Loading run info from {} ...'.format(run_info_fname))
   603                                     with open(run_info_fname, 'r') as fp:
   604                                         run_info = eval(fp.read())
   605                                     print json.dumps(run_info, indent=2)
   606                             
   607                                     model = xgb.Booster()
   608                                     ub.log('Loading model {} ...'.format(run_info['model_fname']))
   609                                     model.load_model(run_info['model_fname'])
   610                                     ub.log('Loading xgtest data {} ...'.format(run_info['fname_xgtest']))
   611                                     xgtest = xgb.DMatrix(run_info['fname_xgtest'])
   612                                     ub.log('XGB making predictions...')
   613                                     ypred = model.predict(xgtest, ntree_limit=run_info['ntree_limit'])
   614                             
   615                                     nrows = len(ypred)
   616                                     postfix_train = run_info['postfix_train']
   617                             
   618                                     sample = pd.read_csv(os.path.join(ub.data_dir, 'sample_submission.csv'), nrows=nrows)
   619                                     sample['Response'] = ypred
   620                                     fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}_prob.csv".format(postfix_train))
   621                                     ub.log('Writing output file (raw proba) {} ...'.format(fname_output))
   622                                     sample.to_csv(fname_output, index=False)
   623                             
   624                                     best_proba = run_info['best_proba']
   625                                     ub.log('Using threshold: best_proba == {}'.format(best_proba))
   626                                     sample['Response'] = (ypred > best_proba).astype(int)
   627                                     fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}.csv".format(postfix_train))
   628                                     ub.log('Writing output file {} ...'.format(fname_output))
   629                                     sample.to_csv(fname_output, index=False)
   630   1302.4 MiB      0.0 MiB       return run_info_fname


Filename: explore2.py

Line #    Mem usage    Increment   Line Contents
================================================
   274    750.4 MiB      0.0 MiB   @profile(stream=f_mem)
   275                             def main(run_info_fname=None,
   276                                      N_start=None,
   277                                      N_files_train=10,
   278                                      N_files_test=10,
   279                                      cv=False,
   280                                      # if True running cross validation if False, run single model training session and importance analysis
   281                                      feature_down_select=False,
   282                                      analyze_feature_importance=False,
   283                                      early_stop_rounds=10
   284                                      ):
   285    750.4 MiB      0.0 MiB       datetime_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
   286                             
   287    750.4 MiB      0.0 MiB       if run_info_fname is None:
   288                                     run_info = dict()
   289                                     N_splits = ub.N_split
   290                                     if N_files_train > N_splits:
   291                                         N_files_train = N_splits
   292                                     if N_files_test > N_splits:
   293                                         N_files_test = N_splits
   294                             
   295                                     if analyze_feature_importance and feature_down_select:
   296                                         assert 0
   297                             
   298                                     run_info['N_splits'] = N_splits
   299                                     run_info['N_files_train'] = N_files_train
   300                                     run_info['N_files_test'] = N_files_test
   301                                     run_info['feature_down_select'] = feature_down_select
   302                                     run_info['cv'] = cv
   303                                     run_info['analyze_feature_importance'] = analyze_feature_importance
   304                                     run_info['early_stop_rounds'] = early_stop_rounds
   305                             
   306                                     df_train, n_start = load_data(load_test=False, N_start=N_start, N_read=N_files_train, N_split=N_splits,
   307                                                                   shuffle=False,
   308                                                                   filter=feature_down_select)
   309                                     df_test, _ = load_data(load_test=True, N_start=n_start, N_read=N_files_test, N_split=N_splits, shuffle=False,
   310                                                            filter=feature_down_select)
   311                             
   312                                     ub.log('generating id diff columns based on various dates columns')
   313                                     dates_cols = [x for x in list(df_train.columns) if 'start_date' in x or 'end_date' in x]
   314                             
   315                                     # print dates_cols
   316                             
   317                                     df_datesort = pd.concat([df_train[['Id'] + dates_cols], df_test[['Id'] + dates_cols]],
   318                                                             ignore_index=True)
   319                                     gc.collect()
   320                             
   321                                     for c in dates_cols:
   322                                         df_datesort.sort_values(by=[c, 'Id'], inplace=True)
   323                                         df_datesort[c + '_id_diff'] = df_datesort['Id'].diff().fillna(999999).astype(int)
   324                                         df_datesort[c + '_id_diff_reverse'] = df_datesort['Id'].iloc[::-1].diff().fillna(999999).astype(int)
   325                             
   326                                         df_datesort.drop([c], axis=1, inplace=True)
   327                             
   328                                     df_datesort.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_datesort_debug.csv'))
   329                             
   330                                     gc.collect()
   331                                     df_train = df_train.merge(df_datesort, on='Id')
   332                                     df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_debug.csv'))
   333                             
   334                                     gc.collect()
   335                                     df_test = df_test.merge(df_datesort, on='Id')
   336                                     df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_test_debug.csv'))
   337                             
   338                                     df_test['Response'] = 0
   339                             
   340                                     print df_train.shape
   341                                     print df_test.shape
   342                                     gc.collect()
   343                             
   344                                     if N_files_train == N_splits:
   345                                         split_data(df_train,
   346                                                    output_fname_template=os.path.join(ub.processed_data_dir, 'df_train_preprocessed_part{}.csv'))
   347                                     if N_files_test == N_splits:
   348                                         split_data(df_test,
   349                                                    output_fname_template=os.path.join(ub.processed_data_dir, 'df_test_preprocessed_part{}.csv'))
   350                             
   351                                     fillna = True
   352                                     run_info['fillna'] = fillna
   353                                     if fillna:
   354                                         ub.log('Filling na...')
   355                                         for df in [df_train, df_test]:
   356                                             cols_full_flag = df.isnull().any()
   357                                             non_full_cols = list(cols_full_flag[cols_full_flag].index)
   358                                             print 'Non-full columns: {}'.format(len(non_full_cols))
   359                                             # print non_full_cols
   360                             
   361                                             if 1:
   362                                                 df.fillna(-999999, inplace=True)
   363                                             else:
   364                                                 # print df.PersonalField7.unique()
   365                                                 for c in non_full_cols:
   366                                                     if len(df[c].unique()) > 2:
   367                                                         most_frequent_items = df[c].value_counts().idxmax()
   368                                                         print c, most_frequent_items
   369                                                         df[c].fillna(value=most_frequent_items, inplace=True)
   370                                                     else:  # if it is only a pair of value [somthing, nan] then fill in "missing"
   371                                                         df[c].fillna(value='missing', inplace=True)
   372                                                         print c, df[c].unique()
   373                             
   374                                             cols_full_flag = df.isnull().any()
   375                                             non_full_cols = list(cols_full_flag[cols_full_flag].index)
   376                                             print 'Non-full columns: {}'.format(len(non_full_cols))
   377                             
   378                                             le = LabelEncoder()
   379                                             obj_cols = df.select_dtypes(include=['object']).columns
   380                                             # print 'Obj columns: ', list(obj_cols)
   381                                             for col in obj_cols:
   382                                                 df[col] = le.fit_transform(df[col])
   383                             
   384                                         df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   385                                         df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   386                             
   387                                     ub.log('Dropping Id and Response columns...')
   388                                     columns_to_drop = ['Id', 'Response']
   389                                     shuffle_col = df_train[['Id']].copy()
   390                                     shuffle_col['Id'] = np.random.randn(len(shuffle_col))
   391                             
   392                                     y_total_df = df_train['Response']
   393                                     y_total = df_train['Response'].values
   394                                     df_train.drop(columns_to_drop, axis=1, inplace=True)
   395                                     df_test.drop(columns_to_drop, axis=1, inplace=True)
   396                             
   397                                     print df_train.shape
   398                                     print df_test.shape
   399                                     prior = np.sum(y_total) / (1. * len(y_total))
   400                                     print 'prior: {}'.format(prior)
   401                                     run_info['prior'] = prior
   402                                     gc.collect()
   403                             
   404                                     feature_imp_fname_tmplate = os.path.join(ub.output_dir, 'feature_importance_xgb_{}')
   405                                     top_features_fname = feature_imp_fname_tmplate.format('accumu_list.txt')
   406                                     # if feature_down_select:
   407                                     #     ub.log('Feature down selected based on {}...'.format(top_features_fname))
   408                                     #     #todo may need to set a maxN for the number of features to use
   409                                     #
   410                                     #     with open(top_features_fname, 'r') as tf:
   411                                     #         selected_cols = [x.strip() for x in tf.readlines()]
   412                                     #     df_train = df_train[selected_cols]
   413                                     #     df_test = df_test[selected_cols]
   414                                     #     print df_train.shape
   415                                     #     print df_test.shape
   416                                     #     print df_train.columns
   417                             
   418                                     feature_names = list(df_train.columns)
   419                             
   420                                     postfix_train = '{}_{}of{}'.format(datetime_str, N_files_train, N_splits)
   421                                     postfix_test = '{}_{}of{}'.format(datetime_str, N_files_test, N_splits)
   422                             
   423                                     run_info['postfix_train'] = postfix_train
   424                                     run_info['postfix_test'] = postfix_test
   425                             
   426                                     testsize = 0.3
   427                                     run_info['testsize'] = testsize
   428                             
   429                                     train_test_split_method = 1
   430                             
   431                                     ub.log('Train/val split using testsize={}, split_method={}'.format(testsize, train_test_split_method))
   432                                     if train_test_split_method == 1:
   433                                         train_idx = shuffle_col[shuffle_col['Id'] > testsize].index
   434                                         val_idx = shuffle_col[shuffle_col['Id'] <= testsize].index
   435                                         ub.log('Done shuffling...')
   436                                         print 'len of train_idx', len(train_idx)
   437                                         print 'len of val_idx', len(val_idx)
   438                                         y_train = y_total_df.loc[train_idx].values
   439                                         y_val = y_total_df.loc[val_idx].values
   440                             
   441                                         xgtrain = xgb.DMatrix(df_train.loc[train_idx].values, y_train, feature_names=feature_names)
   442                                         ub.log('Assembled xgtrain')
   443                                         xgval = xgb.DMatrix(df_train.loc[val_idx].values, y_val, feature_names=feature_names)
   444                                         ub.log('Assembled xgval')
   445                                         del df_train
   446                                         ub.log('Deleted df_train')
   447                                         gc.collect()
   448                                     else:
   449                                         x_train, x_val, y_train, y_val = train_test_split(df_train.values, y_total, test_size=testsize)
   450                                         ub.log('Done shuffling...')
   451                                         print x_train.shape
   452                                         print x_val.shape
   453                                         del df_train
   454                                         gc.collect()
   455                                         ub.log('Deleted df_train')
   456                             
   457                                         xgtrain = xgb.DMatrix(x_train, y_train, feature_names=feature_names)
   458                                         ub.log('Assembled xgtrain')
   459                                         xgval = xgb.DMatrix(x_val, y_val, feature_names=feature_names)
   460                                         ub.log('Assembled xgval')
   461                                         del x_train
   462                                         del x_val
   463                                         gc.collect()
   464                             
   465                                     fname_xgtrain = os.path.join(ub.processed_data_dir, 'xgtrain_{}.buffer'.format(postfix_train))
   466                                     xgtrain.save_binary(fname_xgtrain)
   467                                     ub.log('Saved {}'.format(fname_xgtrain))
   468                             
   469                                     fname_xgval = os.path.join(ub.processed_data_dir, 'xgval_{}.buffer'.format(postfix_train))
   470                                     xgval.save_binary(fname_xgval)
   471                                     ub.log('Saved {}'.format(fname_xgval))
   472                             
   473                                     xgtest = xgb.DMatrix(df_test.values, feature_names=feature_names)
   474                                     ub.log('Assembled xgtest')
   475                                     fname_xgtest = os.path.join(ub.processed_data_dir, 'xgtest_{}.buffer'.format(postfix_test))
   476                                     xgtest.save_binary(fname_xgtest)
   477                                     ub.log('Saved {}'.format(fname_xgtest))
   478                             
   479                                     del df_test
   480                                     gc.collect()
   481                                     ub.log('Deleted df_test')
   482                             
   483                                     print 'train and val set sizes'
   484                                     print xgtrain.num_row(), xgtrain.num_col()
   485                                     print xgval.num_row(), xgval.num_col()
   486                             
   487                                     run_info['fname_xgtrain'] = fname_xgtrain
   488                                     run_info['fname_xgval'] = fname_xgval
   489                                     run_info['fname_xgtest'] = fname_xgtest
   490                             
   491                                     xgb_params = get_params(basescore=prior)
   492                                     run_info['xgb_params'] = xgb_params
   493                                     ub.log('Get xgb_params')
   494                                     print xgb_params
   495                             
   496                                     xgb_num_rounds = 2000
   497                                     run_info['xgb_num_rounds'] = xgb_num_rounds
   498                                     print 'xgb_num_rounds', xgb_num_rounds
   499                                     if cv:
   500                                         ub.log('Running cross validation...')
   501                                         eval_hist = xgb.cv(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   502                                                            early_stopping_rounds=early_stop_rounds,
   503                                                            feval=ub.mcc_eval, maximize=True,
   504                                                            verbose_eval=1, show_stdv=True, nfold=4, seed=0, stratified=True)
   505                                         print eval_hist
   506                                         run_info['eval_hist'] = eval_hist
   507                             
   508                                     else:
   509                                         ub.log('Running training...')
   510                                         feature_imp_fname = feature_imp_fname_tmplate.format(postfix_train)
   511                                         watchlist = [(xgtrain, 'train'), (xgval, 'eval')]
   512                                         model = xgb.train(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   513                                                           early_stopping_rounds=early_stop_rounds,
   514                                                           feval=ub.mcc_eval, maximize=True,
   515                                                           evals=watchlist, verbose_eval=True)
   516                             
   517                                         model_fname = os.path.join(ub.output_dir, 'xbg_{}.model'.format(postfix_train))
   518                                         ub.log('Saving model: {}...'.format(model_fname))
   519                                         model.save_model(model_fname)
   520                                         model.dump_model(model_fname + '.raw.txt')
   521                                         run_info['model_fname'] = model_fname
   522                             
   523                                         ntree_limit = model.best_iteration + 1
   524                             
   525                                         ub.log('Predictions on xgtrain...', 'highlight')
   526                                         predictions = model.predict(xgtrain, ntree_limit=ntree_limit)
   527                             
   528                                         best_proba, best_mcc, y_pred = ub.eval_mcc(y_train, predictions, True)
   529                                         mcc_official = matthews_corrcoef(y_train, y_pred)
   530                                         print 'ntree limit:', ntree_limit
   531                                         print 'best_mcc:', best_mcc
   532                                         print 'best_proba:', best_proba
   533                                         print 'matthews_corroef', mcc_official
   534                             
   535                                         ub.log('Predictions on xgval...', 'highlight')
   536                                         predictions = model.predict(xgval, ntree_limit=ntree_limit)
   537                             
   538                                         best_proba, best_mcc, y_pred = ub.eval_mcc(y_val, predictions, True)
   539                                         mcc_official = matthews_corrcoef(y_val, y_pred)
   540                                         print 'ntree limit:', ntree_limit
   541                                         print 'best_mcc:', best_mcc
   542                                         print 'best_proba:', best_proba
   543                                         print 'matthews_corroef', mcc_official
   544                             
   545                                         run_info['ntree_limit'] = ntree_limit
   546                                         run_info['best_mcc'] = best_mcc
   547                                         run_info['best_proba'] = best_proba
   548                                         run_info['mcc_official'] = mcc_official
   549                             
   550                                         if analyze_feature_importance:
   551                                             ub.log('Analyzing feature importance...')
   552                                             imp = model.get_fscore()
   553                                             imp = sorted(imp.items(), key=operator.itemgetter(1))
   554                                             imp_df = pd.DataFrame(imp, columns=['feature', 'fscore'])
   555                                             imp_df['fscore'] = imp_df['fscore'] / imp_df['fscore'].sum()
   556                             
   557                                             ub.log('Output result csv to {}...'.format(feature_imp_fname + '.csv'))
   558                                             imp_df.to_csv(feature_imp_fname + '.csv')
   559                             
   560                                             plt.figure()
   561                                             imp_df.plot(kind='barh', x='feature', y='fscore', legend=False, figsize=(6, 10))
   562                                             plt.title('XGBoost Feature Importance @ {}'.format(postfix_train))
   563                                             plt.xlabel('relative importance')
   564                                             plt.gcf().savefig(feature_imp_fname + '.png', bbox_inches='tight')
   565                             
   566                                             feature_lists = glob.glob(feature_imp_fname_tmplate.replace('{}', '*.csv'))
   567                                             ub.log('Aggregating previous analysis results...')
   568                                             print feature_lists
   569                                             features_df = None
   570                                             if feature_lists:
   571                                                 for f_l in feature_lists:
   572                                                     tmp_df = pd.read_csv(f_l, index_col=0)
   573                                                     if features_df is None:
   574                                                         features_df = tmp_df
   575                                                     else:
   576                                                         features_df = pd.concat([features_df, tmp_df], ignore_index=True)
   577                             
   578                                             f_df = features_df.groupby(['feature']).mean().reset_index()
   579                                             f_df['overall'] = True
   580                                             imp_df['overall'] = False
   581                                             merged_df = pd.concat([imp_df, f_df]).sort_values(by=['overall', 'fscore'], ascending=False)
   582                                             sns_plot = sns.factorplot(y='feature', x='fscore', data=merged_df, hue='overall', kind='bar',
   583                                                                       hue_order=[True, False], size=20, aspect=0.5)
   584                                             sns_plot.savefig(feature_imp_fname + '_overall.png', bbox_inches='tight')
   585                             
   586                                             ub.log('Output overall result csv to {}...'.format(top_features_fname))
   587                                             with open(top_features_fname, 'w') as tf:
   588                                                 tf.write('\n'.join(list(set(merged_df.feature.values))))
   589                             
   590                                             merged_df.to_csv(top_features_fname.replace('.txt', '_df.csv'), index=False)
   591                             
   592                                     run_info_fname = os.path.join(ub.output_dir, 'run_info_{}.txt'.format(postfix_train))
   593                                     ub.log('Saving run_info into {}'.format(run_info_fname))
   594                                     print run_info
   595                                     with open(run_info_fname, 'w') as fp:
   596                                         fp.write(str(run_info))
   597                             
   598                                         # json has trouble serializing np.float32
   599                                         # with open(run_info_fname, 'w') as fp:
   600                                         #    json.dump(run_info, fp)
   601                                 else:
   602    750.4 MiB      0.0 MiB           ub.log('Loading run info from {} ...'.format(run_info_fname))
   603    750.4 MiB      0.0 MiB           with open(run_info_fname, 'r') as fp:
   604    750.4 MiB      0.0 MiB               run_info = eval(fp.read())
   605    750.4 MiB      0.0 MiB           print json.dumps(run_info, indent=2)
   606                             
   607    750.4 MiB      0.0 MiB           model = xgb.Booster()
   608    750.4 MiB      0.0 MiB           ub.log('Loading model {} ...'.format(run_info['model_fname']))
   609    750.4 MiB      0.0 MiB           model.load_model(run_info['model_fname'])
   610    750.4 MiB      0.0 MiB           ub.log('Loading xgtest data {} ...'.format(run_info['fname_xgtest']))
   611    980.8 MiB    230.4 MiB           xgtest = xgb.DMatrix(run_info['fname_xgtest'])
   612    980.8 MiB      0.0 MiB           ub.log('XGB making predictions...')
   613    980.8 MiB      0.0 MiB           ypred = model.predict(xgtest, ntree_limit=run_info['ntree_limit'])
   614                             
   615    980.8 MiB      0.0 MiB           nrows = len(ypred)
   616    980.8 MiB      0.0 MiB           postfix_train = run_info['postfix_train']
   617                             
   618    980.8 MiB      0.0 MiB           sample = pd.read_csv(os.path.join(ub.data_dir, 'sample_submission.csv'), nrows=nrows)
   619    980.8 MiB      0.0 MiB           sample['Response'] = ypred
   620    980.8 MiB      0.0 MiB           fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}_prob.csv".format(postfix_train))
   621    980.8 MiB      0.0 MiB           ub.log('Writing output file (raw proba) {} ...'.format(fname_output))
   622    980.8 MiB      0.0 MiB           sample.to_csv(fname_output, index=False)
   623                             
   624    980.8 MiB      0.0 MiB           best_proba = run_info['best_proba']
   625    980.8 MiB      0.0 MiB           ub.log('Using threshold: best_proba == {}'.format(best_proba))
   626    980.8 MiB      0.0 MiB           sample['Response'] = (ypred > best_proba).astype(int)
   627    980.8 MiB      0.0 MiB           fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}.csv".format(postfix_train))
   628    980.8 MiB      0.0 MiB           ub.log('Writing output file {} ...'.format(fname_output))
   629    980.8 MiB      0.0 MiB           sample.to_csv(fname_output, index=False)
   630    980.8 MiB      0.0 MiB       return run_info_fname


