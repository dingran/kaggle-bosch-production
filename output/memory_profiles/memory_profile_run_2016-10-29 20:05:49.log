Filename: main_bosch.py

Line #    Mem usage    Increment   Line Contents
================================================
   364    168.1 MiB      0.0 MiB   @profile(stream=f_mem)
   365                             def main(run_info_fname=None,
   366                                      compile_data=False,
   367                                      train_model=False,
   368                                      make_submission=False,
   369                                      N_start=None,
   370                                      N_files_train=1,
   371                                      N_files_test=1,
   372                                      original_cols_only=False,
   373                                      disable_id_diff_cols=False,
   374                             
   375                                      feature_list_file=None,
   376                                      analyze_feature_importance=False,
   377                                      cv=False,
   378                                      # if True running cross validation if False, run single model training session and importance analysis
   379                                      early_stop_rounds=10,
   380                                      N_rounds=1000,
   381                                      testsize=0.1,
   382                                      xgb_params=None,
   383                             
   384                                      skip_date_csv=False,
   385                                      skip_num_csv=False,
   386                                      skip_cat_csv=False
   387                                      ):
   388    168.1 MiB      0.0 MiB       datetime_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
   389                             
   390    168.1 MiB      0.0 MiB       if compile_data:
   391    168.1 MiB      0.0 MiB           run_info = dict()
   392    168.1 MiB      0.0 MiB           N_splits = ub.N_split
   393    168.1 MiB      0.0 MiB           if N_files_train > N_splits:
   394                                         N_files_train = N_splits
   395    168.1 MiB      0.0 MiB           if N_files_test > N_splits:
   396                                         N_files_test = N_splits
   397                             
   398    168.1 MiB      0.0 MiB           if analyze_feature_importance and (feature_list_file is not None):
   399                                         assert 0
   400                             
   401    168.1 MiB      0.0 MiB           run_info['compile_data'] = compile_data
   402    168.1 MiB      0.0 MiB           run_info['N_splits'] = N_splits
   403    168.1 MiB      0.0 MiB           run_info['N_files_train'] = N_files_train
   404    168.1 MiB      0.0 MiB           run_info['N_files_test'] = N_files_test
   405    168.1 MiB      0.0 MiB           run_info['original_cols_only'] = original_cols_only
   406    168.1 MiB      0.0 MiB           run_info['disable_id_diff_cols'] =disable_id_diff_cols
   407    168.1 MiB      0.0 MiB           run_info['features_list_file'] = feature_list_file
   408    168.1 MiB      0.0 MiB           run_info['skip_date_csv'] = skip_date_csv
   409    168.1 MiB      0.0 MiB           run_info['skip_num_csv'] = skip_num_csv
   410    168.1 MiB      0.0 MiB           run_info['skip_cat_csv'] = skip_cat_csv
   411                             
   412    168.1 MiB      0.0 MiB           df_train, n_start = load_data(load_test=False, N_start=N_start, N_read=N_files_train, N_split=N_splits,
   413    168.1 MiB      0.0 MiB                                         original_cols_only=original_cols_only,
   414    168.1 MiB      0.0 MiB                                         feature_list_file=feature_list_file,
   415    168.1 MiB      0.0 MiB                                         load_categorical_csv=(not skip_cat_csv),
   416    168.1 MiB      0.0 MiB                                         load_date_csv=(not skip_date_csv),
   417   1347.9 MiB   1179.8 MiB                                         load_numerical_csv=(not skip_num_csv))
   418   1347.9 MiB      0.0 MiB           df_test, _ = load_data(load_test=True, N_start=n_start, N_read=N_files_test, N_split=N_splits,
   419   1347.9 MiB      0.0 MiB                                  original_cols_only=original_cols_only,
   420   1347.9 MiB      0.0 MiB                                  feature_list_file=feature_list_file,
   421   1347.9 MiB      0.0 MiB                                  load_categorical_csv=(not skip_cat_csv),
   422   1347.9 MiB      0.0 MiB                                  load_date_csv=(not skip_date_csv),
   423   2531.7 MiB   1183.8 MiB                                  load_numerical_csv=(not skip_num_csv))
   424                             
   425   2531.7 MiB      0.0 MiB           if not disable_id_diff_cols:
   426                                         ub.log('generating id diff columns based on various dates columns')
   427                                         dates_cols = [x for x in list(df_train.columns) if ('start_date' in x or 'end_date' in x) and ('rank' not in x)]
   428                             
   429                                         # print dates_cols
   430                             
   431                                         df_datesort = pd.concat([df_train[['Id'] + dates_cols], df_test[['Id'] + dates_cols]],
   432                                                                 ignore_index=True)
   433                                         gc.collect()
   434                             
   435                                         for c in dates_cols:
   436                                             # print c
   437                                             df_datesort.sort_values(by=[c, 'Id'], inplace=True)
   438                                             df_datesort[c + '_id_diff'] = df_datesort['Id'].diff().fillna(999999).astype(int)
   439                                             df_datesort[c + '_id_diff_reverse'] = df_datesort['Id'].iloc[::-1].diff().fillna(999999).astype(int)
   440                                             df_datesort[c + '_id_diff_magic'] = \
   441                                                 1 + 2 * (df_datesort[c + '_id_diff'] > 1) + 1 * (df_datesort[c + '_id_diff_reverse'] < -1)
   442                             
   443                                             df_datesort.drop([c], axis=1, inplace=True)
   444                             
   445                                         df_datesort.head(n=N_DEBUG_LINES).to_csv(os.path.join(ub.data_dir, 'df_datesort_debug.csv'))
   446                             
   447                                         gc.collect()
   448                                         df_train = df_train.merge(df_datesort, on='Id')
   449                             
   450                                         gc.collect()
   451                                         df_test = df_test.merge(df_datesort, on='Id')
   452                             
   453   2513.9 MiB    -17.8 MiB           df_test['Response'] = 0
   454   2530.1 MiB     16.2 MiB           df_train.head(n=N_DEBUG_LINES).to_csv(os.path.join(ub.data_dir, 'df_train_debug.csv'))
   455   2530.1 MiB      0.0 MiB           df_test.head(n=N_DEBUG_LINES).to_csv(os.path.join(ub.data_dir, 'df_test_debug.csv'))
   456                             
   457   2530.1 MiB      0.0 MiB           print df_train.shape
   458   2530.1 MiB      0.0 MiB           print df_test.shape
   459   2530.1 MiB      0.0 MiB           gc.collect()
   460                             
   461                                     # if N_files_train == N_splits:
   462                                     #     split_data(df_train,
   463                                     #                output_fname_template=os.path.join(ub.processed_data_dir, 'df_train_preprocessed_part{}.csv'))
   464                                     # if N_files_test == N_splits:
   465                                     #     split_data(df_test,
   466                                     #                output_fname_template=os.path.join(ub.processed_data_dir, 'df_test_preprocessed_part{}.csv'))
   467                             
   468   2530.1 MiB      0.0 MiB           fillna = True
   469   2530.1 MiB      0.0 MiB           run_info['fillna'] = fillna
   470   2530.1 MiB      0.0 MiB           if fillna:
   471   2530.1 MiB      0.0 MiB               ub.log('Filling na...')
   472   2541.8 MiB     11.7 MiB               for df in [df_train, df_test]:
   473   2541.8 MiB      0.0 MiB                   cols_full_flag = df.isnull().any()
   474   2541.8 MiB      0.0 MiB                   non_full_cols = list(cols_full_flag[cols_full_flag].index)
   475   2541.8 MiB      0.0 MiB                   print 'Non-full columns: {}'.format(len(non_full_cols))
   476                                             # print non_full_cols
   477                             
   478                                             if 1:
   479   2541.8 MiB      0.0 MiB                       df.fillna(-999999, inplace=True)
   480                                             else:
   481                                                 # print df.PersonalField7.unique()
   482                                                 for c in non_full_cols:
   483                                                     if len(df[c].unique()) > 2:
   484                                                         most_frequent_items = df[c].value_counts().idxmax()
   485                                                         print c, most_frequent_items
   486                                                         df[c].fillna(value=most_frequent_items, inplace=True)
   487                                                     else:  # if it is only a pair of value [somthing, nan] then fill in "missing"
   488                                                         df[c].fillna(value='missing', inplace=True)
   489                                                         print c, df[c].unique()
   490                             
   491   2541.8 MiB      0.0 MiB                   cols_full_flag = df.isnull().any()
   492   2541.8 MiB      0.0 MiB                   non_full_cols = list(cols_full_flag[cols_full_flag].index)
   493   2541.8 MiB      0.0 MiB                   print 'Non-full columns: {}'.format(len(non_full_cols))
   494                             
   495   2541.8 MiB      0.0 MiB                   le = LabelEncoder()
   496   2541.8 MiB      0.0 MiB                   obj_cols = df.select_dtypes(include=['object']).columns
   497                                             # print 'Obj columns: ', list(obj_cols)
   498   2541.8 MiB      0.0 MiB                   for col in obj_cols:
   499                                                 df[col] = le.fit_transform(df[col])
   500                             
   501   2541.8 MiB      0.0 MiB               df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   502   2541.8 MiB      0.0 MiB               df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   503                             
   504   2541.8 MiB      0.0 MiB           ub.log('Dropping Id and Response columns...')
   505   2541.8 MiB      0.0 MiB           columns_to_drop = ['Id', 'Response']
   506   2541.8 MiB      0.0 MiB           shuffle_col = df_train[['Id']].copy()
   507   2541.8 MiB      0.0 MiB           shuffle_col['Id'] = np.random.rand(len(shuffle_col))
   508                             
   509   2541.8 MiB      0.0 MiB           y_total_df = df_train['Response']
   510   2541.8 MiB      0.0 MiB           y_total = df_train['Response'].values
   511   2702.0 MiB    160.2 MiB           df_train.drop(columns_to_drop, axis=1, inplace=True)
   512   2700.5 MiB     -1.5 MiB           df_test.drop(columns_to_drop, axis=1, inplace=True)
   513                             
   514   2700.5 MiB      0.0 MiB           print df_train.shape
   515   2700.5 MiB      0.0 MiB           print df_test.shape
   516   2700.5 MiB      0.0 MiB           prior = np.sum(y_total) / (1. * len(y_total))
   517   2700.5 MiB      0.0 MiB           print 'prior: {}'.format(prior)
   518   2700.5 MiB      0.0 MiB           run_info['prior'] = prior
   519                             
   520   2700.5 MiB      0.0 MiB           gc.collect()
   521                             
   522   2700.5 MiB      0.0 MiB           feature_imp_fname_template = os.path.join(ub.output_dir, 'feature_importance_xgb_{}')
   523   2700.5 MiB      0.0 MiB           run_info['feature_imp_fname_template'] = feature_imp_fname_template
   524   2700.5 MiB      0.0 MiB           top_features_fname = feature_imp_fname_template.format('accumu_list.txt')
   525   2700.5 MiB      0.0 MiB           run_info['top_features_fname'] = top_features_fname
   526                             
   527                                     # if feature_down_select:
   528                                     #     ub.log('Feature down selected based on {}...'.format(top_features_fname))
   529                                     #     #todo may need to set a maxN for the number of features to use
   530                                     #
   531                                     #     with open(top_features_fname, 'r') as tf:
   532                                     #         selected_cols = [x.strip() for x in tf.readlines()]
   533                                     #     df_train = df_train[selected_cols]
   534                                     #     df_test = df_test[selected_cols]
   535                                     #     print df_train.shape
   536                                     #     print df_test.shape
   537                                     #     print df_train.columns
   538                             
   539   2700.5 MiB      0.0 MiB           feature_names = list(df_train.columns)
   540                             
   541   2700.5 MiB      0.0 MiB           postfix_train = '{}_{}of{}'.format(datetime_str, N_files_train, N_splits)
   542   2700.5 MiB      0.0 MiB           postfix_test = '{}_{}of{}'.format(datetime_str, N_files_test, N_splits)
   543                             
   544   2700.5 MiB      0.0 MiB           run_info['postfix_train'] = postfix_train
   545   2700.5 MiB      0.0 MiB           run_info['postfix_test'] = postfix_test
   546                             
   547   2700.5 MiB      0.0 MiB           run_info['testsize'] = testsize
   548                             
   549   2700.5 MiB      0.0 MiB           train_test_split_method = 1
   550                             
   551   2700.5 MiB      0.0 MiB           ub.log('Train/val split using testsize={}, split_method={}'.format(testsize, train_test_split_method))
   552   2700.5 MiB      0.0 MiB           if train_test_split_method == 1:
   553   2700.5 MiB      0.0 MiB               train_idx = shuffle_col[shuffle_col['Id'] > testsize].index
   554   2700.5 MiB      0.0 MiB               val_idx = shuffle_col[shuffle_col['Id'] <= testsize].index
   555   2700.5 MiB      0.0 MiB               ub.log('Done shuffling...')
   556   2700.5 MiB      0.0 MiB               print 'len of train_idx', len(train_idx)
   557   2700.5 MiB      0.0 MiB               print 'len of val_idx', len(val_idx)
   558   2700.5 MiB      0.0 MiB               y_train = y_total_df.loc[train_idx].values
   559   2700.5 MiB      0.0 MiB               y_val = y_total_df.loc[val_idx].values
   560                             
   561   3750.9 MiB   1050.4 MiB               xgtrain = xgb.DMatrix(df_train.loc[train_idx].values, y_train, feature_names=feature_names)
   562   3750.9 MiB      0.0 MiB               ub.log('Assembled xgtrain')
   563   3867.0 MiB    116.1 MiB               xgval = xgb.DMatrix(df_train.loc[val_idx].values, y_val, feature_names=feature_names)
   564   3867.0 MiB      0.0 MiB               ub.log('Assembled xgval')
   565   3867.0 MiB      0.0 MiB               del df_train
   566   3867.0 MiB      0.0 MiB               ub.log('Deleted df_train')
   567   2702.8 MiB  -1164.2 MiB               gc.collect()
   568                                     else:
   569                                         x_train, x_val, y_train, y_val = train_test_split(df_train.values, y_total, test_size=testsize)
   570                                         ub.log('Done shuffling...')
   571                                         print x_train.shape
   572                                         print x_val.shape
   573                                         del df_train
   574                                         gc.collect()
   575                                         ub.log('Deleted df_train')
   576                             
   577                                         xgtrain = xgb.DMatrix(x_train, y_train, feature_names=feature_names)
   578                                         ub.log('Assembled xgtrain')
   579                                         xgval = xgb.DMatrix(x_val, y_val, feature_names=feature_names)
   580                                         ub.log('Assembled xgval')
   581                                         del x_train
   582                                         del x_val
   583                                         gc.collect()
   584                             
   585   2702.8 MiB      0.0 MiB           fname_xgtrain = os.path.join(ub.processed_data_dir, 'xgtrain_{}.buffer'.format(postfix_train))
   586   2702.9 MiB      0.1 MiB           xgtrain.save_binary(fname_xgtrain)
   587   2702.9 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgtrain))
   588                             
   589   2702.9 MiB      0.0 MiB           fname_xgval = os.path.join(ub.processed_data_dir, 'xgval_{}.buffer'.format(postfix_train))
   590   2702.9 MiB      0.0 MiB           xgval.save_binary(fname_xgval)
   591   2702.9 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgval))
   592                             
   593   3867.3 MiB   1164.4 MiB           xgtest = xgb.DMatrix(df_test.values, feature_names=feature_names)
   594   3867.3 MiB      0.0 MiB           ub.log('Assembled xgtest')
   595   3867.3 MiB      0.0 MiB           fname_xgtest = os.path.join(ub.processed_data_dir, 'xgtest_{}.buffer'.format(postfix_test))
   596   3867.3 MiB      0.0 MiB           xgtest.save_binary(fname_xgtest)
   597   3867.3 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgtest))
   598                             
   599   3867.3 MiB      0.0 MiB           del df_test
   600   3867.3 MiB      0.0 MiB           gc.collect()
   601   3867.3 MiB      0.0 MiB           ub.log('Deleted df_test')
   602                             
   603   3867.3 MiB      0.0 MiB           print 'train and val set sizes'
   604   3867.3 MiB      0.0 MiB           print xgtrain.num_row(), xgtrain.num_col()
   605   3867.3 MiB      0.0 MiB           print xgval.num_row(), xgval.num_col()
   606   3867.3 MiB      0.0 MiB           run_info['xgtrain_nrows'] = xgtrain.num_row()
   607   3867.3 MiB      0.0 MiB           run_info['xgval_nrows'] = xgval.num_row()
   608                             
   609   3867.3 MiB      0.0 MiB           run_info['fname_xgtrain'] = fname_xgtrain
   610   3867.3 MiB      0.0 MiB           run_info['fname_xgval'] = fname_xgval
   611   3867.3 MiB      0.0 MiB           run_info['fname_xgtest'] = fname_xgtest
   612                             
   613   3867.3 MiB      0.0 MiB           fname_ytrain = os.path.join(ub.processed_data_dir, 'ytrain_{}.npy'.format(postfix_train))
   614   3867.3 MiB      0.0 MiB           fname_yval = os.path.join(ub.processed_data_dir, 'yval_{}.npy'.format(postfix_train))
   615                             
   616   3867.3 MiB      0.0 MiB           np.save(fname_ytrain, y_train)
   617   3867.3 MiB      0.0 MiB           ub.log('Saved ' + fname_ytrain)
   618                             
   619   3867.3 MiB      0.0 MiB           np.save(fname_yval, y_val)
   620   3867.3 MiB      0.0 MiB           ub.log('Saved ' + fname_yval)
   621                             
   622   3867.3 MiB      0.0 MiB           run_info['fname_ytrain'] = fname_ytrain
   623   3867.3 MiB      0.0 MiB           run_info['fname_yval'] = fname_yval
   624                             
   625   3867.3 MiB      0.0 MiB       if train_model:
   626   3867.3 MiB      0.0 MiB           assert compile_data or (run_info_fname is not None)
   627                             
   628   3867.3 MiB      0.0 MiB           run_info['cv'] = cv
   629   3867.3 MiB      0.0 MiB           run_info['analyze_feature_importance'] = analyze_feature_importance
   630   3867.3 MiB      0.0 MiB           run_info['early_stop_rounds'] = early_stop_rounds
   631                             
   632   3867.3 MiB      0.0 MiB           if not compile_data:
   633                                         ub.log('(train_model) Loading run info from {} ...'.format(run_info_fname))
   634                                         with open(run_info_fname, 'r') as fp:
   635                                             run_info = eval(fp.read())
   636                                         print json.dumps(run_info, indent=2)
   637                             
   638                                         run_info_fname = run_info_fname.replace('.txt', '_{}.txt'.format(datetime_str))
   639                             
   640                                         logged_home_dir = None
   641                                         if ub.home_dir not in run_info['fname_xgtrain']:
   642                                             for i in ub.possible_home_dirs:
   643                                                 if i in run_info['fname_xgtrain']:
   644                                                     logged_home_dir = i
   645                             
   646                                             for k in ['fname_xgtrain', 'fname_xgval', 'fname_ytrain', 'fname_yval']:
   647                                                 run_info[k] = run_info[k].replace(logged_home_dir, ub.home_dir)
   648                             
   649                                             if analyze_feature_importance:
   650                                                 for k in ['feature_imp_fname_template', 'top_feature_fname']:
   651                                                     run_info[k] = run_info[k].replace(logged_home_dir, ub.home_dir)
   652                             
   653                                         ub.log('Loading xgtrain data {} ...'.format(run_info['fname_xgtrain']))
   654                                         xgtrain = xgb.DMatrix(run_info['fname_xgtrain'])
   655                             
   656                                         ub.log('Loading xgval data {} ...'.format(run_info['fname_xgval']))
   657                                         xgval = xgb.DMatrix(run_info['fname_xgval'])
   658                             
   659                                         ub.log('Loading ytrain data {} ...'.format(run_info['fname_ytrain']))
   660                                         y_train = np.load(run_info['fname_ytrain'])
   661                             
   662                                         ub.log('Loading yval data {} ...'.format(run_info['fname_yval']))
   663                                         y_val = np.load(run_info['fname_yval'])
   664                             
   665   3867.3 MiB      0.0 MiB           prior = run_info['prior']
   666   3867.3 MiB      0.0 MiB           postfix_train = run_info['postfix_train']
   667                             
   668   3867.3 MiB      0.0 MiB           if xgb_params is None:
   669                                         xgb_params = get_params(bases_core=prior)
   670                             
   671   3867.3 MiB      0.0 MiB           xgb_params['base_score'] = prior  # n_positive / n_total
   672                                     # xgb_params['scale_pos_weight'] = (1.0 - prior) / prior
   673   3867.3 MiB      0.0 MiB           run_info['xgb_params'] = xgb_params
   674   3867.3 MiB      0.0 MiB           ub.log('Get xgb_params')
   675   3867.3 MiB      0.0 MiB           print xgb_params
   676                             
   677   3867.3 MiB      0.0 MiB           xgb_num_rounds = N_rounds
   678   3867.3 MiB      0.0 MiB           run_info['xgb_num_rounds'] = xgb_num_rounds
   679   3867.3 MiB      0.0 MiB           print 'xgb_num_rounds', xgb_num_rounds
   680   3867.3 MiB      0.0 MiB           if cv:
   681   3867.3 MiB      0.0 MiB               ub.log('Running cross validation...')
   682   3867.3 MiB      0.0 MiB               eval_hist = xgb.cv(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   683   3867.3 MiB      0.0 MiB                                  early_stopping_rounds=early_stop_rounds,
   684   3867.3 MiB      0.0 MiB                                  feval=ub.mcc_eval, maximize=True,
   685   3869.0 MiB      1.7 MiB                                  verbose_eval=1, show_stdv=True, nfold=3, seed=0, stratified=True)
   686   3869.0 MiB      0.0 MiB               print eval_hist
   687   3869.0 MiB      0.0 MiB               eval_hist_fname = os.path.join(ub.output_dir, 'cv_eval_history_{}.csv'.format(postfix_train))
   688   3869.0 MiB      0.0 MiB               if not compile_data:
   689                                             eval_hist_fname = eval_hist_fname.replace('.csv', '_{}.csv'.format(datetime_str))
   690                             
   691   3869.0 MiB      0.0 MiB               run_info['eval_hist_fname'] = eval_hist_fname
   692   3869.0 MiB      0.0 MiB               eval_hist.to_csv(eval_hist_fname)
   693                             
   694   3869.0 MiB      0.0 MiB               run_info['cv_score_test'] = eval_hist['test-MCC-mean'].max()
   695   3869.0 MiB      0.0 MiB               run_info['cv_score_train'] = eval_hist['train-MCC-mean'].max()
   696                             
   697                                     if 1:
   698   3869.0 MiB      0.0 MiB               ub.log('Running training...')
   699   3869.0 MiB      0.0 MiB               watchlist = [(xgtrain, 'train'), (xgval, 'eval')]
   700   3869.0 MiB      0.0 MiB               model = xgb.train(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   701   3869.0 MiB      0.0 MiB                                 early_stopping_rounds=early_stop_rounds,
   702   3869.0 MiB      0.0 MiB                                 feval=ub.mcc_eval, maximize=True,
   703   4918.9 MiB   1049.8 MiB                                 evals=watchlist, verbose_eval=True)
   704                             
   705   4918.9 MiB      0.0 MiB               model_fname = os.path.join(ub.output_dir, 'xbg_{}.model'.format(postfix_train))
   706   4918.9 MiB      0.0 MiB               if not compile_data:
   707                                             model_fname = model_fname.replace('.model', '_{}.model'.format(datetime_str))
   708   4918.9 MiB      0.0 MiB               ub.log('Saving model: {}...'.format(model_fname))
   709   4918.9 MiB      0.0 MiB               model.save_model(model_fname)
   710   4918.9 MiB      0.0 MiB               model.dump_model(model_fname + '.raw.txt')
   711   4918.9 MiB      0.0 MiB               run_info['model_fname'] = model_fname
   712                             
   713   4918.9 MiB      0.0 MiB               ntree_limit = model.best_iteration + 1
   714                             
   715   4918.9 MiB      0.0 MiB               ub.log('Predictions on xgtrain...', 'highlight')
   716   4918.9 MiB      0.0 MiB               predictions = model.predict(xgtrain, ntree_limit=ntree_limit)
   717                             
   718   4918.9 MiB      0.0 MiB               best_proba, best_mcc, y_pred = ub.eval_mcc(y_train, predictions, True)
   719   4918.9 MiB      0.0 MiB               mcc_official = matthews_corrcoef(y_train, y_pred)
   720   4918.9 MiB      0.0 MiB               print 'ntree limit:', ntree_limit
   721   4918.9 MiB      0.0 MiB               print 'best_mcc:', best_mcc
   722   4918.9 MiB      0.0 MiB               print 'best_proba:', best_proba
   723   4918.9 MiB      0.0 MiB               print 'matthews_corroef', mcc_official
   724                             
   725   4918.9 MiB      0.0 MiB               run_info['ntree_limit_train'] = ntree_limit
   726   4918.9 MiB      0.0 MiB               run_info['best_mcc_train'] = best_mcc
   727   4918.9 MiB      0.0 MiB               run_info['best_proba_train'] = best_proba
   728   4918.9 MiB      0.0 MiB               run_info['mcc_official_train'] = mcc_official
   729                             
   730   4918.9 MiB      0.0 MiB               ub.log('Predictions on xgval...', 'highlight')
   731   4918.9 MiB      0.0 MiB               predictions = model.predict(xgval, ntree_limit=ntree_limit)
   732                             
   733   4918.9 MiB      0.0 MiB               best_proba, best_mcc, y_pred = ub.eval_mcc(y_val, predictions, True)
   734   4918.9 MiB      0.0 MiB               mcc_official = matthews_corrcoef(y_val, y_pred)
   735   4918.9 MiB      0.0 MiB               print 'ntree limit:', ntree_limit
   736   4918.9 MiB      0.0 MiB               print 'best_mcc:', best_mcc
   737   4918.9 MiB      0.0 MiB               print 'best_proba:', best_proba
   738   4918.9 MiB      0.0 MiB               print 'matthews_corroef', mcc_official
   739                             
   740   4918.9 MiB      0.0 MiB               run_info['ntree_limit_val'] = ntree_limit
   741   4918.9 MiB      0.0 MiB               run_info['best_mcc_val'] = best_mcc
   742   4918.9 MiB      0.0 MiB               run_info['best_proba_val'] = best_proba
   743   4918.9 MiB      0.0 MiB               run_info['mcc_official_val'] = mcc_official
   744                             
   745   4918.9 MiB      0.0 MiB               if analyze_feature_importance:
   746                                             ub.log('Analyzing feature importance...')
   747                                             feature_imp_fname_template = run_info['feature_imp_fname_template']
   748                                             top_features_fname = run_info['top_features_fname']
   749                                             feature_imp_fname = feature_imp_fname_template.format(postfix_train)
   750                                             imp = model.get_fscore()
   751                                             imp = sorted(imp.items(), key=operator.itemgetter(1))
   752                                             imp_df = pd.DataFrame(imp, columns=['feature', 'fscore'])
   753                                             imp_df['fscore'] = imp_df['fscore'] / imp_df['fscore'].sum()
   754                             
   755                                             ub.log('Output result csv to {}...'.format(feature_imp_fname + '.csv'))
   756                                             imp_df.to_csv(feature_imp_fname + '.csv')
   757                             
   758                                             plt.figure()
   759                                             imp_df.plot(kind='barh', x='feature', y='fscore', legend=False, figsize=(6, 10))
   760                                             plt.title('XGBoost Feature Importance @ {}'.format(postfix_train))
   761                                             plt.xlabel('relative importance')
   762                                             plt.gcf().savefig(feature_imp_fname + '.png', bbox_inches='tight')
   763                             
   764                                             feature_lists = glob.glob(feature_imp_fname_template.replace('{}', '*.csv'))
   765                                             ub.log('Aggregating previous analysis results...')
   766                                             print feature_lists
   767                                             features_df = None
   768                                             if feature_lists:
   769                                                 for f_l in feature_lists:
   770                                                     tmp_df = pd.read_csv(f_l, index_col=0)
   771                                                     if features_df is None:
   772                                                         features_df = tmp_df
   773                                                     else:
   774                                                         features_df = pd.concat([features_df, tmp_df], ignore_index=True)
   775                             
   776                                             f_df = features_df.groupby(['feature']).mean().reset_index()
   777                                             f_df['overall'] = True
   778                                             imp_df['overall'] = False
   779                                             merged_df = pd.concat([imp_df, f_df]).sort_values(by=['overall', 'fscore'], ascending=False)
   780                                             sns_plot = sns.factorplot(y='feature', x='fscore', data=merged_df, hue='overall', kind='bar',
   781                                                                       hue_order=[True, False], size=20, aspect=0.5)
   782                                             sns_plot.savefig(feature_imp_fname + '_overall.png', bbox_inches='tight')
   783                             
   784                                             ub.log('Output overall result csv to {}...'.format(top_features_fname))
   785                                             with open(top_features_fname, 'w') as tf:
   786                                                 tf.write('\n'.join(list(set(merged_df.feature.values))))
   787                             
   788                                             merged_df.to_csv(top_features_fname.replace('.txt', '_df.csv'), index=False)
   789                             
   790                             
   791                                             # json has trouble serializing np.float32
   792                                             # with open(run_info_fname, 'w') as fp:
   793                                             #    json.dump(run_info, fp)
   794                             
   795   4918.9 MiB      0.0 MiB       if make_submission:
   796                                     assert (run_info_fname is not None)
   797                             
   798                                     if not train_model and not compile_data:
   799                                         ub.log('(make_submission) Loading run info from {} ...'.format(run_info_fname))
   800                                         with open(run_info_fname, 'r') as fp:
   801                                             run_info = eval(fp.read())
   802                                         print json.dumps(run_info, indent=2)
   803                             
   804                                     if ub.home_dir not in run_info['model_fname']:
   805                                         for i in ub.possible_home_dirs:
   806                                             if i in run_info['model_fname']:
   807                                                 logged_home_dir = i
   808                             
   809                                     for k in ['fname_xgtest', 'model_fname']:
   810                                         if ub.home_dir not in run_info[k]:
   811                                             for i in ub.possible_home_dirs:
   812                                                 if i in run_info[k]:
   813                                                     run_info[k] = run_info[k].replace(i, ub.home_dir)
   814                             
   815                                     if not train_model:
   816                                         model = xgb.Booster()
   817                                         ub.log('Loading model {} ...'.format(run_info['model_fname']))
   818                                         model.load_model(run_info['model_fname'])
   819                             
   820                                     if not compile_data:
   821                                         ub.log('Loading xgtest data {} ...'.format(run_info['fname_xgtest']))
   822                                         xgtest = xgb.DMatrix(run_info['fname_xgtest'])
   823                             
   824                                     ub.log('XGB making predictions...')
   825                             
   826                                     postfix_train = run_info['postfix_train']
   827                             
   828                                     ypred = model.predict(xgtest, ntree_limit=run_info['ntree_limit_train'])
   829                                     nrows = len(ypred)
   830                             
   831                                     sample = pd.read_csv(os.path.join(ub.data_dir, 'sample_submission.csv'), nrows=nrows)
   832                                     sample['Response'] = ypred
   833                                     fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}_prob.csv".format(postfix_train))
   834                                     if not compile_data:
   835                                         fname_output = fname_output.replace('.csv', '_{}.csv'.format(datetime_str))
   836                                     ub.log('Writing output file (raw proba) {} ...'.format(fname_output))
   837                                     sample.to_csv(fname_output, index=False)
   838                             
   839                                     best_proba = (run_info['best_proba_train'] + run_info['best_proba_val']) / 2.0
   840                                     ub.log('Using threshold: best_proba == {}'.format(best_proba))
   841                                     sample['Response'] = (ypred > best_proba).astype(int)
   842                                     fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}.csv".format(postfix_train))
   843                                     if not compile_data:
   844                                         fname_output = fname_output.replace('.csv', '_{}.csv'.format(datetime_str))
   845                                     ub.log('Writing output file {} ...'.format(fname_output))
   846                                     sample.to_csv(fname_output, index=False)
   847                             
   848   4918.9 MiB      0.0 MiB       if compile_data or train_model:
   849   4918.9 MiB      0.0 MiB           if compile_data:
   850   4918.9 MiB      0.0 MiB               if run_info_fname is not None:
   851                                             ub.log('Ignore input run_info_fname {}'.format(run_info_fname))
   852   4918.9 MiB      0.0 MiB               run_info_fname = os.path.join(ub.output_dir, 'run_info_{}.txt'.format(postfix_train))
   853                                     # else run_info_fname is an input parameter
   854   4918.9 MiB      0.0 MiB           ub.log('Saving run_info into {}'.format(run_info_fname))
   855   4918.9 MiB      0.0 MiB           print pd.Series(run_info)
   856   4918.9 MiB      0.0 MiB           with open(run_info_fname, 'w') as fp:
   857   4918.9 MiB      0.0 MiB               fp.write(str(run_info))
   858                             
   859   4918.9 MiB      0.0 MiB       return run_info_fname


