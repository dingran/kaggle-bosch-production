Filename: main_bosch.py

Line #    Mem usage    Increment   Line Contents
================================================
   364    171.1 MiB      0.0 MiB   @profile(stream=f_mem)
   365                             def main(run_info_fname=None,
   366                                      compile_data=False,
   367                                      train_model=False,
   368                                      make_submission=False,
   369                                      N_start=None,
   370                                      N_files_train=1,
   371                                      N_files_test=1,
   372                                      original_cols_only=False,
   373                                      disable_id_diff_cols=False,
   374                             
   375                                      feature_list_file=None,
   376                                      analyze_feature_importance=False,
   377                                      cv=False,
   378                                      # if True running cross validation if False, run single model training session and importance analysis
   379                                      early_stop_rounds=10,
   380                                      N_rounds=1000,
   381                                      testsize=0.1,
   382                                      xgb_params=None,
   383                             
   384                                      skip_date_csv=False,
   385                                      skip_num_csv=False,
   386                                      skip_cat_csv=False
   387                                      ):
   388    171.1 MiB      0.0 MiB       datetime_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
   389                             
   390    171.1 MiB      0.0 MiB       if compile_data:
   391    171.1 MiB      0.0 MiB           run_info = dict()
   392    171.1 MiB      0.0 MiB           N_splits = ub.N_split
   393    171.1 MiB      0.0 MiB           if N_files_train > N_splits:
   394                                         N_files_train = N_splits
   395    171.1 MiB      0.0 MiB           if N_files_test > N_splits:
   396                                         N_files_test = N_splits
   397                             
   398    171.1 MiB      0.0 MiB           if analyze_feature_importance and (feature_list_file is not None):
   399                                         assert 0
   400                             
   401    171.1 MiB      0.0 MiB           run_info['compile_data'] = compile_data
   402    171.1 MiB      0.0 MiB           run_info['N_splits'] = N_splits
   403    171.1 MiB      0.0 MiB           run_info['N_files_train'] = N_files_train
   404    171.1 MiB      0.0 MiB           run_info['N_files_test'] = N_files_test
   405    171.1 MiB      0.0 MiB           run_info['original_cols_only'] = original_cols_only
   406    171.1 MiB      0.0 MiB           run_info['disable_id_diff_cols'] =disable_id_diff_cols
   407    171.1 MiB      0.0 MiB           run_info['features_list_file'] = feature_list_file
   408    171.1 MiB      0.0 MiB           run_info['skip_date_csv'] = skip_date_csv
   409    171.1 MiB      0.0 MiB           run_info['skip_num_csv'] = skip_num_csv
   410    171.1 MiB      0.0 MiB           run_info['skip_cat_csv'] = skip_cat_csv
   411                             
   412    171.1 MiB      0.0 MiB           df_train, n_start = load_data(load_test=False, N_start=N_start, N_read=N_files_train, N_split=N_splits,
   413    171.1 MiB      0.0 MiB                                         original_cols_only=original_cols_only,
   414    171.1 MiB      0.0 MiB                                         feature_list_file=feature_list_file,
   415    171.1 MiB      0.0 MiB                                         load_categorical_csv=(not skip_cat_csv),
   416    171.1 MiB      0.0 MiB                                         load_date_csv=(not skip_date_csv),
   417  14867.3 MiB  14696.2 MiB                                         load_numerical_csv=(not skip_num_csv))
   418  14867.3 MiB      0.0 MiB           df_test, _ = load_data(load_test=True, N_start=n_start, N_read=N_files_test, N_split=N_splits,
   419  14867.3 MiB      0.0 MiB                                  original_cols_only=original_cols_only,
   420  14867.3 MiB      0.0 MiB                                  feature_list_file=feature_list_file,
   421  14867.3 MiB      0.0 MiB                                  load_categorical_csv=(not skip_cat_csv),
   422  14867.3 MiB      0.0 MiB                                  load_date_csv=(not skip_date_csv),
   423  30051.4 MiB  15184.1 MiB                                  load_numerical_csv=(not skip_num_csv))
   424                             
   425  30051.4 MiB      0.0 MiB           if not disable_id_diff_cols:
   426  30051.4 MiB      0.0 MiB               diff_period = 1
   427  30051.4 MiB      0.0 MiB               ub.log('generating id diff columns based on various dates columns: diff_period = {}'.format(diff_period))
   428  30051.4 MiB      0.0 MiB               dates_cols = [x for x in list(df_train.columns) if ('start_date' in x or 'end_date' in x) and ('rank' not in x)]
   429                             
   430                                         # print dates_cols
   431                             
   432  39119.6 MiB   9068.3 MiB               df_datesort = pd.concat([df_train[['Id'] + dates_cols], df_test[['Id'] + dates_cols]],
   433  39119.6 MiB      0.0 MiB                                       ignore_index=True)
   434  39119.6 MiB      0.0 MiB               gc.collect()
   435                             
   436  50902.5 MiB  11782.9 MiB               for c in dates_cols:
   437                                             # print c
   438  49790.1 MiB  -1112.4 MiB                   df_datesort.sort_values(by=[c, 'Id'], inplace=True)
   439  49790.1 MiB      0.0 MiB                   df_datesort[c + '_id_diff'] = df_datesort['Id'].diff(diff_period).fillna(999999).astype(int)
   440  49790.1 MiB      0.0 MiB                   df_datesort[c + '_id_diff_reverse'] = df_datesort['Id'].iloc[::-1].diff().fillna(999999).astype(int)
   441                                             df_datesort[c + '_id_diff_magic'] = \
   442  49538.4 MiB   -251.8 MiB                       1 + 2 * (df_datesort[c + '_id_diff'] > 1) + 1 * (df_datesort[c + '_id_diff_reverse'] < -1)
   443                             
   444  50902.5 MiB   1364.1 MiB                   df_datesort.drop([c], axis=1, inplace=True)
   445                             
   446  50417.3 MiB   -485.2 MiB               df_datesort.head(n=N_DEBUG_LINES).to_csv(os.path.join(ub.data_dir, 'df_datesort_debug.csv'))
   447                             
   448  40579.9 MiB  -9837.4 MiB               gc.collect()
   449  48231.5 MiB   7651.5 MiB               df_train = df_train.merge(df_datesort, on='Id')
   450                             
   451  37414.5 MiB -10817.0 MiB               gc.collect()
   452  46476.0 MiB   9061.5 MiB               df_test = df_test.merge(df_datesort, on='Id')
   453                             
   454  48532.8 MiB   2056.8 MiB           df_test['Response'] = 0
   455  48543.1 MiB     10.3 MiB           df_train.head(n=N_DEBUG_LINES).to_csv(os.path.join(ub.data_dir, 'df_train_debug.csv'))
   456  48543.1 MiB      0.0 MiB           df_test.head(n=N_DEBUG_LINES).to_csv(os.path.join(ub.data_dir, 'df_test_debug.csv'))
   457                             
   458  48543.1 MiB      0.0 MiB           print df_train.shape
   459  48543.1 MiB      0.0 MiB           print df_test.shape
   460  38014.0 MiB -10529.1 MiB           gc.collect()
   461                             
   462                                     # if N_files_train == N_splits:
   463                                     #     split_data(df_train,
   464                                     #                output_fname_template=os.path.join(ub.processed_data_dir, 'df_train_preprocessed_part{}.csv'))
   465                                     # if N_files_test == N_splits:
   466                                     #     split_data(df_test,
   467                                     #                output_fname_template=os.path.join(ub.processed_data_dir, 'df_test_preprocessed_part{}.csv'))
   468                             
   469  38014.0 MiB      0.0 MiB           fillna = True
   470  38014.0 MiB      0.0 MiB           run_info['fillna'] = fillna
   471  38014.0 MiB      0.0 MiB           if fillna:
   472  38014.0 MiB      0.0 MiB               ub.log('Filling na...')
   473  38014.0 MiB      0.0 MiB               for df in [df_train, df_test]:
   474  41926.5 MiB   3912.5 MiB                   cols_full_flag = df.isnull().any()
   475  41926.5 MiB      0.0 MiB                   non_full_cols = list(cols_full_flag[cols_full_flag].index)
   476  41926.5 MiB      0.0 MiB                   print 'Non-full columns: {}'.format(len(non_full_cols))
   477                                             # print non_full_cols
   478                             
   479                                             if 1:
   480  41926.9 MiB      0.3 MiB                       df.fillna(-999999, inplace=True)
   481                                             else:
   482                                                 # print df.PersonalField7.unique()
   483                                                 for c in non_full_cols:
   484                                                     if len(df[c].unique()) > 2:
   485                                                         most_frequent_items = df[c].value_counts().idxmax()
   486                                                         print c, most_frequent_items
   487                                                         df[c].fillna(value=most_frequent_items, inplace=True)
   488                                                     else:  # if it is only a pair of value [somthing, nan] then fill in "missing"
   489                                                         df[c].fillna(value='missing', inplace=True)
   490                                                         print c, df[c].unique()
   491                             
   492  41926.9 MiB      0.0 MiB                   cols_full_flag = df.isnull().any()
   493  41926.9 MiB      0.0 MiB                   non_full_cols = list(cols_full_flag[cols_full_flag].index)
   494  41926.9 MiB      0.0 MiB                   print 'Non-full columns: {}'.format(len(non_full_cols))
   495                             
   496  41926.9 MiB      0.0 MiB                   le = LabelEncoder()
   497  41927.4 MiB      0.5 MiB                   obj_cols = df.select_dtypes(include=['object']).columns
   498                                             # print 'Obj columns: ', list(obj_cols)
   499  41927.4 MiB      0.0 MiB                   for col in obj_cols:
   500  41925.3 MiB     -2.1 MiB                       df[col] = le.fit_transform(df[col])
   501                             
   502  33874.6 MiB  -8050.8 MiB               df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   503  33875.8 MiB      1.3 MiB               df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   504                             
   505  33875.8 MiB      0.0 MiB           ub.log('Dropping Id and Response columns...')
   506  33875.8 MiB      0.0 MiB           columns_to_drop = ['Id', 'Response']
   507  37888.2 MiB   4012.4 MiB           shuffle_col = df_train[['Id']].copy()
   508  37888.2 MiB      0.0 MiB           shuffle_col['Id'] = np.random.rand(len(shuffle_col))
   509                             
   510  37888.2 MiB      0.0 MiB           y_total_df = df_train['Response']
   511  37888.2 MiB      0.0 MiB           y_total = df_train['Response'].values
   512  43310.5 MiB   5422.3 MiB           df_train.drop(columns_to_drop, axis=1, inplace=True)
   513  47383.6 MiB   4073.1 MiB           df_test.drop(columns_to_drop, axis=1, inplace=True)
   514                             
   515  47383.6 MiB      0.0 MiB           print df_train.shape
   516  47383.6 MiB      0.0 MiB           print df_test.shape
   517  47383.6 MiB      0.0 MiB           prior = np.sum(y_total) / (1. * len(y_total))
   518  47383.6 MiB      0.0 MiB           print 'prior: {}'.format(prior)
   519  47383.6 MiB      0.0 MiB           run_info['prior'] = prior
   520                             
   521  47312.7 MiB    -70.8 MiB           gc.collect()
   522                             
   523  47312.7 MiB      0.0 MiB           feature_imp_fname_template = os.path.join(ub.output_dir, 'feature_importance_xgb_{}')
   524  47312.7 MiB      0.0 MiB           run_info['feature_imp_fname_template'] = feature_imp_fname_template
   525  47312.7 MiB      0.0 MiB           top_features_fname = feature_imp_fname_template.format('accumu_list.txt')
   526  47312.7 MiB      0.0 MiB           run_info['top_features_fname'] = top_features_fname
   527                             
   528                                     # if feature_down_select:
   529                                     #     ub.log('Feature down selected based on {}...'.format(top_features_fname))
   530                                     #     #todo may need to set a maxN for the number of features to use
   531                                     #
   532                                     #     with open(top_features_fname, 'r') as tf:
   533                                     #         selected_cols = [x.strip() for x in tf.readlines()]
   534                                     #     df_train = df_train[selected_cols]
   535                                     #     df_test = df_test[selected_cols]
   536                                     #     print df_train.shape
   537                                     #     print df_test.shape
   538                                     #     print df_train.columns
   539                             
   540  47312.7 MiB      0.0 MiB           feature_names = list(df_train.columns)
   541                             
   542  47312.7 MiB      0.0 MiB           postfix_train = '{}_{}of{}'.format(datetime_str, N_files_train, N_splits)
   543  47312.7 MiB      0.0 MiB           postfix_test = '{}_{}of{}'.format(datetime_str, N_files_test, N_splits)
   544                             
   545  47312.7 MiB      0.0 MiB           run_info['postfix_train'] = postfix_train
   546  47312.7 MiB      0.0 MiB           run_info['postfix_test'] = postfix_test
   547                             
   548  47312.7 MiB      0.0 MiB           run_info['testsize'] = testsize
   549                             
   550  47312.7 MiB      0.0 MiB           train_test_split_method = 1
   551                             
   552  47312.7 MiB      0.0 MiB           ub.log('Train/val split using testsize={}, split_method={}'.format(testsize, train_test_split_method))
   553  47312.7 MiB      0.0 MiB           if train_test_split_method == 1:
   554  47312.7 MiB      0.0 MiB               train_idx = shuffle_col[shuffle_col['Id'] > testsize].index
   555  47312.7 MiB      0.0 MiB               val_idx = shuffle_col[shuffle_col['Id'] <= testsize].index
   556  47312.7 MiB      0.0 MiB               ub.log('Done shuffling...')
   557  47312.7 MiB      0.0 MiB               print 'len of train_idx', len(train_idx)
   558  47312.7 MiB      0.0 MiB               print 'len of val_idx', len(val_idx)
   559  47312.7 MiB      0.0 MiB               y_train = y_total_df.loc[train_idx].values
   560  47312.7 MiB      0.0 MiB               y_val = y_total_df.loc[val_idx].values
   561                             
   562  39702.3 MiB  -7610.4 MiB               xgtrain = xgb.DMatrix(df_train.loc[train_idx].values, y_train, feature_names=feature_names)
   563  39702.7 MiB      0.4 MiB               ub.log('Assembled xgtrain')
   564  42087.9 MiB   2385.1 MiB               xgval = xgb.DMatrix(df_train.loc[val_idx].values, y_val, feature_names=feature_names)
   565  42087.9 MiB      0.0 MiB               ub.log('Assembled xgval')
   566  42087.9 MiB      0.0 MiB               del df_train
   567  42087.9 MiB      0.0 MiB               ub.log('Deleted df_train')
   568  30608.1 MiB -11479.8 MiB               gc.collect()
   569                                     else:
   570                                         x_train, x_val, y_train, y_val = train_test_split(df_train.values, y_total, test_size=testsize)
   571                                         ub.log('Done shuffling...')
   572                                         print x_train.shape
   573                                         print x_val.shape
   574                                         del df_train
   575                                         gc.collect()
   576                                         ub.log('Deleted df_train')
   577                             
   578                                         xgtrain = xgb.DMatrix(x_train, y_train, feature_names=feature_names)
   579                                         ub.log('Assembled xgtrain')
   580                                         xgval = xgb.DMatrix(x_val, y_val, feature_names=feature_names)
   581                                         ub.log('Assembled xgval')
   582                                         del x_train
   583                                         del x_val
   584                                         gc.collect()
   585                             
   586  30608.1 MiB      0.0 MiB           fname_xgtrain = os.path.join(ub.processed_data_dir, 'xgtrain_{}.buffer'.format(postfix_train))
   587  31032.5 MiB    424.4 MiB           xgtrain.save_binary(fname_xgtrain)
   588  31032.5 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgtrain))
   589                             
   590  31032.5 MiB      0.0 MiB           fname_xgval = os.path.join(ub.processed_data_dir, 'xgval_{}.buffer'.format(postfix_train))
   591  31032.5 MiB      0.0 MiB           xgval.save_binary(fname_xgval)
   592  31032.5 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgval))
   593                             
   594  40251.0 MiB   9218.5 MiB           xgtest = xgb.DMatrix(df_test.values, feature_names=feature_names)
   595  40251.0 MiB      0.0 MiB           ub.log('Assembled xgtest')
   596  40251.0 MiB      0.0 MiB           fname_xgtest = os.path.join(ub.processed_data_dir, 'xgtest_{}.buffer'.format(postfix_test))
   597  40287.3 MiB     36.3 MiB           xgtest.save_binary(fname_xgtest)
   598  40287.3 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgtest))
   599                             
   600  40287.3 MiB      0.0 MiB           del df_test
   601  40291.7 MiB      4.4 MiB           gc.collect()
   602  40291.7 MiB      0.0 MiB           ub.log('Deleted df_test')
   603                             
   604  40291.7 MiB      0.0 MiB           print 'train and val set sizes'
   605  40291.7 MiB      0.0 MiB           print xgtrain.num_row(), xgtrain.num_col()
   606  40291.7 MiB      0.0 MiB           print xgval.num_row(), xgval.num_col()
   607  40291.7 MiB      0.0 MiB           run_info['xgtrain_nrows'] = xgtrain.num_row()
   608  40291.7 MiB      0.0 MiB           run_info['xgval_nrows'] = xgval.num_row()
   609                             
   610  40291.7 MiB      0.0 MiB           run_info['fname_xgtrain'] = fname_xgtrain
   611  40291.7 MiB      0.0 MiB           run_info['fname_xgval'] = fname_xgval
   612  40291.7 MiB      0.0 MiB           run_info['fname_xgtest'] = fname_xgtest
   613                             
   614  40291.7 MiB      0.0 MiB           fname_ytrain = os.path.join(ub.processed_data_dir, 'ytrain_{}.npy'.format(postfix_train))
   615  40291.7 MiB      0.0 MiB           fname_yval = os.path.join(ub.processed_data_dir, 'yval_{}.npy'.format(postfix_train))
   616                             
   617  40292.7 MiB      1.0 MiB           np.save(fname_ytrain, y_train)
   618  40292.7 MiB      0.0 MiB           ub.log('Saved ' + fname_ytrain)
   619                             
   620  40292.7 MiB      0.0 MiB           np.save(fname_yval, y_val)
   621  40292.7 MiB      0.0 MiB           ub.log('Saved ' + fname_yval)
   622                             
   623  40292.7 MiB      0.0 MiB           run_info['fname_ytrain'] = fname_ytrain
   624  40292.7 MiB      0.0 MiB           run_info['fname_yval'] = fname_yval
   625                             
   626  40292.7 MiB      0.0 MiB       if train_model:
   627  40292.7 MiB      0.0 MiB           assert compile_data or (run_info_fname is not None)
   628                             
   629  40292.7 MiB      0.0 MiB           run_info['cv'] = cv
   630  40292.7 MiB      0.0 MiB           run_info['analyze_feature_importance'] = analyze_feature_importance
   631  40292.7 MiB      0.0 MiB           run_info['early_stop_rounds'] = early_stop_rounds
   632                             
   633  40292.7 MiB      0.0 MiB           if not compile_data:
   634                                         ub.log('(train_model) Loading run info from {} ...'.format(run_info_fname))
   635                                         with open(run_info_fname, 'r') as fp:
   636                                             run_info = eval(fp.read())
   637                                         print json.dumps(run_info, indent=2)
   638                             
   639                                         run_info_fname = run_info_fname.replace('.txt', '_{}.txt'.format(datetime_str))
   640                             
   641                                         logged_home_dir = None
   642                                         if ub.home_dir not in run_info['fname_xgtrain']:
   643                                             for i in ub.possible_home_dirs:
   644                                                 if i in run_info['fname_xgtrain']:
   645                                                     logged_home_dir = i
   646                             
   647                                             for k in ['fname_xgtrain', 'fname_xgval', 'fname_ytrain', 'fname_yval']:
   648                                                 run_info[k] = run_info[k].replace(logged_home_dir, ub.home_dir)
   649                             
   650                                             if analyze_feature_importance:
   651                                                 for k in ['feature_imp_fname_template', 'top_feature_fname']:
   652                                                     run_info[k] = run_info[k].replace(logged_home_dir, ub.home_dir)
   653                             
   654                                         ub.log('Loading xgtrain data {} ...'.format(run_info['fname_xgtrain']))
   655                                         xgtrain = xgb.DMatrix(run_info['fname_xgtrain'])
   656                             
   657                                         ub.log('Loading xgval data {} ...'.format(run_info['fname_xgval']))
   658                                         xgval = xgb.DMatrix(run_info['fname_xgval'])
   659                             
   660                                         ub.log('Loading ytrain data {} ...'.format(run_info['fname_ytrain']))
   661                                         y_train = np.load(run_info['fname_ytrain'])
   662                             
   663                                         ub.log('Loading yval data {} ...'.format(run_info['fname_yval']))
   664                                         y_val = np.load(run_info['fname_yval'])
   665                             
   666  40292.7 MiB      0.0 MiB           prior = run_info['prior']
   667  40292.7 MiB      0.0 MiB           postfix_train = run_info['postfix_train']
   668                             
   669  40292.7 MiB      0.0 MiB           if xgb_params is None:
   670                                         xgb_params = get_params(bases_core=prior)
   671                             
   672  40292.7 MiB      0.0 MiB           xgb_params['base_score'] = prior  # n_positive / n_total
   673                                     # xgb_params['scale_pos_weight'] = (1.0 - prior) / prior
   674  40292.7 MiB      0.0 MiB           run_info['xgb_params'] = xgb_params
   675  40292.7 MiB      0.0 MiB           ub.log('Get xgb_params')
   676  40292.7 MiB      0.0 MiB           print xgb_params
   677                             
   678  40292.7 MiB      0.0 MiB           xgb_num_rounds = N_rounds
   679  40292.7 MiB      0.0 MiB           run_info['xgb_num_rounds'] = xgb_num_rounds
   680  40292.7 MiB      0.0 MiB           print 'xgb_num_rounds', xgb_num_rounds
   681  40292.7 MiB      0.0 MiB           if cv:
   682                                         ub.log('Running cross validation...')
   683                                         eval_hist = xgb.cv(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   684                                                            early_stopping_rounds=early_stop_rounds,
   685                                                            feval=ub.mcc_eval, maximize=True,
   686                                                            verbose_eval=1, show_stdv=True, nfold=3, seed=0, stratified=True)
   687                                         print eval_hist
   688                                         eval_hist_fname = os.path.join(ub.output_dir, 'cv_eval_history_{}.csv'.format(postfix_train))
   689                                         if not compile_data:
   690                                             eval_hist_fname = eval_hist_fname.replace('.csv', '_{}.csv'.format(datetime_str))
   691                             
   692                                         run_info['eval_hist_fname'] = eval_hist_fname
   693                                         eval_hist.to_csv(eval_hist_fname)
   694                             
   695                                         run_info['cv_score_test'] = eval_hist['test-MCC-mean'].max()
   696                                         run_info['cv_score_train'] = eval_hist['train-MCC-mean'].max()
   697                             
   698                                     if 1:
   699  40292.7 MiB      0.0 MiB               ub.log('Running training...')
   700  40292.7 MiB      0.0 MiB               watchlist = [(xgtrain, 'train'), (xgval, 'eval')]
   701  40292.7 MiB      0.0 MiB               model = xgb.train(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   702  40292.7 MiB      0.0 MiB                                 early_stopping_rounds=early_stop_rounds,
   703  40292.7 MiB      0.0 MiB                                 feval=ub.mcc_eval, maximize=True,
   704  50694.9 MiB  10402.2 MiB                                 evals=watchlist, verbose_eval=True)
   705                             
   706  50694.9 MiB      0.0 MiB               model_fname = os.path.join(ub.output_dir, 'xbg_{}.model'.format(postfix_train))
   707  50694.9 MiB      0.0 MiB               if not compile_data:
   708                                             model_fname = model_fname.replace('.model', '_{}.model'.format(datetime_str))
   709  50694.9 MiB      0.0 MiB               ub.log('Saving model: {}...'.format(model_fname))
   710  50694.9 MiB      0.0 MiB               model.save_model(model_fname)
   711  50695.0 MiB      0.1 MiB               model.dump_model(model_fname + '.raw.txt')
   712  50695.0 MiB      0.0 MiB               run_info['model_fname'] = model_fname
   713                             
   714  50695.0 MiB      0.0 MiB               ntree_limit = model.best_iteration + 1
   715                             
   716  50695.0 MiB      0.0 MiB               ub.log('Predictions on xgtrain...', 'highlight')
   717  50695.0 MiB      0.0 MiB               predictions = model.predict(xgtrain, ntree_limit=ntree_limit)
   718                             
   719  50697.1 MiB      2.1 MiB               best_proba, best_mcc, y_pred = ub.eval_mcc(y_train, predictions, True)
   720  50706.1 MiB      9.0 MiB               mcc_official = matthews_corrcoef(y_train, y_pred)
   721  50706.1 MiB      0.0 MiB               print 'ntree limit:', ntree_limit
   722  50706.1 MiB      0.0 MiB               print 'best_mcc:', best_mcc
   723  50706.1 MiB      0.0 MiB               print 'best_proba:', best_proba
   724  50706.1 MiB      0.0 MiB               print 'matthews_corroef', mcc_official
   725                             
   726  50706.1 MiB      0.0 MiB               run_info['ntree_limit_train'] = ntree_limit
   727  50706.1 MiB      0.0 MiB               run_info['best_mcc_train'] = best_mcc
   728  50706.1 MiB      0.0 MiB               run_info['best_proba_train'] = best_proba
   729  50706.1 MiB      0.0 MiB               run_info['mcc_official_train'] = mcc_official
   730                             
   731  50706.1 MiB      0.0 MiB               ub.log('Predictions on xgval...', 'highlight')
   732  50706.1 MiB      0.0 MiB               predictions = model.predict(xgval, ntree_limit=ntree_limit)
   733                             
   734  50706.1 MiB      0.0 MiB               best_proba, best_mcc, y_pred = ub.eval_mcc(y_val, predictions, True)
   735  50707.4 MiB      1.3 MiB               mcc_official = matthews_corrcoef(y_val, y_pred)
   736  50707.4 MiB      0.0 MiB               print 'ntree limit:', ntree_limit
   737  50707.4 MiB      0.0 MiB               print 'best_mcc:', best_mcc
   738  50707.4 MiB      0.0 MiB               print 'best_proba:', best_proba
   739  50707.4 MiB      0.0 MiB               print 'matthews_corroef', mcc_official
   740                             
   741  50707.4 MiB      0.0 MiB               run_info['ntree_limit_val'] = ntree_limit
   742  50707.4 MiB      0.0 MiB               run_info['best_mcc_val'] = best_mcc
   743  50707.4 MiB      0.0 MiB               run_info['best_proba_val'] = best_proba
   744  50707.4 MiB      0.0 MiB               run_info['mcc_official_val'] = mcc_official
   745                             
   746  50707.4 MiB      0.0 MiB               if analyze_feature_importance:
   747  50707.4 MiB      0.0 MiB                   ub.log('Analyzing feature importance...')
   748  50707.4 MiB      0.0 MiB                   feature_imp_fname_template = run_info['feature_imp_fname_template']
   749  50707.4 MiB      0.0 MiB                   top_features_fname = run_info['top_features_fname']
   750  50707.4 MiB      0.0 MiB                   feature_imp_fname = feature_imp_fname_template.format(postfix_train)
   751  50707.4 MiB      0.0 MiB                   imp = model.get_fscore()
   752  50707.4 MiB      0.0 MiB                   imp = sorted(imp.items(), key=operator.itemgetter(1))
   753  50708.2 MiB      0.8 MiB                   imp_df = pd.DataFrame(imp, columns=['feature', 'fscore'])
   754  50709.3 MiB      1.1 MiB                   imp_df['fscore'] = imp_df['fscore'] / imp_df['fscore'].sum()
   755                             
   756  50709.3 MiB      0.0 MiB                   ub.log('Output result csv to {}...'.format(feature_imp_fname + '.csv'))
   757  50709.3 MiB      0.0 MiB                   imp_df.to_csv(feature_imp_fname + '.csv')
   758                             
   759  50733.1 MiB     23.8 MiB                   plt.figure()
   760  50746.9 MiB     13.8 MiB                   imp_df.plot(kind='barh', x='feature', y='fscore', legend=False, figsize=(6, 10))
   761  50746.9 MiB      0.0 MiB                   plt.title('XGBoost Feature Importance @ {}'.format(postfix_train))
   762  50746.9 MiB      0.0 MiB                   plt.xlabel('relative importance')
   763  50754.7 MiB      7.8 MiB                   plt.gcf().savefig(feature_imp_fname + '.png', bbox_inches='tight')
   764                             
   765  50754.7 MiB      0.0 MiB                   feature_lists = glob.glob(feature_imp_fname_template.replace('{}', '*.csv'))
   766  50754.7 MiB      0.0 MiB                   ub.log('Aggregating previous analysis results...')
   767  50754.7 MiB      0.0 MiB                   print feature_lists
   768  50754.7 MiB      0.0 MiB                   features_df = None
   769  50754.7 MiB      0.0 MiB                   if feature_lists:
   770  50756.0 MiB      1.3 MiB                       for f_l in feature_lists:
   771  50756.0 MiB      0.0 MiB                           tmp_df = pd.read_csv(f_l, index_col=0)
   772  50756.0 MiB      0.0 MiB                           if features_df is None:
   773  50755.2 MiB     -0.8 MiB                               features_df = tmp_df
   774                                                     else:
   775  50756.0 MiB      0.8 MiB                               features_df = pd.concat([features_df, tmp_df], ignore_index=True)
   776                             
   777  50756.3 MiB      0.3 MiB                   f_df = features_df.groupby(['feature']).mean().reset_index()
   778  50756.3 MiB      0.0 MiB                   f_df['overall'] = True
   779  50756.3 MiB      0.0 MiB                   imp_df['overall'] = False
   780  50756.3 MiB      0.0 MiB                   merged_df = pd.concat([imp_df, f_df]).sort_values(by=['overall', 'fscore'], ascending=False)
   781  50756.3 MiB      0.0 MiB                   sns_plot = sns.factorplot(y='feature', x='fscore', data=merged_df, hue='overall', kind='bar',
   782  50880.3 MiB    124.0 MiB                                             hue_order=[True, False], size=20, aspect=0.5)
   783  50897.4 MiB     17.1 MiB                   sns_plot.savefig(feature_imp_fname + '_overall.png', bbox_inches='tight')
   784                             
   785  50897.4 MiB      0.0 MiB                   ub.log('Output overall result csv to {}...'.format(top_features_fname))
   786  50897.4 MiB      0.0 MiB                   with open(top_features_fname, 'w') as tf:
   787  50897.4 MiB      0.0 MiB                       tf.write('\n'.join(list(set(merged_df.feature.values))))
   788                             
   789  50897.4 MiB      0.0 MiB                   merged_df.to_csv(top_features_fname.replace('.txt', '_df.csv'), index=False)
   790                             
   791                             
   792                                             # json has trouble serializing np.float32
   793                                             # with open(run_info_fname, 'w') as fp:
   794                                             #    json.dump(run_info, fp)
   795                             
   796  50897.4 MiB      0.0 MiB       if make_submission:
   797                                     assert (run_info_fname is not None)
   798                             
   799                                     if not train_model and not compile_data:
   800                                         ub.log('(make_submission) Loading run info from {} ...'.format(run_info_fname))
   801                                         with open(run_info_fname, 'r') as fp:
   802                                             run_info = eval(fp.read())
   803                                         print json.dumps(run_info, indent=2)
   804                             
   805                                     if ub.home_dir not in run_info['model_fname']:
   806                                         for i in ub.possible_home_dirs:
   807                                             if i in run_info['model_fname']:
   808                                                 logged_home_dir = i
   809                             
   810                                     for k in ['fname_xgtest', 'model_fname']:
   811                                         if ub.home_dir not in run_info[k]:
   812                                             for i in ub.possible_home_dirs:
   813                                                 if i in run_info[k]:
   814                                                     run_info[k] = run_info[k].replace(i, ub.home_dir)
   815                             
   816                                     if not train_model:
   817                                         model = xgb.Booster()
   818                                         ub.log('Loading model {} ...'.format(run_info['model_fname']))
   819                                         model.load_model(run_info['model_fname'])
   820                             
   821                                     if not compile_data:
   822                                         ub.log('Loading xgtest data {} ...'.format(run_info['fname_xgtest']))
   823                                         xgtest = xgb.DMatrix(run_info['fname_xgtest'])
   824                             
   825                                     ub.log('XGB making predictions...')
   826                             
   827                                     postfix_train = run_info['postfix_train']
   828                             
   829                                     ypred = model.predict(xgtest, ntree_limit=run_info['ntree_limit_train'])
   830                                     nrows = len(ypred)
   831                             
   832                                     sample = pd.read_csv(os.path.join(ub.data_dir, 'sample_submission.csv'), nrows=nrows)
   833                                     sample['Response'] = ypred
   834                                     fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}_prob.csv".format(postfix_train))
   835                                     if not compile_data:
   836                                         fname_output = fname_output.replace('.csv', '_{}.csv'.format(datetime_str))
   837                                     ub.log('Writing output file (raw proba) {} ...'.format(fname_output))
   838                                     sample.to_csv(fname_output, index=False)
   839                             
   840                                     best_proba = (run_info['best_proba_train'] + run_info['best_proba_val']) / 2.0
   841                                     ub.log('Using threshold: best_proba == {}'.format(best_proba))
   842                                     sample['Response'] = (ypred > best_proba).astype(int)
   843                                     fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}.csv".format(postfix_train))
   844                                     if not compile_data:
   845                                         fname_output = fname_output.replace('.csv', '_{}.csv'.format(datetime_str))
   846                                     ub.log('Writing output file {} ...'.format(fname_output))
   847                                     sample.to_csv(fname_output, index=False)
   848                             
   849  50897.4 MiB      0.0 MiB       if compile_data or train_model:
   850  50897.4 MiB      0.0 MiB           if compile_data:
   851  50897.4 MiB      0.0 MiB               if run_info_fname is not None:
   852                                             ub.log('Ignore input run_info_fname {}'.format(run_info_fname))
   853  50897.4 MiB      0.0 MiB               run_info_fname = os.path.join(ub.output_dir, 'run_info_{}.txt'.format(postfix_train))
   854                                     # else run_info_fname is an input parameter
   855  50897.4 MiB      0.0 MiB           ub.log('Saving run_info into {}'.format(run_info_fname))
   856  50897.5 MiB      0.0 MiB           print pd.Series(run_info)
   857  50897.5 MiB      0.0 MiB           with open(run_info_fname, 'w') as fp:
   858  50897.5 MiB      0.0 MiB               fp.write(str(run_info))
   859                             
   860  50897.5 MiB      0.0 MiB       return run_info_fname


