Filename: main_bosch.py

Line #    Mem usage    Increment   Line Contents
================================================
   288    121.2 MiB      0.0 MiB   @profile(stream=f_mem)
   289                             def main(run_info_fname=None,
   290                                      compile_data=False,
   291                                      train_model=False,
   292                                      make_submission=False,
   293                                      N_start=None,
   294                                      N_files_train=1,
   295                                      N_files_test=1,
   296                                      feature_down_select=False,
   297                                      N_features=250,
   298                                      analyze_feature_importance=False,
   299                                      cv=False,
   300                                      # if True running cross validation if False, run single model training session and importance analysis
   301                                      early_stop_rounds=10,
   302                                      N_rounds=100,
   303                                      testsize=0.1
   304                                      ):
   305    121.2 MiB      0.0 MiB       datetime_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
   306                             
   307    121.2 MiB      0.0 MiB       if compile_data:
   308    121.2 MiB      0.0 MiB           run_info = dict()
   309    121.2 MiB      0.0 MiB           N_splits = ub.N_split
   310    121.2 MiB      0.0 MiB           if N_files_train > N_splits:
   311                                         N_files_train = N_splits
   312    121.2 MiB      0.0 MiB           if N_files_test > N_splits:
   313                                         N_files_test = N_splits
   314                             
   315    121.2 MiB      0.0 MiB           if analyze_feature_importance and feature_down_select:
   316                                         assert 0
   317                             
   318    121.2 MiB      0.0 MiB           run_info['N_splits'] = N_splits
   319    121.2 MiB      0.0 MiB           run_info['N_files_train'] = N_files_train
   320    121.2 MiB      0.0 MiB           run_info['N_files_test'] = N_files_test
   321    121.2 MiB      0.0 MiB           run_info['feature_down_select'] = feature_down_select
   322    121.2 MiB      0.0 MiB           run_info['cv'] = cv
   323    121.2 MiB      0.0 MiB           run_info['analyze_feature_importance'] = analyze_feature_importance
   324    121.2 MiB      0.0 MiB           run_info['early_stop_rounds'] = early_stop_rounds
   325                             
   326    121.2 MiB      0.0 MiB           df_train, n_start = load_data(load_test=False, N_start=N_start, N_read=N_files_train, N_split=N_splits,
   327    121.2 MiB      0.0 MiB                                         shuffle=False,
   328   2004.3 MiB   1883.1 MiB                                         feature_down_select=feature_down_select, N_features=N_features)
   329   2004.3 MiB      0.0 MiB           df_test, _ = load_data(load_test=True, N_start=n_start, N_read=N_files_test, N_split=N_splits, shuffle=False,
   330   2467.9 MiB    463.6 MiB                                  feature_down_select=feature_down_select, N_features=N_features)
   331                             
   332   2467.9 MiB      0.0 MiB           ub.log('generating id diff columns based on various dates columns')
   333   2467.9 MiB      0.0 MiB           dates_cols = [x for x in list(df_train.columns) if 'start_date' in x or 'end_date' in x]
   334                             
   335                                     # print dates_cols
   336                             
   337   3768.7 MiB   1300.9 MiB           df_datesort = pd.concat([df_train[['Id'] + dates_cols], df_test[['Id'] + dates_cols]],
   338   3830.3 MiB     61.5 MiB                                   ignore_index=True)
   339   3830.3 MiB      0.0 MiB           gc.collect()
   340                             
   341   5969.7 MiB   2139.4 MiB           for c in dates_cols:
   342   5806.2 MiB   -163.5 MiB               df_datesort.sort_values(by=[c, 'Id'], inplace=True)
   343   5806.2 MiB      0.0 MiB               df_datesort[c + '_id_diff'] = df_datesort['Id'].diff().fillna(999999).astype(int)
   344   5807.2 MiB      1.0 MiB               df_datesort[c + '_id_diff_reverse'] = df_datesort['Id'].iloc[::-1].diff().fillna(999999).astype(int)
   345                             
   346   5969.7 MiB    162.5 MiB               df_datesort.drop([c], axis=1, inplace=True)
   347                             
   348   5973.7 MiB      4.0 MiB           df_datesort.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_datesort_debug.csv'))
   349                             
   350   3972.8 MiB  -2001.0 MiB           gc.collect()
   351   5635.3 MiB   1662.5 MiB           df_train = df_train.merge(df_datesort, on='Id')
   352   5421.9 MiB   -213.4 MiB           df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_debug.csv'))
   353                             
   354   3774.1 MiB  -1647.8 MiB           gc.collect()
   355   5509.7 MiB   1735.6 MiB           df_test = df_test.merge(df_datesort, on='Id')
   356   5434.7 MiB    -75.0 MiB           df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_test_debug.csv'))
   357                             
   358   4083.0 MiB  -1351.7 MiB           df_test['Response'] = 0
   359                             
   360   4083.0 MiB      0.0 MiB           print df_train.shape
   361   4083.0 MiB      0.0 MiB           print df_test.shape
   362   2394.8 MiB  -1688.3 MiB           gc.collect()
   363                             
   364                                     # if N_files_train == N_splits:
   365                                     #     split_data(df_train,
   366                                     #                output_fname_template=os.path.join(ub.processed_data_dir, 'df_train_preprocessed_part{}.csv'))
   367                                     # if N_files_test == N_splits:
   368                                     #     split_data(df_test,
   369                                     #                output_fname_template=os.path.join(ub.processed_data_dir, 'df_test_preprocessed_part{}.csv'))
   370                             
   371   2394.8 MiB      0.0 MiB           fillna = True
   372   2394.8 MiB      0.0 MiB           run_info['fillna'] = fillna
   373   2394.8 MiB      0.0 MiB           if fillna:
   374   2394.8 MiB      0.0 MiB               ub.log('Filling na...')
   375   4092.7 MiB   1698.0 MiB               for df in [df_train, df_test]:
   376   4167.5 MiB     74.8 MiB                   cols_full_flag = df.isnull().any()
   377   4167.5 MiB      0.0 MiB                   non_full_cols = list(cols_full_flag[cols_full_flag].index)
   378   4167.5 MiB      0.0 MiB                   print 'Non-full columns: {}'.format(len(non_full_cols))
   379                                             # print non_full_cols
   380                             
   381                                             if 1:
   382   4119.3 MiB    -48.2 MiB                       df.fillna(-999999, inplace=True)
   383                                             else:
   384                                                 # print df.PersonalField7.unique()
   385                                                 for c in non_full_cols:
   386                                                     if len(df[c].unique()) > 2:
   387                                                         most_frequent_items = df[c].value_counts().idxmax()
   388                                                         print c, most_frequent_items
   389                                                         df[c].fillna(value=most_frequent_items, inplace=True)
   390                                                     else:  # if it is only a pair of value [somthing, nan] then fill in "missing"
   391                                                         df[c].fillna(value='missing', inplace=True)
   392                                                         print c, df[c].unique()
   393                             
   394   4119.3 MiB      0.0 MiB                   cols_full_flag = df.isnull().any()
   395   4119.3 MiB      0.0 MiB                   non_full_cols = list(cols_full_flag[cols_full_flag].index)
   396   4119.3 MiB      0.0 MiB                   print 'Non-full columns: {}'.format(len(non_full_cols))
   397                             
   398   4119.3 MiB      0.0 MiB                   le = LabelEncoder()
   399   4119.3 MiB      0.0 MiB                   obj_cols = df.select_dtypes(include=['object']).columns
   400                                             # print 'Obj columns: ', list(obj_cols)
   401   4514.7 MiB    395.4 MiB                   for col in obj_cols:
   402   4514.7 MiB      0.0 MiB                       df[col] = le.fit_transform(df[col])
   403                             
   404   3949.3 MiB   -565.4 MiB               df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   405   3939.2 MiB    -10.1 MiB               df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   406                             
   407   3939.2 MiB      0.0 MiB           ub.log('Dropping Id and Response columns...')
   408   3939.2 MiB      0.0 MiB           columns_to_drop = ['Id', 'Response']
   409   4043.7 MiB    104.4 MiB           shuffle_col = df_train[['Id']].copy()
   410   4043.7 MiB      0.0 MiB           shuffle_col['Id'] = np.random.randn(len(shuffle_col))
   411                             
   412   4043.7 MiB      0.0 MiB           y_total_df = df_train['Response']
   413   4043.7 MiB      0.0 MiB           y_total = df_train['Response'].values
   414   4514.2 MiB    470.6 MiB           df_train.drop(columns_to_drop, axis=1, inplace=True)
   415   4205.4 MiB   -308.8 MiB           df_test.drop(columns_to_drop, axis=1, inplace=True)
   416                             
   417   4205.4 MiB      0.0 MiB           print df_train.shape
   418   4205.4 MiB      0.0 MiB           print df_test.shape
   419   4205.8 MiB      0.4 MiB           prior = np.sum(y_total) / (1. * len(y_total))
   420   4205.8 MiB      0.0 MiB           print 'prior: {}'.format(prior)
   421   4205.8 MiB      0.0 MiB           run_info['prior'] = prior
   422   4205.8 MiB      0.0 MiB           gc.collect()
   423                             
   424   4205.8 MiB      0.0 MiB           feature_imp_fname_template = os.path.join(ub.output_dir, 'feature_importance_xgb_{}')
   425   4205.8 MiB      0.0 MiB           run_info['feature_imp_fname_template'] = feature_imp_fname_template
   426   4205.8 MiB      0.0 MiB           top_features_fname = feature_imp_fname_template.format('accumu_list.txt')
   427   4205.8 MiB      0.0 MiB           run_info['top_features_fname'] = top_features_fname
   428                             
   429                                     # if feature_down_select:
   430                                     #     ub.log('Feature down selected based on {}...'.format(top_features_fname))
   431                                     #     #todo may need to set a maxN for the number of features to use
   432                                     #
   433                                     #     with open(top_features_fname, 'r') as tf:
   434                                     #         selected_cols = [x.strip() for x in tf.readlines()]
   435                                     #     df_train = df_train[selected_cols]
   436                                     #     df_test = df_test[selected_cols]
   437                                     #     print df_train.shape
   438                                     #     print df_test.shape
   439                                     #     print df_train.columns
   440                             
   441   4205.8 MiB      0.0 MiB           feature_names = list(df_train.columns)
   442                             
   443   4205.8 MiB      0.0 MiB           postfix_train = '{}_{}of{}'.format(datetime_str, N_files_train, N_splits)
   444   4205.8 MiB      0.0 MiB           postfix_test = '{}_{}of{}'.format(datetime_str, N_files_test, N_splits)
   445                             
   446   4205.8 MiB      0.0 MiB           run_info['postfix_train'] = postfix_train
   447   4205.8 MiB      0.0 MiB           run_info['postfix_test'] = postfix_test
   448                             
   449   4205.8 MiB      0.0 MiB           run_info['testsize'] = testsize
   450                             
   451   4205.8 MiB      0.0 MiB           train_test_split_method = 1
   452                             
   453   4205.8 MiB      0.0 MiB           ub.log('Train/val split using testsize={}, split_method={}'.format(testsize, train_test_split_method))
   454   4205.8 MiB      0.0 MiB           if train_test_split_method == 1:
   455   4205.9 MiB      0.1 MiB               train_idx = shuffle_col[shuffle_col['Id'] > testsize].index
   456   4205.9 MiB      0.0 MiB               val_idx = shuffle_col[shuffle_col['Id'] <= testsize].index
   457   4205.9 MiB      0.0 MiB               ub.log('Done shuffling...')
   458   4205.9 MiB      0.0 MiB               print 'len of train_idx', len(train_idx)
   459   4205.9 MiB      0.0 MiB               print 'len of val_idx', len(val_idx)
   460   4207.6 MiB      1.6 MiB               y_train = y_total_df.loc[train_idx].values
   461   4207.8 MiB      0.2 MiB               y_val = y_total_df.loc[val_idx].values
   462                             
   463   4652.1 MiB    444.3 MiB               xgtrain = xgb.DMatrix(df_train.loc[train_idx].values, y_train, feature_names=feature_names)
   464   4652.1 MiB      0.0 MiB               ub.log('Assembled xgtrain')
   465   4801.1 MiB    149.0 MiB               xgval = xgb.DMatrix(df_train.loc[val_idx].values, y_val, feature_names=feature_names)
   466   4801.1 MiB      0.0 MiB               ub.log('Assembled xgval')
   467   4801.1 MiB      0.0 MiB               del df_train
   468   4801.1 MiB      0.0 MiB               ub.log('Deleted df_train')
   469   2994.5 MiB  -1806.6 MiB               gc.collect()
   470                                     else:
   471                                         x_train, x_val, y_train, y_val = train_test_split(df_train.values, y_total, test_size=testsize)
   472                                         ub.log('Done shuffling...')
   473                                         print x_train.shape
   474                                         print x_val.shape
   475                                         del df_train
   476                                         gc.collect()
   477                                         ub.log('Deleted df_train')
   478                             
   479                                         xgtrain = xgb.DMatrix(x_train, y_train, feature_names=feature_names)
   480                                         ub.log('Assembled xgtrain')
   481                                         xgval = xgb.DMatrix(x_val, y_val, feature_names=feature_names)
   482                                         ub.log('Assembled xgval')
   483                                         del x_train
   484                                         del x_val
   485                                         gc.collect()
   486                             
   487   2994.5 MiB      0.0 MiB           fname_xgtrain = os.path.join(ub.processed_data_dir, 'xgtrain_{}.buffer'.format(postfix_train))
   488   3016.5 MiB     22.0 MiB           xgtrain.save_binary(fname_xgtrain)
   489   3016.5 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgtrain))
   490                             
   491   3016.5 MiB      0.0 MiB           fname_xgval = os.path.join(ub.processed_data_dir, 'xgval_{}.buffer'.format(postfix_train))
   492   3016.5 MiB      0.0 MiB           xgval.save_binary(fname_xgval)
   493   3016.5 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgval))
   494                             
   495   5471.8 MiB   2455.3 MiB           xgtest = xgb.DMatrix(df_test.values, feature_names=feature_names)
   496   5471.8 MiB      0.0 MiB           ub.log('Assembled xgtest')
   497   5471.8 MiB      0.0 MiB           fname_xgtest = os.path.join(ub.processed_data_dir, 'xgtest_{}.buffer'.format(postfix_test))
   498   5284.5 MiB   -187.4 MiB           xgtest.save_binary(fname_xgtest)
   499   5284.5 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgtest))
   500                             
   501   5284.5 MiB      0.0 MiB           del df_test
   502   5288.6 MiB      4.2 MiB           gc.collect()
   503   5288.6 MiB      0.0 MiB           ub.log('Deleted df_test')
   504                             
   505   5288.6 MiB      0.0 MiB           print 'train and val set sizes'
   506   5288.6 MiB      0.0 MiB           print xgtrain.num_row(), xgtrain.num_col()
   507   5288.6 MiB      0.0 MiB           print xgval.num_row(), xgval.num_col()
   508                             
   509   5288.6 MiB      0.0 MiB           run_info['fname_xgtrain'] = fname_xgtrain
   510   5288.6 MiB      0.0 MiB           run_info['fname_xgval'] = fname_xgval
   511   5288.6 MiB      0.0 MiB           run_info['fname_xgtest'] = fname_xgtest
   512                             
   513   5288.6 MiB      0.0 MiB           fname_ytrain = os.path.join(ub.processed_data_dir, 'ytrain_{}.buffer'.format(postfix_train))
   514   5288.6 MiB      0.0 MiB           fname_yval = os.path.join(ub.processed_data_dir, 'ytrain_{}.buffer'.format(postfix_train))
   515                             
   516   5288.7 MiB      0.0 MiB           np.save(fname_ytrain, y_train)
   517   5288.7 MiB      0.0 MiB           ub.log('Saved '+fname_ytrain)
   518                             
   519   5288.7 MiB      0.0 MiB           np.save(fname_yval, y_val)
   520   5288.7 MiB      0.0 MiB           ub.log('Saved '+fname_yval)
   521                             
   522   5288.7 MiB      0.0 MiB           run_info['fname_ytrain'] = fname_ytrain
   523   5288.7 MiB      0.0 MiB           run_info['fname_yval'] = fname_yval
   524                             
   525   5288.7 MiB      0.0 MiB       if train_model:
   526                                     assert compile_data or (run_info_fname is not None)
   527                             
   528                                     if not compile_data:
   529                                         ub.log('(train_model) Loading run info from {} ...'.format(run_info_fname))
   530                                         with open(run_info_fname, 'r') as fp:
   531                                             run_info = eval(fp.read())
   532                                         print json.dumps(run_info, indent=2)
   533                             
   534                                         logged_home_dir = None
   535                                         if ub.home_dir not in run_info['fname_xgtrain']:
   536                                             for i in ub.possible_home_dirs:
   537                                                 if i in run_info['fname_xgtrain']:
   538                                                     logged_home_dir = i
   539                             
   540                                             for k in ['fname_xgtrain', 'fname_xgval', 'fname_ytrain', 'fname_yval']:
   541                                                 run_info[k] = run_info[k].replace(logged_home_dir, ub.home_dir)
   542                             
   543                                             if analyze_feature_importance:
   544                                                 for k in ['feature_imp_fname_template', 'top_feature_fname']:
   545                                                     run_info[k] = run_info[k].replace(logged_home_dir, ub.home_dir)
   546                             
   547                                         ub.log('Loading xgtrain data {} ...'.format(run_info['fname_xgtrain']))
   548                                         xgtrain = xgb.DMatrix(run_info['fname_xgtrain'])
   549                             
   550                                         ub.log('Loading xgval data {} ...'.format(run_info['fname_xgval']))
   551                                         xgval = xgb.DMatrix(run_info['fname_xgval'])
   552                             
   553                                         ub.log('Loading ytrain data {} ...'.format(run_info['fname_ytrain']))
   554                                         y_train = np.load(run_info['fname_ytrain'])
   555                             
   556                                         ub.log('Loading yval data {} ...'.format(run_info['fname_yval']))
   557                                         y_val = np.load(run_info['fname_yval'])
   558                             
   559                                     prior = run_info['prior']
   560                                     postfix_train = run_info['postfix_train']
   561                             
   562                                     xgb_params = get_params(basescore=prior)
   563                                     run_info['xgb_params'] = xgb_params
   564                                     ub.log('Get xgb_params')
   565                                     print xgb_params
   566                             
   567                                     xgb_num_rounds = N_rounds
   568                                     run_info['xgb_num_rounds'] = xgb_num_rounds
   569                                     print 'xgb_num_rounds', xgb_num_rounds
   570                                     if cv:
   571                                         ub.log('Running cross validation...')
   572                                         eval_hist = xgb.cv(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   573                                                            early_stopping_rounds=early_stop_rounds,
   574                                                            feval=ub.mcc_eval, maximize=True,
   575                                                            verbose_eval=1, show_stdv=True, nfold=4, seed=0, stratified=True)
   576                                         print eval_hist
   577                                         run_info['eval_hist'] = eval_hist
   578                             
   579                                     else:
   580                                         ub.log('Running training...')
   581                                         watchlist = [(xgtrain, 'train'), (xgval, 'eval')]
   582                                         model = xgb.train(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   583                                                           early_stopping_rounds=early_stop_rounds,
   584                                                           feval=ub.mcc_eval, maximize=True,
   585                                                           evals=watchlist, verbose_eval=True)
   586                             
   587                                         model_fname = os.path.join(ub.output_dir, 'xbg_{}.model'.format(postfix_train))
   588                                         ub.log('Saving model: {}...'.format(model_fname))
   589                                         model.save_model(model_fname)
   590                                         model.dump_model(model_fname + '.raw.txt')
   591                                         run_info['model_fname'] = model_fname
   592                             
   593                                         ntree_limit = model.best_iteration + 1
   594                             
   595                                         ub.log('Predictions on xgtrain...', 'highlight')
   596                                         predictions = model.predict(xgtrain, ntree_limit=ntree_limit)
   597                             
   598                                         best_proba, best_mcc, y_pred = ub.eval_mcc(y_train, predictions, True)
   599                                         mcc_official = matthews_corrcoef(y_train, y_pred)
   600                                         print 'ntree limit:', ntree_limit
   601                                         print 'best_mcc:', best_mcc
   602                                         print 'best_proba:', best_proba
   603                                         print 'matthews_corroef', mcc_official
   604                             
   605                                         run_info['ntree_limit_train'] = ntree_limit
   606                                         run_info['best_mcc_train'] = best_mcc
   607                                         run_info['best_proba_train'] = best_proba
   608                                         run_info['mcc_official_train'] = mcc_official
   609                             
   610                                         ub.log('Predictions on xgval...', 'highlight')
   611                                         predictions = model.predict(xgval, ntree_limit=ntree_limit)
   612                             
   613                                         best_proba, best_mcc, y_pred = ub.eval_mcc(y_val, predictions, True)
   614                                         mcc_official = matthews_corrcoef(y_val, y_pred)
   615                                         print 'ntree limit:', ntree_limit
   616                                         print 'best_mcc:', best_mcc
   617                                         print 'best_proba:', best_proba
   618                                         print 'matthews_corroef', mcc_official
   619                             
   620                                         run_info['ntree_limit_val'] = ntree_limit
   621                                         run_info['best_mcc_val'] = best_mcc
   622                                         run_info['best_proba_val'] = best_proba
   623                                         run_info['mcc_official_val'] = mcc_official
   624                             
   625                                         if analyze_feature_importance:
   626                                             ub.log('Analyzing feature importance...')
   627                                             feature_imp_fname_template = run_info['feature_imp_fname_template']
   628                                             top_features_fname = run_info['top_features_fname']
   629                                             feature_imp_fname = feature_imp_fname_template.format(postfix_train)
   630                                             imp = model.get_fscore()
   631                                             imp = sorted(imp.items(), key=operator.itemgetter(1))
   632                                             imp_df = pd.DataFrame(imp, columns=['feature', 'fscore'])
   633                                             imp_df['fscore'] = imp_df['fscore'] / imp_df['fscore'].sum()
   634                             
   635                                             ub.log('Output result csv to {}...'.format(feature_imp_fname + '.csv'))
   636                                             imp_df.to_csv(feature_imp_fname + '.csv')
   637                             
   638                                             plt.figure()
   639                                             imp_df.plot(kind='barh', x='feature', y='fscore', legend=False, figsize=(6, 10))
   640                                             plt.title('XGBoost Feature Importance @ {}'.format(postfix_train))
   641                                             plt.xlabel('relative importance')
   642                                             plt.gcf().savefig(feature_imp_fname + '.png', bbox_inches='tight')
   643                             
   644                                             feature_lists = glob.glob(feature_imp_fname_template.replace('{}', '*.csv'))
   645                                             ub.log('Aggregating previous analysis results...')
   646                                             print feature_lists
   647                                             features_df = None
   648                                             if feature_lists:
   649                                                 for f_l in feature_lists:
   650                                                     tmp_df = pd.read_csv(f_l, index_col=0)
   651                                                     if features_df is None:
   652                                                         features_df = tmp_df
   653                                                     else:
   654                                                         features_df = pd.concat([features_df, tmp_df], ignore_index=True)
   655                             
   656                                             f_df = features_df.groupby(['feature']).mean().reset_index()
   657                                             f_df['overall'] = True
   658                                             imp_df['overall'] = False
   659                                             merged_df = pd.concat([imp_df, f_df]).sort_values(by=['overall', 'fscore'], ascending=False)
   660                                             sns_plot = sns.factorplot(y='feature', x='fscore', data=merged_df, hue='overall', kind='bar',
   661                                                                       hue_order=[True, False], size=20, aspect=0.5)
   662                                             sns_plot.savefig(feature_imp_fname + '_overall.png', bbox_inches='tight')
   663                             
   664                                             ub.log('Output overall result csv to {}...'.format(top_features_fname))
   665                                             with open(top_features_fname, 'w') as tf:
   666                                                 tf.write('\n'.join(list(set(merged_df.feature.values))))
   667                             
   668                                             merged_df.to_csv(top_features_fname.replace('.txt', '_df.csv'), index=False)
   669                             
   670                             
   671                                             # json has trouble serializing np.float32
   672                                             # with open(run_info_fname, 'w') as fp:
   673                                             #    json.dump(run_info, fp)
   674                             
   675   5288.7 MiB      0.0 MiB       if make_submission:
   676                                     assert train_model or (run_info_fname is not None)
   677                             
   678                                     if not train_model:
   679                                         ub.log('(make_submission) Loading run info from {} ...'.format(run_info_fname))
   680                                         with open(run_info_fname, 'r') as fp:
   681                                             run_info = eval(fp.read())
   682                                         print json.dumps(run_info, indent=2)
   683                             
   684                                         logged_home_dir = None
   685                                         if ub.home_dir not in run_info['model_fname']:
   686                                             for i in ub.possible_home_dirs:
   687                                                 if i in run_info['model_fname']:
   688                                                     logged_home_dir = i
   689                             
   690                                             for k in ['fname_xgtest', 'model_fname']:
   691                                                 run_info[k] = run_info[k].replace(logged_home_dir, ub.home_dir)
   692                             
   693                                         model = xgb.Booster()
   694                                         ub.log('Loading model {} ...'.format(run_info['model_fname']))
   695                                         model.load_model(run_info['model_fname'])
   696                                         ub.log('Loading xgtest data {} ...'.format(run_info['fname_xgtest']))
   697                                         xgtest = xgb.DMatrix(run_info['fname_xgtest'])
   698                                         ub.log('XGB making predictions...')
   699                             
   700                                     postfix_train = run_info['postfix_train']
   701                             
   702                                     ypred = model.predict(xgtest, ntree_limit=run_info['ntree_limit'])
   703                                     nrows = len(ypred)
   704                             
   705                                     sample = pd.read_csv(os.path.join(ub.data_dir, 'sample_submission.csv'), nrows=nrows)
   706                                     sample['Response'] = ypred
   707                                     fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}_prob.csv".format(postfix_train))
   708                                     ub.log('Writing output file (raw proba) {} ...'.format(fname_output))
   709                                     sample.to_csv(fname_output, index=False)
   710                             
   711                                     best_proba = run_info['best_proba']
   712                                     ub.log('Using threshold: best_proba == {}'.format(best_proba))
   713                                     sample['Response'] = (ypred > best_proba).astype(int)
   714                                     fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}.csv".format(postfix_train))
   715                                     ub.log('Writing output file {} ...'.format(fname_output))
   716                                     sample.to_csv(fname_output, index=False)
   717                             
   718   5288.7 MiB      0.0 MiB       if compile_data or train_model:
   719   5288.7 MiB      0.0 MiB           if compile_data:
   720   5288.7 MiB      0.0 MiB               if run_info_fname is not None:
   721   5288.7 MiB      0.0 MiB                   ub.log('Ignore input run_info_fname {}'.format(run_info_fname))
   722   5288.7 MiB      0.0 MiB               run_info_fname = os.path.join(ub.output_dir, 'run_info_{}.txt'.format(postfix_train))
   723                                     # else run_info_fname is an input parameter
   724   5288.7 MiB      0.0 MiB           ub.log('Saving run_info into {}'.format(run_info_fname))
   725   5288.7 MiB      0.0 MiB           print run_info
   726   5288.7 MiB      0.0 MiB           with open(run_info_fname, 'w') as fp:
   727   5288.7 MiB      0.0 MiB               fp.write(str(run_info))
   728                             
   729   5288.7 MiB      0.0 MiB       return run_info_fname


