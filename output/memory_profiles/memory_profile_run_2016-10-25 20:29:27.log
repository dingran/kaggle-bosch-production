Filename: explore2.py

Line #    Mem usage    Increment   Line Contents
================================================
   237    163.7 MiB      0.0 MiB   @profile(stream=f_mem)
   238                             def main(run_info_fname=None,
   239                                      N_start=None,
   240                                      N_files_train=10,
   241                                      N_files_test=10,
   242                                      cv=False,
   243                                      # if True running cross validation if False, run single model training session and importance analysis
   244                                      feature_down_select=False,
   245                                      analyze_feature_importance=False,
   246                                      early_stop_rounds=10
   247                                      ):
   248    163.7 MiB      0.0 MiB       datetime_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
   249                             
   250    163.7 MiB      0.0 MiB       if run_info_fname is None:
   251    163.7 MiB      0.0 MiB           run_info = dict()
   252    163.7 MiB      0.0 MiB           N_splits = ub.N_split
   253    163.7 MiB      0.0 MiB           if N_files_train > N_splits:
   254                                         N_files_train = N_splits
   255    163.7 MiB      0.0 MiB           if N_files_test > N_splits:
   256                                         N_files_test = N_splits
   257                             
   258    163.7 MiB      0.0 MiB           do_filtering = False
   259                             
   260    163.7 MiB      0.0 MiB           if analyze_feature_importance:
   261                                         do_filtering = False
   262                             
   263    163.7 MiB      0.0 MiB           if feature_down_select:
   264                                         do_filtering = False
   265                                         analyze_feature_importance = False
   266                             
   267    163.7 MiB      0.0 MiB           run_info['N_splits'] = N_splits
   268    163.7 MiB      0.0 MiB           run_info['N_files_train'] = N_files_train
   269    163.7 MiB      0.0 MiB           run_info['N_files_test'] = N_files_test
   270    163.7 MiB      0.0 MiB           run_info['do_filtering'] = do_filtering
   271    163.7 MiB      0.0 MiB           run_info['feature_down_select'] = feature_down_select
   272    163.7 MiB      0.0 MiB           run_info['cv'] = cv
   273    163.7 MiB      0.0 MiB           run_info['analyze_feature_importance'] = analyze_feature_importance
   274    163.7 MiB      0.0 MiB           run_info['early_stop_rounds'] = early_stop_rounds
   275                             
   276    163.7 MiB      0.0 MiB           df_train, n_start = load_data(load_test=False, N_start=N_start, N_read=N_files_train, N_split=N_splits,
   277    163.7 MiB      0.0 MiB                                         shuffle=False,
   278   2488.1 MiB   2324.4 MiB                                         filter=do_filtering)
   279   2488.1 MiB      0.0 MiB           df_test, _ = load_data(load_test=True, N_start=n_start, N_read=N_files_test, N_split=N_splits, shuffle=False,
   280   4657.1 MiB   2169.0 MiB                                  filter=do_filtering)
   281                             
   282   4657.1 MiB      0.0 MiB           ub.log('generating id diff columns based on various dates columns')
   283   4657.1 MiB      0.0 MiB           dates_cols = [x for x in list(df_train.columns) if 'start_date' in x or 'end_date' in x]
   284                             
   285                                     # print dates_cols
   286                             
   287   4657.9 MiB      0.8 MiB           df_datesort = pd.concat([df_train[['Id'] + dates_cols], df_test[['Id'] + dates_cols]],
   288   4657.9 MiB      0.0 MiB                                   ignore_index=True)
   289   4657.9 MiB      0.0 MiB           gc.collect()
   290                             
   291   6275.4 MiB   1617.5 MiB           for c in dates_cols:
   292   6275.2 MiB     -0.2 MiB               df_datesort.sort_values(by=[c, 'Id'], inplace=True)
   293   6275.2 MiB      0.0 MiB               df_datesort[c + '_id_diff'] = df_datesort['Id'].diff().fillna(999999).astype(int)
   294   6275.2 MiB      0.0 MiB               df_datesort[c + '_id_diff_reverse'] = df_datesort['Id'].iloc[::-1].diff().fillna(999999).astype(int)
   295                             
   296   6275.4 MiB      0.2 MiB               df_datesort.drop([c], axis=1, inplace=True)
   297                             
   298   6275.4 MiB      0.0 MiB           df_datesort.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_datesort_debug.csv'))
   299                             
   300   4657.9 MiB  -1617.4 MiB           gc.collect()
   301   5809.5 MiB   1151.5 MiB           df_train = df_train.merge(df_datesort, on='Id')
   302   5809.6 MiB      0.1 MiB           df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_debug.csv'))
   303                             
   304   4121.6 MiB  -1688.0 MiB           gc.collect()
   305   5978.8 MiB   1857.2 MiB           df_test = df_test.merge(df_datesort, on='Id')
   306   5979.0 MiB      0.2 MiB           df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_test_debug.csv'))
   307                             
   308   5944.8 MiB    -34.2 MiB           df_test['Response'] = 0
   309                             
   310   5944.8 MiB      0.0 MiB           print df_train.shape
   311   5944.8 MiB      0.0 MiB           print df_test.shape
   312   4256.8 MiB  -1688.0 MiB           gc.collect()
   313                             
   314   4256.8 MiB      0.0 MiB           if N_files_train == N_splits:
   315                                         split_data(df_train,
   316                                                    output_fname_template=os.path.join(ub.processed_data_dir, 'df_train_preprocessed_part{}.csv'))
   317   4256.8 MiB      0.0 MiB           if N_files_test == N_splits:
   318                                         split_data(df_test,
   319                                                    output_fname_template=os.path.join(ub.processed_data_dir, 'df_test_preprocessed_part{}.csv'))
   320                             
   321   4256.8 MiB      0.0 MiB           fillna = True
   322   4256.8 MiB      0.0 MiB           run_info['fillna'] = fillna
   323   4256.8 MiB      0.0 MiB           if fillna:
   324   4256.8 MiB      0.0 MiB               ub.log('Filling na...')
   325   4552.4 MiB    295.6 MiB               for df in [df_train, df_test]:
   326   4965.1 MiB    412.8 MiB                   cols_full_flag = df.isnull().any()
   327   4965.1 MiB      0.0 MiB                   non_full_cols = list(cols_full_flag[cols_full_flag].index)
   328   4965.1 MiB      0.0 MiB                   print 'Non-full columns: {}'.format(len(non_full_cols))
   329                                             # print non_full_cols
   330                             
   331                                             if 1:
   332   4965.1 MiB      0.0 MiB                       df.fillna(-999999, inplace=True)
   333                                             else:
   334                                                 # print df.PersonalField7.unique()
   335                                                 for c in non_full_cols:
   336                                                     if len(df[c].unique()) > 2:
   337                                                         most_frequent_items = df[c].value_counts().idxmax()
   338                                                         print c, most_frequent_items
   339                                                         df[c].fillna(value=most_frequent_items, inplace=True)
   340                                                     else:  # if it is only a pair of value [somthing, nan] then fill in "missing"
   341                                                         df[c].fillna(value='missing', inplace=True)
   342                                                         print c, df[c].unique()
   343                             
   344   4965.1 MiB      0.0 MiB                   cols_full_flag = df.isnull().any()
   345   4965.1 MiB      0.0 MiB                   non_full_cols = list(cols_full_flag[cols_full_flag].index)
   346   4965.1 MiB      0.0 MiB                   print 'Non-full columns: {}'.format(len(non_full_cols))
   347                             
   348   4965.1 MiB      0.0 MiB                   le = LabelEncoder()
   349   4965.1 MiB      0.0 MiB                   obj_cols = df.select_dtypes(include=['object']).columns
   350                                             # print 'Obj columns: ', list(obj_cols)
   351   4965.1 MiB      0.0 MiB                   for col in obj_cols:
   352   4964.3 MiB     -0.8 MiB                       df[col] = le.fit_transform(df[col])
   353                             
   354   4161.4 MiB   -802.9 MiB               df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   355   4161.4 MiB      0.0 MiB               df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   356                             
   357   4161.4 MiB      0.0 MiB           ub.log('Dropping Id and Response columns...')
   358   4161.4 MiB      0.0 MiB           columns_to_drop = ['Id', 'Response']
   359   4574.1 MiB    412.8 MiB           shuffle_col = df_train[['Id']].copy()
   360   4574.1 MiB      0.0 MiB           shuffle_col['Id'] = np.random.randn(len(shuffle_col))
   361                             
   362   4574.1 MiB      0.0 MiB           y_total_df = df_train['Response']
   363   4574.1 MiB      0.0 MiB           y_total = df_train['Response'].values
   364   5101.4 MiB    527.3 MiB           df_train.drop(columns_to_drop, axis=1, inplace=True)
   365   5491.7 MiB    390.2 MiB           df_test.drop(columns_to_drop, axis=1, inplace=True)
   366                             
   367   5491.7 MiB      0.0 MiB           print df_train.shape
   368   5491.7 MiB      0.0 MiB           print df_test.shape
   369   5491.7 MiB      0.0 MiB           prior = np.sum(y_total) / (1. * len(y_total))
   370   5491.7 MiB      0.0 MiB           print 'prior: {}'.format(prior)
   371   5491.7 MiB      0.0 MiB           run_info['prior'] = prior
   372   5491.7 MiB      0.0 MiB           gc.collect()
   373                             
   374   5491.7 MiB      0.0 MiB           feature_imp_fname_tmplate = os.path.join(ub.output_dir, 'feature_importance_xgb_{}')
   375   5491.7 MiB      0.0 MiB           top_features_fname = feature_imp_fname_tmplate.format('accumu_list.txt')
   376   5491.7 MiB      0.0 MiB           if feature_down_select:
   377                                         ub.log('Feature down selected based on {}...'.format(top_features_fname))
   378                                         #todo may need to set a maxN for the number of features to use
   379                                         
   380                                         with open(top_features_fname, 'r') as tf:
   381                                             selected_cols = [x.strip() for x in tf.readlines()]
   382                                         df_train = df_train[selected_cols]
   383                                         df_test = df_test[selected_cols]
   384                                         print df_train.shape
   385                                         print df_test.shape
   386                                         print df_train.columns
   387                             
   388   5491.7 MiB      0.0 MiB           feature_names = list(df_train.columns)
   389                             
   390   5491.7 MiB      0.0 MiB           postfix_train = '{}_{}of{}'.format(datetime_str, N_files_train, N_splits)
   391   5491.7 MiB      0.0 MiB           postfix_test = '{}_{}of{}'.format(datetime_str, N_files_test, N_splits)
   392                             
   393   5491.7 MiB      0.0 MiB           run_info['postfix_train'] = postfix_train
   394   5491.7 MiB      0.0 MiB           run_info['postfix_test'] = postfix_test
   395                             
   396   5491.7 MiB      0.0 MiB           testsize = 0.3
   397   5491.7 MiB      0.0 MiB           run_info['testsize'] = testsize
   398                             
   399   5491.7 MiB      0.0 MiB           train_test_split_method = 1
   400                             
   401   5491.7 MiB      0.0 MiB           ub.log('Train/val split using testsize={}, split_method={}'.format(testsize, train_test_split_method))
   402   5491.7 MiB      0.0 MiB           if train_test_split_method == 1:
   403   5491.7 MiB      0.0 MiB               train_idx = shuffle_col[shuffle_col['Id'] > testsize].index
   404   5491.7 MiB      0.0 MiB               val_idx = shuffle_col[shuffle_col['Id'] <= testsize].index
   405   5491.7 MiB      0.0 MiB               ub.log('Done shuffling...')
   406   5491.7 MiB      0.0 MiB               print 'len of train_idx', len(train_idx)
   407   5491.7 MiB      0.0 MiB               print 'len of val_idx', len(val_idx)
   408   5491.7 MiB      0.0 MiB               y_train = y_total_df.loc[train_idx].values
   409   5491.7 MiB      0.0 MiB               y_val = y_total_df.loc[val_idx].values
   410                             
   411   6184.1 MiB    692.4 MiB               xgtrain = xgb.DMatrix(df_train.loc[train_idx].values, y_train, feature_names=feature_names)
   412   6184.1 MiB      0.0 MiB               ub.log('Assembled xgtrain')
   413   7295.6 MiB   1111.4 MiB               xgval = xgb.DMatrix(df_train.loc[val_idx].values, y_val, feature_names=feature_names)
   414   7295.6 MiB      0.0 MiB               ub.log('Assembled xgval')
   415   7295.6 MiB      0.0 MiB               del df_train
   416   7295.6 MiB      0.0 MiB               ub.log('Deleted df_train')
   417   5493.1 MiB  -1802.4 MiB               gc.collect()
   418                                     else:
   419                                         x_train, x_val, y_train, y_val = train_test_split(df_train.values, y_total, test_size=testsize)
   420                                         ub.log('Done shuffling...')
   421                                         print x_train.shape
   422                                         print x_val.shape
   423                                         del df_train
   424                                         gc.collect()
   425                                         ub.log('Deleted df_train')
   426                             
   427                                         xgtrain = xgb.DMatrix(x_train, y_train, feature_names=feature_names)
   428                                         ub.log('Assembled xgtrain')
   429                                         xgval = xgb.DMatrix(x_val, y_val, feature_names=feature_names)
   430                                         ub.log('Assembled xgval')
   431                                         del x_train
   432                                         del x_val
   433                                         gc.collect()
   434                             
   435   5493.1 MiB      0.0 MiB           fname_xgtrain = os.path.join(ub.processed_data_dir, 'xgtrain_{}.buffer'.format(postfix_train))
   436   5493.2 MiB      0.1 MiB           xgtrain.save_binary(fname_xgtrain)
   437   5493.2 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgtrain))
   438                             
   439   5493.2 MiB      0.0 MiB           fname_xgval = os.path.join(ub.processed_data_dir, 'xgval_{}.buffer'.format(postfix_train))
   440   5493.2 MiB      0.0 MiB           xgval.save_binary(fname_xgval)
   441   5493.2 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgval))
   442                             
   443   7295.9 MiB   1802.7 MiB           xgtest = xgb.DMatrix(df_test.values, feature_names=feature_names)
   444   7295.9 MiB      0.0 MiB           ub.log('Assembled xgtest')
   445   7295.9 MiB      0.0 MiB           fname_xgtest = os.path.join(ub.processed_data_dir, 'xgtest_{}.buffer'.format(postfix_test))
   446   7295.9 MiB      0.0 MiB           xgtest.save_binary(fname_xgtest)
   447   7295.9 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgtest))
   448                             
   449   7295.9 MiB      0.0 MiB           del df_test
   450   7295.9 MiB      0.0 MiB           gc.collect()
   451   7295.9 MiB      0.0 MiB           ub.log('Deleted df_test')
   452                             
   453   7295.9 MiB      0.0 MiB           print 'train and val set sizes'
   454   7295.9 MiB      0.0 MiB           print xgtrain.num_row(), xgtrain.num_col()
   455   7295.9 MiB      0.0 MiB           print xgval.num_row(), xgval.num_col()
   456                             
   457   7295.9 MiB      0.0 MiB           run_info['fname_xgtrain'] = fname_xgtrain
   458   7295.9 MiB      0.0 MiB           run_info['fname_xgval'] = fname_xgval
   459   7295.9 MiB      0.0 MiB           run_info['fname_xgtest'] = fname_xgtest
   460                             
   461   7295.9 MiB      0.0 MiB           xgb_params = get_params(basescore=prior)
   462   7295.9 MiB      0.0 MiB           run_info['xgb_params'] = xgb_params
   463   7295.9 MiB      0.0 MiB           ub.log('Get xgb_params')
   464   7295.9 MiB      0.0 MiB           print xgb_params
   465                             
   466   7295.9 MiB      0.0 MiB           xgb_num_rounds = 2000
   467   7295.9 MiB      0.0 MiB           run_info['xgb_num_rounds'] = xgb_num_rounds
   468   7295.9 MiB      0.0 MiB           print 'xgb_num_rounds', xgb_num_rounds
   469   7295.9 MiB      0.0 MiB           if cv:
   470                                         ub.log('Running cross validation...')
   471                                         eval_hist = xgb.cv(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   472                                                            early_stopping_rounds=early_stop_rounds,
   473                                                            feval=ub.mcc_eval, maximize=True,
   474                                                            verbose_eval=1, show_stdv=True, nfold=4, seed=0, stratified=True)
   475                                         print eval_hist
   476                                         run_info['eval_hist'] = eval_hist
   477                             
   478                                     else:
   479   7295.9 MiB      0.0 MiB               ub.log('Running training...')
   480   7295.9 MiB      0.0 MiB               feature_imp_fname = feature_imp_fname_tmplate.format(postfix_train)
   481   7295.9 MiB      0.0 MiB               watchlist = [(xgtrain, 'train'), (xgval, 'eval')]
   482   7295.9 MiB      0.0 MiB               model = xgb.train(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   483   7295.9 MiB      0.0 MiB                                 early_stopping_rounds=early_stop_rounds,
   484   7295.9 MiB      0.0 MiB                                 feval=ub.mcc_eval, maximize=True,
   485   7988.9 MiB    693.0 MiB                                 evals=watchlist, verbose_eval=True)
   486                             
   487   7988.9 MiB      0.0 MiB               model_fname = os.path.join(ub.output_dir, 'xbg_{}.model'.format(postfix_train))
   488   7988.9 MiB      0.0 MiB               ub.log('Saving model: {}...'.format(model_fname))
   489   7988.9 MiB      0.0 MiB               model.save_model(model_fname)
   490   7988.9 MiB      0.0 MiB               model.dump_model(model_fname + '.raw.txt')
   491   7988.9 MiB      0.0 MiB               run_info['model_fname'] = model_fname
   492                             
   493   7988.9 MiB      0.0 MiB               ntree_limit = model.best_iteration + 1
   494                             
   495   7988.9 MiB      0.0 MiB               ub.log('Predictions on xgtrain...', 'highlight')
   496   7988.9 MiB      0.0 MiB               predictions = model.predict(xgtrain, ntree_limit=ntree_limit)
   497                             
   498   7988.9 MiB      0.0 MiB               best_proba, best_mcc, y_pred = ub.eval_mcc(y_train, predictions, True)
   499   7988.9 MiB      0.0 MiB               mcc_official = matthews_corrcoef(y_train, y_pred)
   500   7988.9 MiB      0.0 MiB               print 'ntree limit:', ntree_limit
   501   7988.9 MiB      0.0 MiB               print 'best_mcc:', best_mcc
   502   7988.9 MiB      0.0 MiB               print 'best_proba:', best_proba
   503   7988.9 MiB      0.0 MiB               print 'matthews_corroef', mcc_official
   504                             
   505   7988.9 MiB      0.0 MiB               ub.log('Predictions on xgval...', 'highlight')
   506   7988.9 MiB      0.0 MiB               predictions = model.predict(xgval, ntree_limit=ntree_limit)
   507                             
   508   7988.9 MiB      0.0 MiB               best_proba, best_mcc, y_pred = ub.eval_mcc(y_val, predictions, True)
   509   7988.9 MiB      0.0 MiB               mcc_official = matthews_corrcoef(y_val, y_pred)
   510   7988.9 MiB      0.0 MiB               print 'ntree limit:', ntree_limit
   511   7988.9 MiB      0.0 MiB               print 'best_mcc:', best_mcc
   512   7988.9 MiB      0.0 MiB               print 'best_proba:', best_proba
   513   7988.9 MiB      0.0 MiB               print 'matthews_corroef', mcc_official
   514                             
   515   7988.9 MiB      0.0 MiB               run_info['ntree_limit'] = ntree_limit
   516   7988.9 MiB      0.0 MiB               run_info['best_mcc'] = best_mcc
   517   7988.9 MiB      0.0 MiB               run_info['best_proba'] = best_proba
   518   7988.9 MiB      0.0 MiB               run_info['mcc_official'] = mcc_official
   519                             
   520   7988.9 MiB      0.0 MiB               if analyze_feature_importance:
   521                                             ub.log('Analyzing feature importance...')
   522                                             imp = model.get_fscore()
   523                                             imp = sorted(imp.items(), key=operator.itemgetter(1))
   524                                             imp_df = pd.DataFrame(imp, columns=['feature', 'fscore'])
   525                                             imp_df['fscore'] = imp_df['fscore'] / imp_df['fscore'].sum()
   526                             
   527                                             ub.log('Output result csv to {}...'.format(feature_imp_fname + '.csv'))
   528                                             imp_df.to_csv(feature_imp_fname + '.csv')
   529                             
   530                                             plt.figure()
   531                                             imp_df.plot(kind='barh', x='feature', y='fscore', legend=False, figsize=(6, 10))
   532                                             plt.title('XGBoost Feature Importance @ {}'.format(postfix_train))
   533                                             plt.xlabel('relative importance')
   534                                             plt.gcf().savefig(feature_imp_fname + '.png', bbox_inches='tight')
   535                             
   536                                             feature_lists = glob.glob(feature_imp_fname_tmplate.replace('{}', '*.csv'))
   537                                             ub.log('Aggregating previous analysis results...')
   538                                             print feature_lists
   539                                             features_df = None
   540                                             if feature_lists:
   541                                                 for f_l in feature_lists:
   542                                                     tmp_df = pd.read_csv(f_l, index_col=0)
   543                                                     if features_df is None:
   544                                                         features_df = tmp_df
   545                                                     else:
   546                                                         features_df = pd.concat([features_df, tmp_df], ignore_index=True)
   547                             
   548                                             f_df = features_df.groupby(['feature']).mean().reset_index()
   549                                             f_df['overall'] = True
   550                                             imp_df['overall'] = False
   551                                             merged_df = pd.concat([imp_df, f_df]).sort_values(by=['overall', 'fscore'], ascending=False)
   552                                             sns_plot = sns.factorplot(y='feature', x='fscore', data=merged_df, hue='overall', kind='bar',
   553                                                                       hue_order=[True, False], size=20, aspect=0.5)
   554                                             sns_plot.savefig(feature_imp_fname + '_overall.png', bbox_inches='tight')
   555                             
   556                                             ub.log('Output overall result csv to {}...'.format(top_features_fname))
   557                                             with open(top_features_fname, 'w') as tf:
   558                                                 tf.write('\n'.join(list(set(merged_df.feature.values))))
   559                             
   560                                             merged_df.to_csv(top_features_fname.replace('.txt', '_df.csv'), index=False)
   561                             
   562   7988.9 MiB      0.0 MiB           run_info_fname = os.path.join(ub.output_dir, 'run_info_{}.txt'.format(postfix_train))
   563   7988.9 MiB      0.0 MiB           ub.log('Saving run_info into {}'.format(run_info_fname))
   564   7988.9 MiB      0.0 MiB           print run_info
   565   7988.9 MiB      0.0 MiB           with open(run_info_fname, 'w') as fp:
   566   7988.9 MiB      0.0 MiB               fp.write(str(run_info))
   567                             
   568                                         # json has trouble serializing np.float32
   569                                         # with open(run_info_fname, 'w') as fp:
   570                                         #    json.dump(run_info, fp)
   571                                 else:
   572                                     ub.log('Loading run info from {} ...'.format(run_info_fname))
   573                                     with open(run_info_fname, 'r') as fp:
   574                                         run_info = eval(fp.read())
   575                                     print json.dumps(run_info, indent=2)
   576                             
   577                                     model = xgb.Booster()
   578                                     ub.log('Loading model {} ...'.format(run_info['model_fname']))
   579                                     model.load_model(run_info['model_fname'])
   580                                     ub.log('Loading xgtest data {} ...'.format(run_info['fname_xgtest']))
   581                                     xgtest = xgb.DMatrix(run_info['fname_xgtest'])
   582                                     ub.log('XGB making predictions...')
   583                                     ypred = model.predict(xgtest, ntree_limit=run_info['ntree_limit'])
   584                             
   585                                     nrows = len(ypred)
   586                                     postfix_train = run_info['postfix_train']
   587                             
   588                                     sample = pd.read_csv(os.path.join(ub.data_dir, 'sample_submission.csv'), nrows=nrows)
   589                                     sample['Response'] = ypred
   590                                     fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}_prob.csv".format(postfix_train))
   591                                     ub.log('Writing output file (raw proba) {} ...'.format(fname_output))
   592                                     sample.to_csv(fname_output, index=False)
   593                             
   594                                     best_proba = run_info['best_proba']
   595                                     ub.log('Using threshold: best_proba == {}'.format(best_proba))
   596                                     sample['Response'] = (ypred > best_proba).astype(int)
   597                                     fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}.csv".format(postfix_train))
   598                                     ub.log('Writing output file {} ...'.format(fname_output))
   599                                     sample.to_csv(fname_output, index=False)
   600   7988.9 MiB      0.0 MiB       return run_info_fname


Filename: explore2.py

Line #    Mem usage    Increment   Line Contents
================================================
   237   3691.2 MiB      0.0 MiB   @profile(stream=f_mem)
   238                             def main(run_info_fname=None,
   239                                      N_start=None,
   240                                      N_files_train=10,
   241                                      N_files_test=10,
   242                                      cv=False,
   243                                      # if True running cross validation if False, run single model training session and importance analysis
   244                                      feature_down_select=False,
   245                                      analyze_feature_importance=False,
   246                                      early_stop_rounds=10
   247                                      ):
   248   3691.2 MiB      0.0 MiB       datetime_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
   249                             
   250   3691.2 MiB      0.0 MiB       if run_info_fname is None:
   251                                     run_info = dict()
   252                                     N_splits = ub.N_split
   253                                     if N_files_train > N_splits:
   254                                         N_files_train = N_splits
   255                                     if N_files_test > N_splits:
   256                                         N_files_test = N_splits
   257                             
   258                                     do_filtering = False
   259                             
   260                                     if analyze_feature_importance:
   261                                         do_filtering = False
   262                             
   263                                     if feature_down_select:
   264                                         do_filtering = False
   265                                         analyze_feature_importance = False
   266                             
   267                                     run_info['N_splits'] = N_splits
   268                                     run_info['N_files_train'] = N_files_train
   269                                     run_info['N_files_test'] = N_files_test
   270                                     run_info['do_filtering'] = do_filtering
   271                                     run_info['feature_down_select'] = feature_down_select
   272                                     run_info['cv'] = cv
   273                                     run_info['analyze_feature_importance'] = analyze_feature_importance
   274                                     run_info['early_stop_rounds'] = early_stop_rounds
   275                             
   276                                     df_train, n_start = load_data(load_test=False, N_start=N_start, N_read=N_files_train, N_split=N_splits,
   277                                                                   shuffle=False,
   278                                                                   filter=do_filtering)
   279                                     df_test, _ = load_data(load_test=True, N_start=n_start, N_read=N_files_test, N_split=N_splits, shuffle=False,
   280                                                            filter=do_filtering)
   281                             
   282                                     ub.log('generating id diff columns based on various dates columns')
   283                                     dates_cols = [x for x in list(df_train.columns) if 'start_date' in x or 'end_date' in x]
   284                             
   285                                     # print dates_cols
   286                             
   287                                     df_datesort = pd.concat([df_train[['Id'] + dates_cols], df_test[['Id'] + dates_cols]],
   288                                                             ignore_index=True)
   289                                     gc.collect()
   290                             
   291                                     for c in dates_cols:
   292                                         df_datesort.sort_values(by=[c, 'Id'], inplace=True)
   293                                         df_datesort[c + '_id_diff'] = df_datesort['Id'].diff().fillna(999999).astype(int)
   294                                         df_datesort[c + '_id_diff_reverse'] = df_datesort['Id'].iloc[::-1].diff().fillna(999999).astype(int)
   295                             
   296                                         df_datesort.drop([c], axis=1, inplace=True)
   297                             
   298                                     df_datesort.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_datesort_debug.csv'))
   299                             
   300                                     gc.collect()
   301                                     df_train = df_train.merge(df_datesort, on='Id')
   302                                     df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_debug.csv'))
   303                             
   304                                     gc.collect()
   305                                     df_test = df_test.merge(df_datesort, on='Id')
   306                                     df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_test_debug.csv'))
   307                             
   308                                     df_test['Response'] = 0
   309                             
   310                                     print df_train.shape
   311                                     print df_test.shape
   312                                     gc.collect()
   313                             
   314                                     if N_files_train == N_splits:
   315                                         split_data(df_train,
   316                                                    output_fname_template=os.path.join(ub.processed_data_dir, 'df_train_preprocessed_part{}.csv'))
   317                                     if N_files_test == N_splits:
   318                                         split_data(df_test,
   319                                                    output_fname_template=os.path.join(ub.processed_data_dir, 'df_test_preprocessed_part{}.csv'))
   320                             
   321                                     fillna = True
   322                                     run_info['fillna'] = fillna
   323                                     if fillna:
   324                                         ub.log('Filling na...')
   325                                         for df in [df_train, df_test]:
   326                                             cols_full_flag = df.isnull().any()
   327                                             non_full_cols = list(cols_full_flag[cols_full_flag].index)
   328                                             print 'Non-full columns: {}'.format(len(non_full_cols))
   329                                             # print non_full_cols
   330                             
   331                                             if 1:
   332                                                 df.fillna(-999999, inplace=True)
   333                                             else:
   334                                                 # print df.PersonalField7.unique()
   335                                                 for c in non_full_cols:
   336                                                     if len(df[c].unique()) > 2:
   337                                                         most_frequent_items = df[c].value_counts().idxmax()
   338                                                         print c, most_frequent_items
   339                                                         df[c].fillna(value=most_frequent_items, inplace=True)
   340                                                     else:  # if it is only a pair of value [somthing, nan] then fill in "missing"
   341                                                         df[c].fillna(value='missing', inplace=True)
   342                                                         print c, df[c].unique()
   343                             
   344                                             cols_full_flag = df.isnull().any()
   345                                             non_full_cols = list(cols_full_flag[cols_full_flag].index)
   346                                             print 'Non-full columns: {}'.format(len(non_full_cols))
   347                             
   348                                             le = LabelEncoder()
   349                                             obj_cols = df.select_dtypes(include=['object']).columns
   350                                             # print 'Obj columns: ', list(obj_cols)
   351                                             for col in obj_cols:
   352                                                 df[col] = le.fit_transform(df[col])
   353                             
   354                                         df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   355                                         df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   356                             
   357                                     ub.log('Dropping Id and Response columns...')
   358                                     columns_to_drop = ['Id', 'Response']
   359                                     shuffle_col = df_train[['Id']].copy()
   360                                     shuffle_col['Id'] = np.random.randn(len(shuffle_col))
   361                             
   362                                     y_total_df = df_train['Response']
   363                                     y_total = df_train['Response'].values
   364                                     df_train.drop(columns_to_drop, axis=1, inplace=True)
   365                                     df_test.drop(columns_to_drop, axis=1, inplace=True)
   366                             
   367                                     print df_train.shape
   368                                     print df_test.shape
   369                                     prior = np.sum(y_total) / (1. * len(y_total))
   370                                     print 'prior: {}'.format(prior)
   371                                     run_info['prior'] = prior
   372                                     gc.collect()
   373                             
   374                                     feature_imp_fname_tmplate = os.path.join(ub.output_dir, 'feature_importance_xgb_{}')
   375                                     top_features_fname = feature_imp_fname_tmplate.format('accumu_list.txt')
   376                                     if feature_down_select:
   377                                         ub.log('Feature down selected based on {}...'.format(top_features_fname))
   378                                         #todo may need to set a maxN for the number of features to use
   379                                         
   380                                         with open(top_features_fname, 'r') as tf:
   381                                             selected_cols = [x.strip() for x in tf.readlines()]
   382                                         df_train = df_train[selected_cols]
   383                                         df_test = df_test[selected_cols]
   384                                         print df_train.shape
   385                                         print df_test.shape
   386                                         print df_train.columns
   387                             
   388                                     feature_names = list(df_train.columns)
   389                             
   390                                     postfix_train = '{}_{}of{}'.format(datetime_str, N_files_train, N_splits)
   391                                     postfix_test = '{}_{}of{}'.format(datetime_str, N_files_test, N_splits)
   392                             
   393                                     run_info['postfix_train'] = postfix_train
   394                                     run_info['postfix_test'] = postfix_test
   395                             
   396                                     testsize = 0.3
   397                                     run_info['testsize'] = testsize
   398                             
   399                                     train_test_split_method = 1
   400                             
   401                                     ub.log('Train/val split using testsize={}, split_method={}'.format(testsize, train_test_split_method))
   402                                     if train_test_split_method == 1:
   403                                         train_idx = shuffle_col[shuffle_col['Id'] > testsize].index
   404                                         val_idx = shuffle_col[shuffle_col['Id'] <= testsize].index
   405                                         ub.log('Done shuffling...')
   406                                         print 'len of train_idx', len(train_idx)
   407                                         print 'len of val_idx', len(val_idx)
   408                                         y_train = y_total_df.loc[train_idx].values
   409                                         y_val = y_total_df.loc[val_idx].values
   410                             
   411                                         xgtrain = xgb.DMatrix(df_train.loc[train_idx].values, y_train, feature_names=feature_names)
   412                                         ub.log('Assembled xgtrain')
   413                                         xgval = xgb.DMatrix(df_train.loc[val_idx].values, y_val, feature_names=feature_names)
   414                                         ub.log('Assembled xgval')
   415                                         del df_train
   416                                         ub.log('Deleted df_train')
   417                                         gc.collect()
   418                                     else:
   419                                         x_train, x_val, y_train, y_val = train_test_split(df_train.values, y_total, test_size=testsize)
   420                                         ub.log('Done shuffling...')
   421                                         print x_train.shape
   422                                         print x_val.shape
   423                                         del df_train
   424                                         gc.collect()
   425                                         ub.log('Deleted df_train')
   426                             
   427                                         xgtrain = xgb.DMatrix(x_train, y_train, feature_names=feature_names)
   428                                         ub.log('Assembled xgtrain')
   429                                         xgval = xgb.DMatrix(x_val, y_val, feature_names=feature_names)
   430                                         ub.log('Assembled xgval')
   431                                         del x_train
   432                                         del x_val
   433                                         gc.collect()
   434                             
   435                                     fname_xgtrain = os.path.join(ub.processed_data_dir, 'xgtrain_{}.buffer'.format(postfix_train))
   436                                     xgtrain.save_binary(fname_xgtrain)
   437                                     ub.log('Saved {}'.format(fname_xgtrain))
   438                             
   439                                     fname_xgval = os.path.join(ub.processed_data_dir, 'xgval_{}.buffer'.format(postfix_train))
   440                                     xgval.save_binary(fname_xgval)
   441                                     ub.log('Saved {}'.format(fname_xgval))
   442                             
   443                                     xgtest = xgb.DMatrix(df_test.values, feature_names=feature_names)
   444                                     ub.log('Assembled xgtest')
   445                                     fname_xgtest = os.path.join(ub.processed_data_dir, 'xgtest_{}.buffer'.format(postfix_test))
   446                                     xgtest.save_binary(fname_xgtest)
   447                                     ub.log('Saved {}'.format(fname_xgtest))
   448                             
   449                                     del df_test
   450                                     gc.collect()
   451                                     ub.log('Deleted df_test')
   452                             
   453                                     print 'train and val set sizes'
   454                                     print xgtrain.num_row(), xgtrain.num_col()
   455                                     print xgval.num_row(), xgval.num_col()
   456                             
   457                                     run_info['fname_xgtrain'] = fname_xgtrain
   458                                     run_info['fname_xgval'] = fname_xgval
   459                                     run_info['fname_xgtest'] = fname_xgtest
   460                             
   461                                     xgb_params = get_params(basescore=prior)
   462                                     run_info['xgb_params'] = xgb_params
   463                                     ub.log('Get xgb_params')
   464                                     print xgb_params
   465                             
   466                                     xgb_num_rounds = 2000
   467                                     run_info['xgb_num_rounds'] = xgb_num_rounds
   468                                     print 'xgb_num_rounds', xgb_num_rounds
   469                                     if cv:
   470                                         ub.log('Running cross validation...')
   471                                         eval_hist = xgb.cv(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   472                                                            early_stopping_rounds=early_stop_rounds,
   473                                                            feval=ub.mcc_eval, maximize=True,
   474                                                            verbose_eval=1, show_stdv=True, nfold=4, seed=0, stratified=True)
   475                                         print eval_hist
   476                                         run_info['eval_hist'] = eval_hist
   477                             
   478                                     else:
   479                                         ub.log('Running training...')
   480                                         feature_imp_fname = feature_imp_fname_tmplate.format(postfix_train)
   481                                         watchlist = [(xgtrain, 'train'), (xgval, 'eval')]
   482                                         model = xgb.train(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   483                                                           early_stopping_rounds=early_stop_rounds,
   484                                                           feval=ub.mcc_eval, maximize=True,
   485                                                           evals=watchlist, verbose_eval=True)
   486                             
   487                                         model_fname = os.path.join(ub.output_dir, 'xbg_{}.model'.format(postfix_train))
   488                                         ub.log('Saving model: {}...'.format(model_fname))
   489                                         model.save_model(model_fname)
   490                                         model.dump_model(model_fname + '.raw.txt')
   491                                         run_info['model_fname'] = model_fname
   492                             
   493                                         ntree_limit = model.best_iteration + 1
   494                             
   495                                         ub.log('Predictions on xgtrain...', 'highlight')
   496                                         predictions = model.predict(xgtrain, ntree_limit=ntree_limit)
   497                             
   498                                         best_proba, best_mcc, y_pred = ub.eval_mcc(y_train, predictions, True)
   499                                         mcc_official = matthews_corrcoef(y_train, y_pred)
   500                                         print 'ntree limit:', ntree_limit
   501                                         print 'best_mcc:', best_mcc
   502                                         print 'best_proba:', best_proba
   503                                         print 'matthews_corroef', mcc_official
   504                             
   505                                         ub.log('Predictions on xgval...', 'highlight')
   506                                         predictions = model.predict(xgval, ntree_limit=ntree_limit)
   507                             
   508                                         best_proba, best_mcc, y_pred = ub.eval_mcc(y_val, predictions, True)
   509                                         mcc_official = matthews_corrcoef(y_val, y_pred)
   510                                         print 'ntree limit:', ntree_limit
   511                                         print 'best_mcc:', best_mcc
   512                                         print 'best_proba:', best_proba
   513                                         print 'matthews_corroef', mcc_official
   514                             
   515                                         run_info['ntree_limit'] = ntree_limit
   516                                         run_info['best_mcc'] = best_mcc
   517                                         run_info['best_proba'] = best_proba
   518                                         run_info['mcc_official'] = mcc_official
   519                             
   520                                         if analyze_feature_importance:
   521                                             ub.log('Analyzing feature importance...')
   522                                             imp = model.get_fscore()
   523                                             imp = sorted(imp.items(), key=operator.itemgetter(1))
   524                                             imp_df = pd.DataFrame(imp, columns=['feature', 'fscore'])
   525                                             imp_df['fscore'] = imp_df['fscore'] / imp_df['fscore'].sum()
   526                             
   527                                             ub.log('Output result csv to {}...'.format(feature_imp_fname + '.csv'))
   528                                             imp_df.to_csv(feature_imp_fname + '.csv')
   529                             
   530                                             plt.figure()
   531                                             imp_df.plot(kind='barh', x='feature', y='fscore', legend=False, figsize=(6, 10))
   532                                             plt.title('XGBoost Feature Importance @ {}'.format(postfix_train))
   533                                             plt.xlabel('relative importance')
   534                                             plt.gcf().savefig(feature_imp_fname + '.png', bbox_inches='tight')
   535                             
   536                                             feature_lists = glob.glob(feature_imp_fname_tmplate.replace('{}', '*.csv'))
   537                                             ub.log('Aggregating previous analysis results...')
   538                                             print feature_lists
   539                                             features_df = None
   540                                             if feature_lists:
   541                                                 for f_l in feature_lists:
   542                                                     tmp_df = pd.read_csv(f_l, index_col=0)
   543                                                     if features_df is None:
   544                                                         features_df = tmp_df
   545                                                     else:
   546                                                         features_df = pd.concat([features_df, tmp_df], ignore_index=True)
   547                             
   548                                             f_df = features_df.groupby(['feature']).mean().reset_index()
   549                                             f_df['overall'] = True
   550                                             imp_df['overall'] = False
   551                                             merged_df = pd.concat([imp_df, f_df]).sort_values(by=['overall', 'fscore'], ascending=False)
   552                                             sns_plot = sns.factorplot(y='feature', x='fscore', data=merged_df, hue='overall', kind='bar',
   553                                                                       hue_order=[True, False], size=20, aspect=0.5)
   554                                             sns_plot.savefig(feature_imp_fname + '_overall.png', bbox_inches='tight')
   555                             
   556                                             ub.log('Output overall result csv to {}...'.format(top_features_fname))
   557                                             with open(top_features_fname, 'w') as tf:
   558                                                 tf.write('\n'.join(list(set(merged_df.feature.values))))
   559                             
   560                                             merged_df.to_csv(top_features_fname.replace('.txt', '_df.csv'), index=False)
   561                             
   562                                     run_info_fname = os.path.join(ub.output_dir, 'run_info_{}.txt'.format(postfix_train))
   563                                     ub.log('Saving run_info into {}'.format(run_info_fname))
   564                                     print run_info
   565                                     with open(run_info_fname, 'w') as fp:
   566                                         fp.write(str(run_info))
   567                             
   568                                         # json has trouble serializing np.float32
   569                                         # with open(run_info_fname, 'w') as fp:
   570                                         #    json.dump(run_info, fp)
   571                                 else:
   572   3691.2 MiB      0.0 MiB           ub.log('Loading run info from {} ...'.format(run_info_fname))
   573   3691.2 MiB      0.0 MiB           with open(run_info_fname, 'r') as fp:
   574   3691.2 MiB      0.0 MiB               run_info = eval(fp.read())
   575   3691.2 MiB      0.0 MiB           print json.dumps(run_info, indent=2)
   576                             
   577   3691.2 MiB      0.0 MiB           model = xgb.Booster()
   578   3691.2 MiB      0.0 MiB           ub.log('Loading model {} ...'.format(run_info['model_fname']))
   579   3691.2 MiB      0.0 MiB           model.load_model(run_info['model_fname'])
   580   3691.2 MiB      0.0 MiB           ub.log('Loading xgtest data {} ...'.format(run_info['fname_xgtest']))
   581   5493.5 MiB   1802.3 MiB           xgtest = xgb.DMatrix(run_info['fname_xgtest'])
   582   5493.5 MiB      0.0 MiB           ub.log('XGB making predictions...')
   583   5493.5 MiB      0.0 MiB           ypred = model.predict(xgtest, ntree_limit=run_info['ntree_limit'])
   584                             
   585   5493.5 MiB      0.0 MiB           nrows = len(ypred)
   586   5493.5 MiB      0.0 MiB           postfix_train = run_info['postfix_train']
   587                             
   588   5493.5 MiB      0.0 MiB           sample = pd.read_csv(os.path.join(ub.data_dir, 'sample_submission.csv'), nrows=nrows)
   589   5493.5 MiB      0.0 MiB           sample['Response'] = ypred
   590   5493.5 MiB      0.0 MiB           fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}_prob.csv".format(postfix_train))
   591   5493.5 MiB      0.0 MiB           ub.log('Writing output file (raw proba) {} ...'.format(fname_output))
   592   5493.5 MiB      0.0 MiB           sample.to_csv(fname_output, index=False)
   593                             
   594   5493.5 MiB      0.0 MiB           best_proba = run_info['best_proba']
   595   5493.5 MiB      0.0 MiB           ub.log('Using threshold: best_proba == {}'.format(best_proba))
   596   5493.5 MiB      0.0 MiB           sample['Response'] = (ypred > best_proba).astype(int)
   597   5493.5 MiB      0.0 MiB           fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}.csv".format(postfix_train))
   598   5493.5 MiB      0.0 MiB           ub.log('Writing output file {} ...'.format(fname_output))
   599   5493.5 MiB      0.0 MiB           sample.to_csv(fname_output, index=False)
   600   5493.5 MiB      0.0 MiB       return run_info_fname


