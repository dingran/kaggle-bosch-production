Filename: explore2.py

Line #    Mem usage    Increment   Line Contents
================================================
   230    171.2 MiB      0.0 MiB   @profile(stream=f_mem)
   231                             def main(run_info_fname=None,
   232                                      N_start=None,
   233                                      N_files_train=10,
   234                                      N_files_test=10,
   235                                      cv=False,
   236                                      # if True running cross validation if False, run single model training session and importance analysis
   237                                      feature_down_select=False,
   238                                      analyze_feature_importance=False,
   239                                      early_stop_rounds=10
   240                                      ):
   241    171.2 MiB      0.0 MiB       datetime_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
   242                             
   243    171.2 MiB      0.0 MiB       if run_info_fname is None:
   244    171.2 MiB      0.0 MiB           run_info = dict()
   245    171.2 MiB      0.0 MiB           N_splits = ub.N_split
   246    171.2 MiB      0.0 MiB           if N_files_train > N_splits:
   247                                         N_files_train = N_splits
   248    171.2 MiB      0.0 MiB           if N_files_test > N_splits:
   249                                         N_files_test = N_splits
   250                             
   251    171.2 MiB      0.0 MiB           do_filtering = False
   252                             
   253    171.2 MiB      0.0 MiB           if analyze_feature_importance:
   254    171.2 MiB      0.0 MiB               do_filtering = False
   255                             
   256    171.2 MiB      0.0 MiB           if feature_down_select:
   257                                         do_filtering = False
   258                                         analyze_feature_importance = False
   259                             
   260    171.2 MiB      0.0 MiB           run_info['N_splits'] = N_splits
   261    171.2 MiB      0.0 MiB           run_info['N_files_train'] = N_files_train
   262    171.2 MiB      0.0 MiB           run_info['N_files_test'] = N_files_test
   263    171.2 MiB      0.0 MiB           run_info['do_filtering'] = do_filtering
   264    171.2 MiB      0.0 MiB           run_info['feature_down_select'] = feature_down_select
   265    171.2 MiB      0.0 MiB           run_info['cv'] = cv
   266    171.2 MiB      0.0 MiB           run_info['analyze_feature_importance'] = analyze_feature_importance
   267    171.2 MiB      0.0 MiB           run_info['early_stop_rounds'] = early_stop_rounds
   268                             
   269    171.2 MiB      0.0 MiB           df_train, n_start = load_data(load_test=False, N_start=N_start, N_read=N_files_train, N_split=N_splits,
   270    171.2 MiB      0.0 MiB                                         shuffle=False,
   271  16253.6 MiB  16082.4 MiB                                         filter=do_filtering)
   272  16253.6 MiB      0.0 MiB           df_test, _ = load_data(load_test=True, N_start=n_start, N_read=N_files_test, N_split=N_splits, shuffle=False,
   273  33179.0 MiB  16925.4 MiB                                  filter=do_filtering)
   274                             
   275  33179.0 MiB      0.0 MiB           ub.log('generating id diff columns based on various dates columns')
   276  33179.0 MiB      0.0 MiB           dates_cols = [x for x in list(df_train.columns) if 'start_date' in x or 'end_date' in x]
   277                             
   278                                     # print dates_cols
   279                             
   280  41146.6 MiB   7967.6 MiB           df_datesort = pd.concat([df_train[['Id'] + dates_cols], df_test[['Id'] + dates_cols]],
   281  41429.6 MiB    283.1 MiB                                   ignore_index=True)
   282  41429.6 MiB      0.0 MiB           gc.collect()
   283                             
   284  53264.4 MiB  11834.7 MiB           for c in dates_cols:
   285  52137.5 MiB  -1126.9 MiB               df_datesort.sort_values(by=[c, 'Id'], inplace=True)
   286  52137.5 MiB      0.0 MiB               df_datesort[c + '_id_diff'] = df_datesort['Id'].diff().fillna(999999).astype(int)
   287  52137.5 MiB      0.0 MiB               df_datesort[c + '_id_diff_reverse'] = df_datesort['Id'].iloc[::-1].diff().fillna(999999).astype(int)
   288                             
   289  53264.4 MiB   1126.9 MiB               df_datesort.drop([c], axis=1, inplace=True)
   290                             
   291  43720.7 MiB  -9543.6 MiB           df_datesort.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_datesort_debug.csv'))
   292                             
   293  42001.1 MiB  -1719.7 MiB           gc.collect()
   294  51160.2 MiB   9159.1 MiB           df_train = df_train.merge(df_datesort, on='Id')
   295  51160.2 MiB      0.0 MiB           df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_debug.csv'))
   296                             
   297  39103.8 MiB -12056.4 MiB           gc.collect()
   298  50489.9 MiB  11386.1 MiB           df_test = df_test.merge(df_datesort, on='Id')
   299  50489.9 MiB      0.0 MiB           df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_test_debug.csv'))
   300                             
   301  45633.8 MiB  -4856.2 MiB           df_test['Response'] = 0
   302                             
   303  45633.8 MiB      0.0 MiB           print df_train.shape
   304  45633.8 MiB      0.0 MiB           print df_test.shape
   305  35979.2 MiB  -9654.6 MiB           gc.collect()
   306                             
   307  35979.2 MiB      0.0 MiB           if N_files_train == N_splits:
   308                                         split_data(df_train,
   309                                                    output_fname_template=os.path.join(ub.processed_data_dir, 'df_train_preprocessed_part{}.csv'))
   310  35979.2 MiB      0.0 MiB           if N_files_test == N_splits:
   311                                         split_data(df_test,
   312                                                    output_fname_template=os.path.join(ub.processed_data_dir, 'df_test_preprocessed_part{}.csv'))
   313                             
   314  35979.2 MiB      0.0 MiB           fillna = True
   315  35979.2 MiB      0.0 MiB           run_info['fillna'] = fillna
   316  35979.2 MiB      0.0 MiB           if fillna:
   317  35979.2 MiB      0.0 MiB               ub.log('Filling na...')
   318  38328.1 MiB   2348.9 MiB               for df in [df_train, df_test]:
   319  41145.6 MiB   2817.5 MiB                   cols_full_flag = df.isnull().any()
   320  41145.6 MiB      0.0 MiB                   non_full_cols = list(cols_full_flag[cols_full_flag].index)
   321  41145.6 MiB      0.0 MiB                   print 'Non-full columns: {}'.format(len(non_full_cols))
   322                                             # print non_full_cols
   323                             
   324                                             if 1:
   325  41146.2 MiB      0.6 MiB                       df.fillna(-999999, inplace=True)
   326                                             else:
   327                                                 # print df.PersonalField7.unique()
   328                                                 for c in non_full_cols:
   329                                                     if len(df[c].unique()) > 2:
   330                                                         most_frequent_items = df[c].value_counts().idxmax()
   331                                                         print c, most_frequent_items
   332                                                         df[c].fillna(value=most_frequent_items, inplace=True)
   333                                                     else:  # if it is only a pair of value [somthing, nan] then fill in "missing"
   334                                                         df[c].fillna(value='missing', inplace=True)
   335                                                         print c, df[c].unique()
   336                             
   337  41146.2 MiB      0.0 MiB                   cols_full_flag = df.isnull().any()
   338  41146.2 MiB      0.0 MiB                   non_full_cols = list(cols_full_flag[cols_full_flag].index)
   339  41146.2 MiB      0.0 MiB                   print 'Non-full columns: {}'.format(len(non_full_cols))
   340                             
   341  41146.2 MiB      0.0 MiB                   le = LabelEncoder()
   342  41146.7 MiB      0.5 MiB                   obj_cols = df.select_dtypes(include=['object']).columns
   343                                             # print 'Obj columns: ', list(obj_cols)
   344  41146.7 MiB      0.0 MiB                   for col in obj_cols:
   345  41144.2 MiB     -2.5 MiB                       df[col] = le.fit_transform(df[col])
   346                             
   347  35861.1 MiB  -5283.1 MiB               df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   348  35861.3 MiB      0.2 MiB               df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   349                             
   350  35861.3 MiB      0.0 MiB           ub.log('Dropping Id and Response columns...')
   351  35861.3 MiB      0.0 MiB           columns_to_drop = ['Id', 'Response']
   352  40486.3 MiB   4625.0 MiB           shuffle_col = df_train[['Id']].copy()
   353  40486.3 MiB      0.0 MiB           shuffle_col['Id'] = np.random.randn(len(shuffle_col))
   354                             
   355  40486.3 MiB      0.0 MiB           y_total_df = df_train['Response']
   356  40486.3 MiB      0.0 MiB           y_total = df_train['Response'].values
   357  45912.5 MiB   5426.2 MiB           df_train.drop(columns_to_drop, axis=1, inplace=True)
   358  48425.4 MiB   2512.9 MiB           df_test.drop(columns_to_drop, axis=1, inplace=True)
   359                             
   360  48425.4 MiB      0.0 MiB           print df_train.shape
   361  48425.4 MiB      0.0 MiB           print df_test.shape
   362  48425.4 MiB      0.0 MiB           prior = np.sum(y_total) / (1. * len(y_total))
   363  48425.4 MiB      0.0 MiB           print 'prior: {}'.format(prior)
   364  48425.4 MiB      0.0 MiB           run_info['prior'] = prior
   365  48322.0 MiB   -103.4 MiB           gc.collect()
   366                             
   367  48322.0 MiB      0.0 MiB           feature_imp_fname_tmplate = os.path.join(ub.output_dir, 'feature_importance_xgb_{}')
   368  48322.0 MiB      0.0 MiB           top_features_fname = feature_imp_fname_tmplate.format('accumu_list.txt')
   369  48322.0 MiB      0.0 MiB           if feature_down_select:
   370                                         ub.log('Feature down selected based on {}...'.format(top_features_fname))
   371                                         with open(top_features_fname, 'r') as tf:
   372                                             selected_cols = [x.strip() for x in tf.readlines()]
   373                                         df_train = df_train[selected_cols]
   374                                         df_test = df_test[selected_cols]
   375                                         print df_train.shape
   376                                         print df_test.shape
   377                                         print df_train.columns
   378                             
   379  48322.0 MiB      0.0 MiB           feature_names = list(df_train.columns)
   380                             
   381  48322.0 MiB      0.0 MiB           postfix_train = '{}_{}of{}'.format(datetime_str, N_files_train, N_splits)
   382  48322.0 MiB      0.0 MiB           postfix_test = '{}_{}of{}'.format(datetime_str, N_files_test, N_splits)
   383                             
   384  48322.0 MiB      0.0 MiB           run_info['postfix_train'] = postfix_train
   385  48322.0 MiB      0.0 MiB           run_info['postfix_test'] = postfix_test
   386                             
   387  48322.0 MiB      0.0 MiB           testsize = 0.3
   388  48322.0 MiB      0.0 MiB           run_info['testsize'] = testsize
   389                             
   390  48322.0 MiB      0.0 MiB           train_test_split_method = 1
   391                             
   392  48322.0 MiB      0.0 MiB           ub.log('Train/val split using testsize={}, split_method={}'.format(testsize, train_test_split_method))
   393  48322.0 MiB      0.0 MiB           if train_test_split_method == 1:
   394  48324.6 MiB      2.6 MiB               train_idx = shuffle_col[shuffle_col['Id'] > testsize].index
   395  48324.6 MiB      0.0 MiB               val_idx = shuffle_col[shuffle_col['Id'] <= testsize].index
   396  48324.6 MiB      0.0 MiB               ub.log('Done shuffling...')
   397  48324.6 MiB      0.0 MiB               print 'len of train_idx', len(train_idx)
   398  48324.6 MiB      0.0 MiB               print 'len of val_idx', len(val_idx)
   399  48324.6 MiB      0.0 MiB               y_train = y_total_df.loc[train_idx].values
   400  48324.6 MiB      0.0 MiB               y_val = y_total_df.loc[val_idx].values
   401                             
   402  51913.5 MiB   3589.0 MiB               xgtrain = xgb.DMatrix(df_train.loc[train_idx].values, y_train, feature_names=feature_names)
   403  51913.5 MiB      0.0 MiB               ub.log('Assembled xgtrain')
   404  49844.3 MiB  -2069.2 MiB               xgval = xgb.DMatrix(df_train.loc[val_idx].values, y_val, feature_names=feature_names)
   405  49844.6 MiB      0.3 MiB               ub.log('Assembled xgval')
   406  49844.6 MiB      0.0 MiB               del df_train
   407  49844.6 MiB      0.0 MiB               ub.log('Deleted df_train')
   408  37278.0 MiB -12566.7 MiB               gc.collect()
   409                                     else:
   410                                         x_train, x_val, y_train, y_val = train_test_split(df_train.values, y_total, test_size=testsize)
   411                                         ub.log('Done shuffling...')
   412                                         print x_train.shape
   413                                         print x_val.shape
   414                                         del df_train
   415                                         gc.collect()
   416                                         ub.log('Deleted df_train')
   417                             
   418                                         xgtrain = xgb.DMatrix(x_train, y_train, feature_names=feature_names)
   419                                         ub.log('Assembled xgtrain')
   420                                         xgval = xgb.DMatrix(x_val, y_val, feature_names=feature_names)
   421                                         ub.log('Assembled xgval')
   422                                         del x_train
   423                                         del x_val
   424                                         gc.collect()
   425                             
   426  37278.0 MiB      0.0 MiB           fname_xgtrain = os.path.join(ub.code_dir, 'xgtrain_{}.buffer'.format(postfix_train))
   427  37696.3 MiB    418.3 MiB           xgtrain.save_binary(fname_xgtrain)
   428  37696.3 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgtrain))
   429                             
   430  37696.3 MiB      0.0 MiB           fname_xgval = os.path.join(ub.code_dir, 'xgval_{}.buffer'.format(postfix_train))
   431  37696.9 MiB      0.6 MiB           xgval.save_binary(fname_xgval)
   432  37696.9 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgval))
   433                             
   434  39651.9 MiB   1954.9 MiB           xgtest = xgb.DMatrix(df_test.values, feature_names=feature_names)
   435  39651.9 MiB      0.0 MiB           ub.log('Assembled xgtest')
   436  39651.9 MiB      0.0 MiB           fname_xgtest = os.path.join(ub.code_dir, 'xgtest_{}.buffer'.format(postfix_test))
   437  39666.8 MiB     14.9 MiB           xgtest.save_binary(fname_xgtest)
   438  39666.8 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgtest))
   439                             
   440  39666.8 MiB      0.0 MiB           del df_test
   441  39678.4 MiB     11.6 MiB           gc.collect()
   442  39678.4 MiB      0.0 MiB           ub.log('Deleted df_test')
   443                             
   444  39678.4 MiB      0.0 MiB           print 'train and val set sizes'
   445  39678.4 MiB      0.0 MiB           print xgtrain.num_row(), xgtrain.num_col()
   446  39678.4 MiB      0.0 MiB           print xgval.num_row(), xgval.num_col()
   447                             
   448  39678.4 MiB      0.0 MiB           run_info['fname_xgtrain'] = fname_xgtrain
   449  39678.4 MiB      0.0 MiB           run_info['fname_xgval'] = fname_xgval
   450  39678.4 MiB      0.0 MiB           run_info['fname_xgtest'] = fname_xgtest
   451                             
   452  39678.4 MiB      0.0 MiB           xgb_params = get_params(basescore=prior)
   453  39678.4 MiB      0.0 MiB           run_info['xgb_params'] = xgb_params
   454  39678.4 MiB      0.0 MiB           ub.log('Get xgb_params')
   455  39678.4 MiB      0.0 MiB           print xgb_params
   456                             
   457  39678.4 MiB      0.0 MiB           xgb_num_rounds = 2000
   458  39678.4 MiB      0.0 MiB           run_info['xgb_num_rounds'] = xgb_num_rounds
   459  39678.4 MiB      0.0 MiB           print 'xgb_num_rounds', xgb_num_rounds
   460  39678.4 MiB      0.0 MiB           if cv:
   461                                         ub.log('Running cross validation...')
   462                                         eval_hist = xgb.cv(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   463                                                            early_stopping_rounds=early_stop_rounds,
   464                                                            feval=ub.mcc_eval, maximize=True,
   465                                                            verbose_eval=1, show_stdv=True, nfold=4, seed=0, stratified=True)
   466                                         print eval_hist
   467                                         run_info['eval_hist'] = eval_hist
   468                             
   469                                     else:
   470  39678.4 MiB      0.0 MiB               ub.log('Running training...')
   471  39678.4 MiB      0.0 MiB               feature_imp_fname = feature_imp_fname_tmplate.format(postfix_train)
   472  39678.4 MiB      0.0 MiB               watchlist = [(xgtrain, 'train'), (xgval, 'eval')]
   473  39678.4 MiB      0.0 MiB               model = xgb.train(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   474  39678.4 MiB      0.0 MiB                                 early_stopping_rounds=early_stop_rounds,
   475  39678.4 MiB      0.0 MiB                                 feval=ub.mcc_eval, maximize=True,
   476  44515.0 MiB   4836.6 MiB                                 evals=watchlist, verbose_eval=True)
   477                             
   478  44515.0 MiB      0.0 MiB               model_fname = os.path.join(ub.output_dir, 'xbg_{}.model'.format(postfix_train))
   479  44515.0 MiB      0.0 MiB               ub.log('Saving model: {}...'.format(model_fname))
   480  44515.0 MiB      0.0 MiB               model.save_model(model_fname)
   481  44515.2 MiB      0.3 MiB               model.dump_model(model_fname + '.raw.txt')
   482  44515.2 MiB      0.0 MiB               run_info['model_fname'] = model_fname
   483                             
   484  44515.2 MiB      0.0 MiB               ntree_limit = model.best_iteration + 1
   485                             
   486  44515.2 MiB      0.0 MiB               ub.log('Predictions on xgtrain...', 'highlight')
   487  44515.2 MiB      0.0 MiB               predictions = model.predict(xgtrain, ntree_limit=ntree_limit)
   488                             
   489  44516.6 MiB      1.4 MiB               best_proba, best_mcc, y_pred = ub.eval_mcc(y_train, predictions, True)
   490  44519.0 MiB      2.4 MiB               mcc_official = matthews_corrcoef(y_train, y_pred)
   491  44519.0 MiB      0.0 MiB               print 'ntree limit:', ntree_limit
   492  44519.0 MiB      0.0 MiB               print 'best_mcc:', best_mcc
   493  44519.0 MiB      0.0 MiB               print 'best_proba:', best_proba
   494  44519.0 MiB      0.0 MiB               print 'matthews_corroef', mcc_official
   495                             
   496  44519.0 MiB      0.0 MiB               ub.log('Predictions on xgval...', 'highlight')
   497  44519.0 MiB      0.0 MiB               predictions = model.predict(xgval, ntree_limit=ntree_limit)
   498                             
   499  44520.8 MiB      1.7 MiB               best_proba, best_mcc, y_pred = ub.eval_mcc(y_val, predictions, True)
   500  44530.3 MiB      9.6 MiB               mcc_official = matthews_corrcoef(y_val, y_pred)
   501  44530.3 MiB      0.0 MiB               print 'ntree limit:', ntree_limit
   502  44530.3 MiB      0.0 MiB               print 'best_mcc:', best_mcc
   503  44530.3 MiB      0.0 MiB               print 'best_proba:', best_proba
   504  44530.3 MiB      0.0 MiB               print 'matthews_corroef', mcc_official
   505                             
   506  44530.3 MiB      0.0 MiB               run_info['ntree_limit'] = ntree_limit
   507  44530.3 MiB      0.0 MiB               run_info['best_mcc'] = best_mcc
   508  44530.3 MiB      0.0 MiB               run_info['best_proba'] = best_proba
   509  44530.3 MiB      0.0 MiB               run_info['mcc_official'] = mcc_official
   510                             
   511  44530.3 MiB      0.0 MiB               if analyze_feature_importance:
   512  44530.3 MiB      0.0 MiB                   ub.log('Analyzing feature importance...')
   513  44530.3 MiB      0.0 MiB                   imp = model.get_fscore()
   514  44530.3 MiB      0.0 MiB                   imp = sorted(imp.items(), key=operator.itemgetter(1))
   515  44531.2 MiB      0.9 MiB                   imp_df = pd.DataFrame(imp, columns=['feature', 'fscore'])
   516  44531.9 MiB      0.7 MiB                   imp_df['fscore'] = imp_df['fscore'] / imp_df['fscore'].sum()
   517                             
   518  44531.9 MiB      0.0 MiB                   ub.log('Output result csv to {}...'.format(feature_imp_fname + '.csv'))
   519  44532.5 MiB      0.6 MiB                   imp_df.to_csv(feature_imp_fname + '.csv')
   520                             
   521  44556.2 MiB     23.7 MiB                   plt.figure()
   522  44576.5 MiB     20.3 MiB                   imp_df.plot(kind='barh', x='feature', y='fscore', legend=False, figsize=(6, 10))
   523  44576.5 MiB      0.0 MiB                   plt.title('XGBoost Feature Importance @ {}'.format(postfix_train))
   524  44576.5 MiB      0.0 MiB                   plt.xlabel('relative importance')
   525  44589.9 MiB     13.4 MiB                   plt.gcf().savefig(feature_imp_fname + '.png', bbox_inches='tight')
   526                             
   527  44589.9 MiB      0.0 MiB                   feature_lists = glob.glob(feature_imp_fname_tmplate.replace('{}', '*.csv'))
   528  44589.9 MiB      0.0 MiB                   ub.log('Aggregating previous analysis results...')
   529  44589.9 MiB      0.0 MiB                   print feature_lists
   530  44589.9 MiB      0.0 MiB                   features_df = None
   531  44589.9 MiB      0.0 MiB                   if feature_lists:
   532  44590.6 MiB      0.7 MiB                       for f_l in feature_lists:
   533  44590.4 MiB     -0.2 MiB                           tmp_df = pd.read_csv(f_l, index_col=0)
   534  44590.4 MiB      0.0 MiB                           if features_df is None:
   535  44590.4 MiB      0.0 MiB                               features_df = tmp_df
   536                                                     else:
   537  44590.6 MiB      0.2 MiB                               features_df = pd.concat([features_df, tmp_df], ignore_index=True)
   538                             
   539  44590.8 MiB      0.2 MiB                   f_df = features_df.groupby(['feature']).mean().reset_index()
   540  44590.8 MiB      0.0 MiB                   f_df['overall'] = True
   541  44590.8 MiB      0.0 MiB                   imp_df['overall'] = False
   542  44590.8 MiB      0.0 MiB                   merged_df = pd.concat([imp_df, f_df]).sort_values(by=['overall', 'fscore'], ascending=False)
   543  44590.8 MiB      0.0 MiB                   sns_plot = sns.factorplot(y='feature', x='fscore', data=merged_df, hue='overall', kind='bar',
   544  44655.6 MiB     64.9 MiB                                             hue_order=[True, False], size=20, aspect=0.5)
   545  44683.2 MiB     27.6 MiB                   sns_plot.savefig(feature_imp_fname + '_overall.png', bbox_inches='tight')
   546                             
   547  44683.2 MiB      0.0 MiB                   ub.log('Output overall result csv to {}...'.format(top_features_fname))
   548  44683.2 MiB      0.0 MiB                   with open(top_features_fname, 'w') as tf:
   549  44683.2 MiB      0.0 MiB                       tf.write('\n'.join(list(set(merged_df.feature.values))))
   550                             
   551  44683.2 MiB      0.0 MiB           run_info_fname = os.path.join(ub.output_dir, 'run_info_{}.txt'.format(postfix_train))
   552  44683.2 MiB      0.0 MiB           ub.log('Saving run_info into {}'.format(run_info_fname))
   553  44683.2 MiB      0.0 MiB           print run_info
   554  44683.2 MiB      0.0 MiB           with open(run_info_fname, 'w') as fp:
   555  44683.2 MiB      0.0 MiB               fp.write(str(run_info))
   556                             
   557                                         # json has trouble serializing np.float32
   558                                         # with open(run_info_fname, 'w') as fp:
   559                                         #    json.dump(run_info, fp)
   560                                 else:
   561                                     ub.log('Loading run info from {} ...'.format(run_info_fname))
   562                                     with open(run_info_fname, 'r') as fp:
   563                                         run_info = eval(fp.read())
   564                                     print json.dumps(run_info, indent=2)
   565                             
   566                                     model = xgb.Booster()
   567                                     ub.log('Loading model {} ...'.format(run_info['model_fname']))
   568                                     model.load_model(run_info['model_fname'])
   569                                     ub.log('Loading xgtest data {} ...'.format(run_info['fname_xgtest']))
   570                                     xgtest = xgb.DMatrix(run_info['fname_xgtest'])
   571                                     ub.log('XGB making predictions...')
   572                                     ypred = model.predict(xgtest, ntree_limit=run_info['ntree_limit'])
   573                             
   574                                     nrows = len(ypred)
   575                                     postfix_train = run_info['postfix_train']
   576                             
   577                                     sample = pd.read_csv(os.path.join(ub.data_dir, 'sample_submission.csv'), nrows=nrows)
   578                                     sample['Response'] = ypred
   579                                     fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}_prob.csv".format(postfix_train))
   580                                     ub.log('Writing output file (raw proba) {} ...'.format(fname_output))
   581                                     sample.to_csv(fname_output, index=False)
   582                             
   583                                     best_proba = run_info['best_proba']
   584                                     ub.log('Using threshold: best_proba == {}'.format(best_proba))
   585                                     sample['Response'] = (ypred > best_proba).astype(int)
   586                                     fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}.csv".format(postfix_train))
   587                                     ub.log('Writing output file {} ...'.format(fname_output))
   588                                     sample.to_csv(fname_output, index=False)
   589  44683.2 MiB      0.0 MiB       return run_info_fname


Filename: explore2.py

Line #    Mem usage    Increment   Line Contents
================================================
   230  14622.8 MiB      0.0 MiB   @profile(stream=f_mem)
   231                             def main(run_info_fname=None,
   232                                      N_start=None,
   233                                      N_files_train=10,
   234                                      N_files_test=10,
   235                                      cv=False,
   236                                      # if True running cross validation if False, run single model training session and importance analysis
   237                                      feature_down_select=False,
   238                                      analyze_feature_importance=False,
   239                                      early_stop_rounds=10
   240                                      ):
   241  14622.8 MiB      0.0 MiB       datetime_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
   242                             
   243  14622.8 MiB      0.0 MiB       if run_info_fname is None:
   244                                     run_info = dict()
   245                                     N_splits = ub.N_split
   246                                     if N_files_train > N_splits:
   247                                         N_files_train = N_splits
   248                                     if N_files_test > N_splits:
   249                                         N_files_test = N_splits
   250                             
   251                                     do_filtering = False
   252                             
   253                                     if analyze_feature_importance:
   254                                         do_filtering = False
   255                             
   256                                     if feature_down_select:
   257                                         do_filtering = False
   258                                         analyze_feature_importance = False
   259                             
   260                                     run_info['N_splits'] = N_splits
   261                                     run_info['N_files_train'] = N_files_train
   262                                     run_info['N_files_test'] = N_files_test
   263                                     run_info['do_filtering'] = do_filtering
   264                                     run_info['feature_down_select'] = feature_down_select
   265                                     run_info['cv'] = cv
   266                                     run_info['analyze_feature_importance'] = analyze_feature_importance
   267                                     run_info['early_stop_rounds'] = early_stop_rounds
   268                             
   269                                     df_train, n_start = load_data(load_test=False, N_start=N_start, N_read=N_files_train, N_split=N_splits,
   270                                                                   shuffle=False,
   271                                                                   filter=do_filtering)
   272                                     df_test, _ = load_data(load_test=True, N_start=n_start, N_read=N_files_test, N_split=N_splits, shuffle=False,
   273                                                            filter=do_filtering)
   274                             
   275                                     ub.log('generating id diff columns based on various dates columns')
   276                                     dates_cols = [x for x in list(df_train.columns) if 'start_date' in x or 'end_date' in x]
   277                             
   278                                     # print dates_cols
   279                             
   280                                     df_datesort = pd.concat([df_train[['Id'] + dates_cols], df_test[['Id'] + dates_cols]],
   281                                                             ignore_index=True)
   282                                     gc.collect()
   283                             
   284                                     for c in dates_cols:
   285                                         df_datesort.sort_values(by=[c, 'Id'], inplace=True)
   286                                         df_datesort[c + '_id_diff'] = df_datesort['Id'].diff().fillna(999999).astype(int)
   287                                         df_datesort[c + '_id_diff_reverse'] = df_datesort['Id'].iloc[::-1].diff().fillna(999999).astype(int)
   288                             
   289                                         df_datesort.drop([c], axis=1, inplace=True)
   290                             
   291                                     df_datesort.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_datesort_debug.csv'))
   292                             
   293                                     gc.collect()
   294                                     df_train = df_train.merge(df_datesort, on='Id')
   295                                     df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_debug.csv'))
   296                             
   297                                     gc.collect()
   298                                     df_test = df_test.merge(df_datesort, on='Id')
   299                                     df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_test_debug.csv'))
   300                             
   301                                     df_test['Response'] = 0
   302                             
   303                                     print df_train.shape
   304                                     print df_test.shape
   305                                     gc.collect()
   306                             
   307                                     if N_files_train == N_splits:
   308                                         split_data(df_train,
   309                                                    output_fname_template=os.path.join(ub.processed_data_dir, 'df_train_preprocessed_part{}.csv'))
   310                                     if N_files_test == N_splits:
   311                                         split_data(df_test,
   312                                                    output_fname_template=os.path.join(ub.processed_data_dir, 'df_test_preprocessed_part{}.csv'))
   313                             
   314                                     fillna = True
   315                                     run_info['fillna'] = fillna
   316                                     if fillna:
   317                                         ub.log('Filling na...')
   318                                         for df in [df_train, df_test]:
   319                                             cols_full_flag = df.isnull().any()
   320                                             non_full_cols = list(cols_full_flag[cols_full_flag].index)
   321                                             print 'Non-full columns: {}'.format(len(non_full_cols))
   322                                             # print non_full_cols
   323                             
   324                                             if 1:
   325                                                 df.fillna(-999999, inplace=True)
   326                                             else:
   327                                                 # print df.PersonalField7.unique()
   328                                                 for c in non_full_cols:
   329                                                     if len(df[c].unique()) > 2:
   330                                                         most_frequent_items = df[c].value_counts().idxmax()
   331                                                         print c, most_frequent_items
   332                                                         df[c].fillna(value=most_frequent_items, inplace=True)
   333                                                     else:  # if it is only a pair of value [somthing, nan] then fill in "missing"
   334                                                         df[c].fillna(value='missing', inplace=True)
   335                                                         print c, df[c].unique()
   336                             
   337                                             cols_full_flag = df.isnull().any()
   338                                             non_full_cols = list(cols_full_flag[cols_full_flag].index)
   339                                             print 'Non-full columns: {}'.format(len(non_full_cols))
   340                             
   341                                             le = LabelEncoder()
   342                                             obj_cols = df.select_dtypes(include=['object']).columns
   343                                             # print 'Obj columns: ', list(obj_cols)
   344                                             for col in obj_cols:
   345                                                 df[col] = le.fit_transform(df[col])
   346                             
   347                                         df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   348                                         df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   349                             
   350                                     ub.log('Dropping Id and Response columns...')
   351                                     columns_to_drop = ['Id', 'Response']
   352                                     shuffle_col = df_train[['Id']].copy()
   353                                     shuffle_col['Id'] = np.random.randn(len(shuffle_col))
   354                             
   355                                     y_total_df = df_train['Response']
   356                                     y_total = df_train['Response'].values
   357                                     df_train.drop(columns_to_drop, axis=1, inplace=True)
   358                                     df_test.drop(columns_to_drop, axis=1, inplace=True)
   359                             
   360                                     print df_train.shape
   361                                     print df_test.shape
   362                                     prior = np.sum(y_total) / (1. * len(y_total))
   363                                     print 'prior: {}'.format(prior)
   364                                     run_info['prior'] = prior
   365                                     gc.collect()
   366                             
   367                                     feature_imp_fname_tmplate = os.path.join(ub.output_dir, 'feature_importance_xgb_{}')
   368                                     top_features_fname = feature_imp_fname_tmplate.format('accumu_list.txt')
   369                                     if feature_down_select:
   370                                         ub.log('Feature down selected based on {}...'.format(top_features_fname))
   371                                         with open(top_features_fname, 'r') as tf:
   372                                             selected_cols = [x.strip() for x in tf.readlines()]
   373                                         df_train = df_train[selected_cols]
   374                                         df_test = df_test[selected_cols]
   375                                         print df_train.shape
   376                                         print df_test.shape
   377                                         print df_train.columns
   378                             
   379                                     feature_names = list(df_train.columns)
   380                             
   381                                     postfix_train = '{}_{}of{}'.format(datetime_str, N_files_train, N_splits)
   382                                     postfix_test = '{}_{}of{}'.format(datetime_str, N_files_test, N_splits)
   383                             
   384                                     run_info['postfix_train'] = postfix_train
   385                                     run_info['postfix_test'] = postfix_test
   386                             
   387                                     testsize = 0.3
   388                                     run_info['testsize'] = testsize
   389                             
   390                                     train_test_split_method = 1
   391                             
   392                                     ub.log('Train/val split using testsize={}, split_method={}'.format(testsize, train_test_split_method))
   393                                     if train_test_split_method == 1:
   394                                         train_idx = shuffle_col[shuffle_col['Id'] > testsize].index
   395                                         val_idx = shuffle_col[shuffle_col['Id'] <= testsize].index
   396                                         ub.log('Done shuffling...')
   397                                         print 'len of train_idx', len(train_idx)
   398                                         print 'len of val_idx', len(val_idx)
   399                                         y_train = y_total_df.loc[train_idx].values
   400                                         y_val = y_total_df.loc[val_idx].values
   401                             
   402                                         xgtrain = xgb.DMatrix(df_train.loc[train_idx].values, y_train, feature_names=feature_names)
   403                                         ub.log('Assembled xgtrain')
   404                                         xgval = xgb.DMatrix(df_train.loc[val_idx].values, y_val, feature_names=feature_names)
   405                                         ub.log('Assembled xgval')
   406                                         del df_train
   407                                         ub.log('Deleted df_train')
   408                                         gc.collect()
   409                                     else:
   410                                         x_train, x_val, y_train, y_val = train_test_split(df_train.values, y_total, test_size=testsize)
   411                                         ub.log('Done shuffling...')
   412                                         print x_train.shape
   413                                         print x_val.shape
   414                                         del df_train
   415                                         gc.collect()
   416                                         ub.log('Deleted df_train')
   417                             
   418                                         xgtrain = xgb.DMatrix(x_train, y_train, feature_names=feature_names)
   419                                         ub.log('Assembled xgtrain')
   420                                         xgval = xgb.DMatrix(x_val, y_val, feature_names=feature_names)
   421                                         ub.log('Assembled xgval')
   422                                         del x_train
   423                                         del x_val
   424                                         gc.collect()
   425                             
   426                                     fname_xgtrain = os.path.join(ub.code_dir, 'xgtrain_{}.buffer'.format(postfix_train))
   427                                     xgtrain.save_binary(fname_xgtrain)
   428                                     ub.log('Saved {}'.format(fname_xgtrain))
   429                             
   430                                     fname_xgval = os.path.join(ub.code_dir, 'xgval_{}.buffer'.format(postfix_train))
   431                                     xgval.save_binary(fname_xgval)
   432                                     ub.log('Saved {}'.format(fname_xgval))
   433                             
   434                                     xgtest = xgb.DMatrix(df_test.values, feature_names=feature_names)
   435                                     ub.log('Assembled xgtest')
   436                                     fname_xgtest = os.path.join(ub.code_dir, 'xgtest_{}.buffer'.format(postfix_test))
   437                                     xgtest.save_binary(fname_xgtest)
   438                                     ub.log('Saved {}'.format(fname_xgtest))
   439                             
   440                                     del df_test
   441                                     gc.collect()
   442                                     ub.log('Deleted df_test')
   443                             
   444                                     print 'train and val set sizes'
   445                                     print xgtrain.num_row(), xgtrain.num_col()
   446                                     print xgval.num_row(), xgval.num_col()
   447                             
   448                                     run_info['fname_xgtrain'] = fname_xgtrain
   449                                     run_info['fname_xgval'] = fname_xgval
   450                                     run_info['fname_xgtest'] = fname_xgtest
   451                             
   452                                     xgb_params = get_params(basescore=prior)
   453                                     run_info['xgb_params'] = xgb_params
   454                                     ub.log('Get xgb_params')
   455                                     print xgb_params
   456                             
   457                                     xgb_num_rounds = 2000
   458                                     run_info['xgb_num_rounds'] = xgb_num_rounds
   459                                     print 'xgb_num_rounds', xgb_num_rounds
   460                                     if cv:
   461                                         ub.log('Running cross validation...')
   462                                         eval_hist = xgb.cv(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   463                                                            early_stopping_rounds=early_stop_rounds,
   464                                                            feval=ub.mcc_eval, maximize=True,
   465                                                            verbose_eval=1, show_stdv=True, nfold=4, seed=0, stratified=True)
   466                                         print eval_hist
   467                                         run_info['eval_hist'] = eval_hist
   468                             
   469                                     else:
   470                                         ub.log('Running training...')
   471                                         feature_imp_fname = feature_imp_fname_tmplate.format(postfix_train)
   472                                         watchlist = [(xgtrain, 'train'), (xgval, 'eval')]
   473                                         model = xgb.train(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   474                                                           early_stopping_rounds=early_stop_rounds,
   475                                                           feval=ub.mcc_eval, maximize=True,
   476                                                           evals=watchlist, verbose_eval=True)
   477                             
   478                                         model_fname = os.path.join(ub.output_dir, 'xbg_{}.model'.format(postfix_train))
   479                                         ub.log('Saving model: {}...'.format(model_fname))
   480                                         model.save_model(model_fname)
   481                                         model.dump_model(model_fname + '.raw.txt')
   482                                         run_info['model_fname'] = model_fname
   483                             
   484                                         ntree_limit = model.best_iteration + 1
   485                             
   486                                         ub.log('Predictions on xgtrain...', 'highlight')
   487                                         predictions = model.predict(xgtrain, ntree_limit=ntree_limit)
   488                             
   489                                         best_proba, best_mcc, y_pred = ub.eval_mcc(y_train, predictions, True)
   490                                         mcc_official = matthews_corrcoef(y_train, y_pred)
   491                                         print 'ntree limit:', ntree_limit
   492                                         print 'best_mcc:', best_mcc
   493                                         print 'best_proba:', best_proba
   494                                         print 'matthews_corroef', mcc_official
   495                             
   496                                         ub.log('Predictions on xgval...', 'highlight')
   497                                         predictions = model.predict(xgval, ntree_limit=ntree_limit)
   498                             
   499                                         best_proba, best_mcc, y_pred = ub.eval_mcc(y_val, predictions, True)
   500                                         mcc_official = matthews_corrcoef(y_val, y_pred)
   501                                         print 'ntree limit:', ntree_limit
   502                                         print 'best_mcc:', best_mcc
   503                                         print 'best_proba:', best_proba
   504                                         print 'matthews_corroef', mcc_official
   505                             
   506                                         run_info['ntree_limit'] = ntree_limit
   507                                         run_info['best_mcc'] = best_mcc
   508                                         run_info['best_proba'] = best_proba
   509                                         run_info['mcc_official'] = mcc_official
   510                             
   511                                         if analyze_feature_importance:
   512                                             ub.log('Analyzing feature importance...')
   513                                             imp = model.get_fscore()
   514                                             imp = sorted(imp.items(), key=operator.itemgetter(1))
   515                                             imp_df = pd.DataFrame(imp, columns=['feature', 'fscore'])
   516                                             imp_df['fscore'] = imp_df['fscore'] / imp_df['fscore'].sum()
   517                             
   518                                             ub.log('Output result csv to {}...'.format(feature_imp_fname + '.csv'))
   519                                             imp_df.to_csv(feature_imp_fname + '.csv')
   520                             
   521                                             plt.figure()
   522                                             imp_df.plot(kind='barh', x='feature', y='fscore', legend=False, figsize=(6, 10))
   523                                             plt.title('XGBoost Feature Importance @ {}'.format(postfix_train))
   524                                             plt.xlabel('relative importance')
   525                                             plt.gcf().savefig(feature_imp_fname + '.png', bbox_inches='tight')
   526                             
   527                                             feature_lists = glob.glob(feature_imp_fname_tmplate.replace('{}', '*.csv'))
   528                                             ub.log('Aggregating previous analysis results...')
   529                                             print feature_lists
   530                                             features_df = None
   531                                             if feature_lists:
   532                                                 for f_l in feature_lists:
   533                                                     tmp_df = pd.read_csv(f_l, index_col=0)
   534                                                     if features_df is None:
   535                                                         features_df = tmp_df
   536                                                     else:
   537                                                         features_df = pd.concat([features_df, tmp_df], ignore_index=True)
   538                             
   539                                             f_df = features_df.groupby(['feature']).mean().reset_index()
   540                                             f_df['overall'] = True
   541                                             imp_df['overall'] = False
   542                                             merged_df = pd.concat([imp_df, f_df]).sort_values(by=['overall', 'fscore'], ascending=False)
   543                                             sns_plot = sns.factorplot(y='feature', x='fscore', data=merged_df, hue='overall', kind='bar',
   544                                                                       hue_order=[True, False], size=20, aspect=0.5)
   545                                             sns_plot.savefig(feature_imp_fname + '_overall.png', bbox_inches='tight')
   546                             
   547                                             ub.log('Output overall result csv to {}...'.format(top_features_fname))
   548                                             with open(top_features_fname, 'w') as tf:
   549                                                 tf.write('\n'.join(list(set(merged_df.feature.values))))
   550                             
   551                                     run_info_fname = os.path.join(ub.output_dir, 'run_info_{}.txt'.format(postfix_train))
   552                                     ub.log('Saving run_info into {}'.format(run_info_fname))
   553                                     print run_info
   554                                     with open(run_info_fname, 'w') as fp:
   555                                         fp.write(str(run_info))
   556                             
   557                                         # json has trouble serializing np.float32
   558                                         # with open(run_info_fname, 'w') as fp:
   559                                         #    json.dump(run_info, fp)
   560                                 else:
   561  14622.8 MiB      0.0 MiB           ub.log('Loading run info from {} ...'.format(run_info_fname))
   562  14622.8 MiB      0.0 MiB           with open(run_info_fname, 'r') as fp:
   563  14623.0 MiB      0.2 MiB               run_info = eval(fp.read())
   564  14623.0 MiB      0.0 MiB           print json.dumps(run_info, indent=2)
   565                             
   566  14623.0 MiB      0.0 MiB           model = xgb.Booster()
   567  14623.0 MiB      0.0 MiB           ub.log('Loading model {} ...'.format(run_info['model_fname']))
   568  14623.0 MiB      0.0 MiB           model.load_model(run_info['model_fname'])
   569  14623.0 MiB      0.0 MiB           ub.log('Loading xgtest data {} ...'.format(run_info['fname_xgtest']))
   570  27242.7 MiB  12619.8 MiB           xgtest = xgb.DMatrix(run_info['fname_xgtest'])
   571  27242.7 MiB      0.0 MiB           ub.log('XGB making predictions...')
   572  27244.1 MiB      1.4 MiB           ypred = model.predict(xgtest, ntree_limit=run_info['ntree_limit'])
   573                             
   574  27244.1 MiB      0.0 MiB           nrows = len(ypred)
   575  27244.1 MiB      0.0 MiB           postfix_train = run_info['postfix_train']
   576                             
   577  27267.5 MiB     23.4 MiB           sample = pd.read_csv(os.path.join(ub.data_dir, 'sample_submission.csv'), nrows=nrows)
   578  27267.6 MiB      0.1 MiB           sample['Response'] = ypred
   579  27267.6 MiB      0.0 MiB           fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}_prob.csv".format(postfix_train))
   580  27267.6 MiB      0.0 MiB           ub.log('Writing output file (raw proba) {} ...'.format(fname_output))
   581  27268.9 MiB      1.3 MiB           sample.to_csv(fname_output, index=False)
   582                             
   583  27268.9 MiB      0.0 MiB           best_proba = run_info['best_proba']
   584  27268.9 MiB      0.0 MiB           ub.log('Using threshold: best_proba == {}'.format(best_proba))
   585  27271.8 MiB      2.9 MiB           sample['Response'] = (ypred > best_proba).astype(int)
   586  27271.8 MiB      0.0 MiB           fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}.csv".format(postfix_train))
   587  27271.8 MiB      0.0 MiB           ub.log('Writing output file {} ...'.format(fname_output))
   588  27272.7 MiB      1.0 MiB           sample.to_csv(fname_output, index=False)
   589  27272.7 MiB      0.0 MiB       return run_info_fname


