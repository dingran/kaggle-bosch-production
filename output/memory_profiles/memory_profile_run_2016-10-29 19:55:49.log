Filename: main_bosch.py

Line #    Mem usage    Increment   Line Contents
================================================
   364    168.0 MiB      0.0 MiB   @profile(stream=f_mem)
   365                             def main(run_info_fname=None,
   366                                      compile_data=False,
   367                                      train_model=False,
   368                                      make_submission=False,
   369                                      N_start=None,
   370                                      N_files_train=1,
   371                                      N_files_test=1,
   372                                      original_cols_only=False,
   373                             
   374                                      feature_list_file=None,
   375                                      analyze_feature_importance=False,
   376                                      cv=False,
   377                                      # if True running cross validation if False, run single model training session and importance analysis
   378                                      early_stop_rounds=10,
   379                                      N_rounds=1000,
   380                                      testsize=0.1,
   381                                      xgb_params=None,
   382                             
   383                                      skip_date_csv=False,
   384                                      skip_num_csv=False,
   385                                      skip_cat_csv=False
   386                                      ):
   387    168.0 MiB      0.0 MiB       datetime_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
   388                             
   389    168.0 MiB      0.0 MiB       if compile_data:
   390    168.0 MiB      0.0 MiB           run_info = dict()
   391    168.0 MiB      0.0 MiB           N_splits = ub.N_split
   392    168.0 MiB      0.0 MiB           if N_files_train > N_splits:
   393                                         N_files_train = N_splits
   394    168.0 MiB      0.0 MiB           if N_files_test > N_splits:
   395                                         N_files_test = N_splits
   396                             
   397    168.0 MiB      0.0 MiB           if analyze_feature_importance and (feature_list_file is not None):
   398                                         assert 0
   399                             
   400    168.0 MiB      0.0 MiB           run_info['compile_data'] = compile_data
   401    168.0 MiB      0.0 MiB           run_info['N_splits'] = N_splits
   402    168.0 MiB      0.0 MiB           run_info['N_files_train'] = N_files_train
   403    168.0 MiB      0.0 MiB           run_info['N_files_test'] = N_files_test
   404    168.0 MiB      0.0 MiB           run_info['original_cols_only'] = original_cols_only
   405    168.0 MiB      0.0 MiB           run_info['features_list_file'] = feature_list_file
   406    168.0 MiB      0.0 MiB           run_info['skip_date_csv'] = skip_date_csv
   407    168.0 MiB      0.0 MiB           run_info['skip_num_csv'] = skip_num_csv
   408    168.0 MiB      0.0 MiB           run_info['skip_cat_csv'] = skip_cat_csv
   409                             
   410    168.0 MiB      0.0 MiB           df_train, n_start = load_data(load_test=False, N_start=N_start, N_read=N_files_train, N_split=N_splits,
   411    168.0 MiB      0.0 MiB                                         original_cols_only=original_cols_only,
   412    168.0 MiB      0.0 MiB                                         feature_list_file=feature_list_file,
   413    168.0 MiB      0.0 MiB                                         load_categorical_csv=(not skip_cat_csv),
   414    168.0 MiB      0.0 MiB                                         load_date_csv=(not skip_date_csv),
   415   1354.1 MiB   1186.2 MiB                                         load_numerical_csv=(not skip_num_csv))
   416   1354.1 MiB      0.0 MiB           df_test, _ = load_data(load_test=True, N_start=n_start, N_read=N_files_test, N_split=N_splits,
   417   1354.1 MiB      0.0 MiB                                  original_cols_only=original_cols_only,
   418   1354.1 MiB      0.0 MiB                                  feature_list_file=feature_list_file,
   419   1354.1 MiB      0.0 MiB                                  load_categorical_csv=(not skip_cat_csv),
   420   1354.1 MiB      0.0 MiB                                  load_date_csv=(not skip_date_csv),
   421   2537.6 MiB   1183.5 MiB                                  load_numerical_csv=(not skip_num_csv))
   422                             
   423   2537.6 MiB      0.0 MiB           ub.log('generating id diff columns based on various dates columns')
   424   2537.6 MiB      0.0 MiB           dates_cols = [x for x in list(df_train.columns) if ('start_date' in x or 'end_date' in x) and ('rank' not in x)]
   425                             
   426                                     # print dates_cols
   427                             
   428   2744.9 MiB    207.3 MiB           df_datesort = pd.concat([df_train[['Id'] + dates_cols], df_test[['Id'] + dates_cols]],
   429   2665.9 MiB    -79.0 MiB                                   ignore_index=True)
   430   2665.9 MiB      0.0 MiB           gc.collect()
   431                             
   432   6542.3 MiB   3876.4 MiB           for c in dates_cols:
   433                                         # print c
   434   6223.4 MiB   -318.9 MiB               df_datesort.sort_values(by=[c, 'Id'], inplace=True)
   435   6223.4 MiB      0.0 MiB               df_datesort[c + '_id_diff'] = df_datesort['Id'].diff().fillna(999999).astype(int)
   436   6223.4 MiB      0.0 MiB               df_datesort[c + '_id_diff_reverse'] = df_datesort['Id'].iloc[::-1].diff().fillna(999999).astype(int)
   437                                         df_datesort[c + '_id_diff_magic'] = \
   438   6087.6 MiB   -135.8 MiB                   1 + 2 * (df_datesort[c + '_id_diff'] > 1) + 1 * (df_datesort[c + '_id_diff_reverse'] < -1)
   439                             
   440   6542.3 MiB    454.7 MiB               df_datesort.drop([c], axis=1, inplace=True)
   441                             
   442   6390.4 MiB   -152.0 MiB           df_datesort.head(n=N_DEBUG_LINES).to_csv(os.path.join(ub.data_dir, 'df_datesort_debug.csv'))
   443                             
   444   3042.6 MiB  -3347.7 MiB           gc.collect()
   445   4400.6 MiB   1358.0 MiB           df_train = df_train.merge(df_datesort, on='Id')
   446   4400.6 MiB      0.0 MiB           df_train.head(n=N_DEBUG_LINES).to_csv(os.path.join(ub.data_dir, 'df_train_debug.csv'))
   447                             
   448   3234.8 MiB  -1165.8 MiB           gc.collect()
   449   4664.6 MiB   1429.7 MiB           df_test = df_test.merge(df_datesort, on='Id')
   450   4664.6 MiB      0.0 MiB           df_test.head(n=N_DEBUG_LINES).to_csv(os.path.join(ub.data_dir, 'df_test_debug.csv'))
   451                             
   452   4640.2 MiB    -24.3 MiB           df_test['Response'] = 0
   453                             
   454   4640.2 MiB      0.0 MiB           print df_train.shape
   455   4640.2 MiB      0.0 MiB           print df_test.shape
   456   3475.2 MiB  -1165.0 MiB           gc.collect()
   457                             
   458                                     # if N_files_train == N_splits:
   459                                     #     split_data(df_train,
   460                                     #                output_fname_template=os.path.join(ub.processed_data_dir, 'df_train_preprocessed_part{}.csv'))
   461                                     # if N_files_test == N_splits:
   462                                     #     split_data(df_test,
   463                                     #                output_fname_template=os.path.join(ub.processed_data_dir, 'df_test_preprocessed_part{}.csv'))
   464                             
   465   3475.2 MiB      0.0 MiB           fillna = True
   466   3475.2 MiB      0.0 MiB           run_info['fillna'] = fillna
   467   3475.2 MiB      0.0 MiB           if fillna:
   468   3475.2 MiB      0.0 MiB               ub.log('Filling na...')
   469   3576.7 MiB    101.5 MiB               for df in [df_train, df_test]:
   470   3576.7 MiB      0.0 MiB                   cols_full_flag = df.isnull().any()
   471   3576.7 MiB      0.0 MiB                   non_full_cols = list(cols_full_flag[cols_full_flag].index)
   472   3576.7 MiB      0.0 MiB                   print 'Non-full columns: {}'.format(len(non_full_cols))
   473                                             # print non_full_cols
   474                             
   475                                             if 1:
   476   3576.7 MiB      0.0 MiB                       df.fillna(-999999, inplace=True)
   477                                             else:
   478                                                 # print df.PersonalField7.unique()
   479                                                 for c in non_full_cols:
   480                                                     if len(df[c].unique()) > 2:
   481                                                         most_frequent_items = df[c].value_counts().idxmax()
   482                                                         print c, most_frequent_items
   483                                                         df[c].fillna(value=most_frequent_items, inplace=True)
   484                                                     else:  # if it is only a pair of value [somthing, nan] then fill in "missing"
   485                                                         df[c].fillna(value='missing', inplace=True)
   486                                                         print c, df[c].unique()
   487                             
   488   3576.7 MiB      0.0 MiB                   cols_full_flag = df.isnull().any()
   489   3576.7 MiB      0.0 MiB                   non_full_cols = list(cols_full_flag[cols_full_flag].index)
   490   3576.7 MiB      0.0 MiB                   print 'Non-full columns: {}'.format(len(non_full_cols))
   491                             
   492   3576.7 MiB      0.0 MiB                   le = LabelEncoder()
   493   3576.7 MiB      0.0 MiB                   obj_cols = df.select_dtypes(include=['object']).columns
   494                                             # print 'Obj columns: ', list(obj_cols)
   495   3576.7 MiB      0.0 MiB                   for col in obj_cols:
   496                                                 df[col] = le.fit_transform(df[col])
   497                             
   498   3576.7 MiB      0.0 MiB               df_train.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   499   3576.7 MiB      0.0 MiB               df_test.head(n=1000).to_csv(os.path.join(ub.data_dir, 'df_train_cleanup_debug.csv'))
   500                             
   501   3576.7 MiB      0.0 MiB           ub.log('Dropping Id and Response columns...')
   502   3576.7 MiB      0.0 MiB           columns_to_drop = ['Id', 'Response']
   503   3576.7 MiB      0.0 MiB           shuffle_col = df_train[['Id']].copy()
   504   3576.7 MiB      0.0 MiB           shuffle_col['Id'] = np.random.rand(len(shuffle_col))
   505                             
   506   3576.7 MiB      0.0 MiB           y_total_df = df_train['Response']
   507   3576.7 MiB      0.0 MiB           y_total = df_train['Response'].values
   508   3979.5 MiB    402.8 MiB           df_train.drop(columns_to_drop, axis=1, inplace=True)
   509   3978.0 MiB     -1.5 MiB           df_test.drop(columns_to_drop, axis=1, inplace=True)
   510                             
   511   3978.0 MiB      0.0 MiB           print df_train.shape
   512   3978.0 MiB      0.0 MiB           print df_test.shape
   513   3978.0 MiB      0.0 MiB           prior = np.sum(y_total) / (1. * len(y_total))
   514   3978.0 MiB      0.0 MiB           print 'prior: {}'.format(prior)
   515   3978.0 MiB      0.0 MiB           run_info['prior'] = prior
   516                             
   517   3978.0 MiB      0.0 MiB           gc.collect()
   518                             
   519   3978.0 MiB      0.0 MiB           feature_imp_fname_template = os.path.join(ub.output_dir, 'feature_importance_xgb_{}')
   520   3978.0 MiB      0.0 MiB           run_info['feature_imp_fname_template'] = feature_imp_fname_template
   521   3978.0 MiB      0.0 MiB           top_features_fname = feature_imp_fname_template.format('accumu_list.txt')
   522   3978.0 MiB      0.0 MiB           run_info['top_features_fname'] = top_features_fname
   523                             
   524                                     # if feature_down_select:
   525                                     #     ub.log('Feature down selected based on {}...'.format(top_features_fname))
   526                                     #     #todo may need to set a maxN for the number of features to use
   527                                     #
   528                                     #     with open(top_features_fname, 'r') as tf:
   529                                     #         selected_cols = [x.strip() for x in tf.readlines()]
   530                                     #     df_train = df_train[selected_cols]
   531                                     #     df_test = df_test[selected_cols]
   532                                     #     print df_train.shape
   533                                     #     print df_test.shape
   534                                     #     print df_train.columns
   535                             
   536   3978.0 MiB      0.0 MiB           feature_names = list(df_train.columns)
   537                             
   538   3978.0 MiB      0.0 MiB           postfix_train = '{}_{}of{}'.format(datetime_str, N_files_train, N_splits)
   539   3978.0 MiB      0.0 MiB           postfix_test = '{}_{}of{}'.format(datetime_str, N_files_test, N_splits)
   540                             
   541   3978.0 MiB      0.0 MiB           run_info['postfix_train'] = postfix_train
   542   3978.0 MiB      0.0 MiB           run_info['postfix_test'] = postfix_test
   543                             
   544   3978.0 MiB      0.0 MiB           run_info['testsize'] = testsize
   545                             
   546   3978.0 MiB      0.0 MiB           train_test_split_method = 1
   547                             
   548   3978.0 MiB      0.0 MiB           ub.log('Train/val split using testsize={}, split_method={}'.format(testsize, train_test_split_method))
   549   3978.0 MiB      0.0 MiB           if train_test_split_method == 1:
   550   3978.0 MiB      0.0 MiB               train_idx = shuffle_col[shuffle_col['Id'] > testsize].index
   551   3978.0 MiB      0.0 MiB               val_idx = shuffle_col[shuffle_col['Id'] <= testsize].index
   552   3978.0 MiB      0.0 MiB               ub.log('Done shuffling...')
   553   3978.0 MiB      0.0 MiB               print 'len of train_idx', len(train_idx)
   554   3978.0 MiB      0.0 MiB               print 'len of val_idx', len(val_idx)
   555   3978.0 MiB      0.0 MiB               y_train = y_total_df.loc[train_idx].values
   556   3978.0 MiB      0.0 MiB               y_val = y_total_df.loc[val_idx].values
   557                             
   558   5245.5 MiB   1267.5 MiB               xgtrain = xgb.DMatrix(df_train.loc[train_idx].values, y_train, feature_names=feature_names)
   559   5245.5 MiB      0.0 MiB               ub.log('Assembled xgtrain')
   560   5388.6 MiB    143.1 MiB               xgval = xgb.DMatrix(df_train.loc[val_idx].values, y_val, feature_names=feature_names)
   561   5388.6 MiB      0.0 MiB               ub.log('Assembled xgval')
   562   5388.6 MiB      0.0 MiB               del df_train
   563   5388.6 MiB      0.0 MiB               ub.log('Deleted df_train')
   564   3981.7 MiB  -1406.9 MiB               gc.collect()
   565                                     else:
   566                                         x_train, x_val, y_train, y_val = train_test_split(df_train.values, y_total, test_size=testsize)
   567                                         ub.log('Done shuffling...')
   568                                         print x_train.shape
   569                                         print x_val.shape
   570                                         del df_train
   571                                         gc.collect()
   572                                         ub.log('Deleted df_train')
   573                             
   574                                         xgtrain = xgb.DMatrix(x_train, y_train, feature_names=feature_names)
   575                                         ub.log('Assembled xgtrain')
   576                                         xgval = xgb.DMatrix(x_val, y_val, feature_names=feature_names)
   577                                         ub.log('Assembled xgval')
   578                                         del x_train
   579                                         del x_val
   580                                         gc.collect()
   581                             
   582   3981.7 MiB      0.0 MiB           fname_xgtrain = os.path.join(ub.processed_data_dir, 'xgtrain_{}.buffer'.format(postfix_train))
   583   3981.9 MiB      0.1 MiB           xgtrain.save_binary(fname_xgtrain)
   584   3981.9 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgtrain))
   585                             
   586   3981.9 MiB      0.0 MiB           fname_xgval = os.path.join(ub.processed_data_dir, 'xgval_{}.buffer'.format(postfix_train))
   587   3981.9 MiB      0.0 MiB           xgval.save_binary(fname_xgval)
   588   3981.9 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgval))
   589                             
   590   5389.3 MiB   1407.4 MiB           xgtest = xgb.DMatrix(df_test.values, feature_names=feature_names)
   591   5389.3 MiB      0.0 MiB           ub.log('Assembled xgtest')
   592   5389.3 MiB      0.0 MiB           fname_xgtest = os.path.join(ub.processed_data_dir, 'xgtest_{}.buffer'.format(postfix_test))
   593   5389.3 MiB      0.0 MiB           xgtest.save_binary(fname_xgtest)
   594   5389.3 MiB      0.0 MiB           ub.log('Saved {}'.format(fname_xgtest))
   595                             
   596   5389.3 MiB      0.0 MiB           del df_test
   597   5389.3 MiB      0.0 MiB           gc.collect()
   598   5389.3 MiB      0.0 MiB           ub.log('Deleted df_test')
   599                             
   600   5389.3 MiB      0.0 MiB           print 'train and val set sizes'
   601   5389.3 MiB      0.0 MiB           print xgtrain.num_row(), xgtrain.num_col()
   602   5389.3 MiB      0.0 MiB           print xgval.num_row(), xgval.num_col()
   603   5389.3 MiB      0.0 MiB           run_info['xgtrain_nrows'] = xgtrain.num_row()
   604   5389.3 MiB      0.0 MiB           run_info['xgval_nrows'] = xgval.num_row()
   605                             
   606   5389.3 MiB      0.0 MiB           run_info['fname_xgtrain'] = fname_xgtrain
   607   5389.3 MiB      0.0 MiB           run_info['fname_xgval'] = fname_xgval
   608   5389.3 MiB      0.0 MiB           run_info['fname_xgtest'] = fname_xgtest
   609                             
   610   5389.3 MiB      0.0 MiB           fname_ytrain = os.path.join(ub.processed_data_dir, 'ytrain_{}.npy'.format(postfix_train))
   611   5389.3 MiB      0.0 MiB           fname_yval = os.path.join(ub.processed_data_dir, 'yval_{}.npy'.format(postfix_train))
   612                             
   613   5389.3 MiB      0.0 MiB           np.save(fname_ytrain, y_train)
   614   5389.3 MiB      0.0 MiB           ub.log('Saved ' + fname_ytrain)
   615                             
   616   5389.3 MiB      0.0 MiB           np.save(fname_yval, y_val)
   617   5389.3 MiB      0.0 MiB           ub.log('Saved ' + fname_yval)
   618                             
   619   5389.3 MiB      0.0 MiB           run_info['fname_ytrain'] = fname_ytrain
   620   5389.3 MiB      0.0 MiB           run_info['fname_yval'] = fname_yval
   621                             
   622   5389.3 MiB      0.0 MiB       if train_model:
   623   5389.3 MiB      0.0 MiB           assert compile_data or (run_info_fname is not None)
   624                             
   625   5389.3 MiB      0.0 MiB           run_info['cv'] = cv
   626   5389.3 MiB      0.0 MiB           run_info['analyze_feature_importance'] = analyze_feature_importance
   627   5389.3 MiB      0.0 MiB           run_info['early_stop_rounds'] = early_stop_rounds
   628                             
   629   5389.3 MiB      0.0 MiB           if not compile_data:
   630                                         ub.log('(train_model) Loading run info from {} ...'.format(run_info_fname))
   631                                         with open(run_info_fname, 'r') as fp:
   632                                             run_info = eval(fp.read())
   633                                         print json.dumps(run_info, indent=2)
   634                             
   635                                         run_info_fname = run_info_fname.replace('.txt', '_{}.txt'.format(datetime_str))
   636                             
   637                                         logged_home_dir = None
   638                                         if ub.home_dir not in run_info['fname_xgtrain']:
   639                                             for i in ub.possible_home_dirs:
   640                                                 if i in run_info['fname_xgtrain']:
   641                                                     logged_home_dir = i
   642                             
   643                                             for k in ['fname_xgtrain', 'fname_xgval', 'fname_ytrain', 'fname_yval']:
   644                                                 run_info[k] = run_info[k].replace(logged_home_dir, ub.home_dir)
   645                             
   646                                             if analyze_feature_importance:
   647                                                 for k in ['feature_imp_fname_template', 'top_feature_fname']:
   648                                                     run_info[k] = run_info[k].replace(logged_home_dir, ub.home_dir)
   649                             
   650                                         ub.log('Loading xgtrain data {} ...'.format(run_info['fname_xgtrain']))
   651                                         xgtrain = xgb.DMatrix(run_info['fname_xgtrain'])
   652                             
   653                                         ub.log('Loading xgval data {} ...'.format(run_info['fname_xgval']))
   654                                         xgval = xgb.DMatrix(run_info['fname_xgval'])
   655                             
   656                                         ub.log('Loading ytrain data {} ...'.format(run_info['fname_ytrain']))
   657                                         y_train = np.load(run_info['fname_ytrain'])
   658                             
   659                                         ub.log('Loading yval data {} ...'.format(run_info['fname_yval']))
   660                                         y_val = np.load(run_info['fname_yval'])
   661                             
   662   5389.3 MiB      0.0 MiB           prior = run_info['prior']
   663   5389.3 MiB      0.0 MiB           postfix_train = run_info['postfix_train']
   664                             
   665   5389.3 MiB      0.0 MiB           if xgb_params is None:
   666                                         xgb_params = get_params(bases_core=prior)
   667                             
   668   5389.3 MiB      0.0 MiB           xgb_params['base_score'] = prior  # n_positive / n_total
   669                                     # xgb_params['scale_pos_weight'] = (1.0 - prior) / prior
   670   5389.3 MiB      0.0 MiB           run_info['xgb_params'] = xgb_params
   671   5389.3 MiB      0.0 MiB           ub.log('Get xgb_params')
   672   5389.3 MiB      0.0 MiB           print xgb_params
   673                             
   674   5389.3 MiB      0.0 MiB           xgb_num_rounds = N_rounds
   675   5389.3 MiB      0.0 MiB           run_info['xgb_num_rounds'] = xgb_num_rounds
   676   5389.3 MiB      0.0 MiB           print 'xgb_num_rounds', xgb_num_rounds
   677   5389.3 MiB      0.0 MiB           if cv:
   678   5389.3 MiB      0.0 MiB               ub.log('Running cross validation...')
   679   5389.3 MiB      0.0 MiB               eval_hist = xgb.cv(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   680   5389.3 MiB      0.0 MiB                                  early_stopping_rounds=early_stop_rounds,
   681   5389.3 MiB      0.0 MiB                                  feval=ub.mcc_eval, maximize=True,
   682   5387.6 MiB     -1.6 MiB                                  verbose_eval=1, show_stdv=True, nfold=3, seed=0, stratified=True)
   683   5387.6 MiB      0.0 MiB               print eval_hist
   684   5387.6 MiB      0.0 MiB               eval_hist_fname = os.path.join(ub.output_dir, 'cv_eval_history_{}.csv'.format(postfix_train))
   685   5387.6 MiB      0.0 MiB               if not compile_data:
   686                                             eval_hist_fname = eval_hist_fname.replace('.csv', '_{}.csv'.format(datetime_str))
   687                             
   688   5387.6 MiB      0.0 MiB               run_info['eval_hist_fname'] = eval_hist_fname
   689   5387.6 MiB      0.0 MiB               eval_hist.to_csv(eval_hist_fname)
   690                             
   691   5387.6 MiB      0.0 MiB               run_info['cv_score_test'] = eval_hist['test-MCC-mean'].max()
   692   5387.6 MiB      0.0 MiB               run_info['cv_score_train'] = eval_hist['train-MCC-mean'].max()
   693                             
   694                                     if 1:
   695   5387.6 MiB      0.0 MiB               ub.log('Running training...')
   696   5387.6 MiB      0.0 MiB               watchlist = [(xgtrain, 'train'), (xgval, 'eval')]
   697   5387.6 MiB      0.0 MiB               model = xgb.train(xgb_params, xgtrain, num_boost_round=xgb_num_rounds,
   698   5387.6 MiB      0.0 MiB                                 early_stopping_rounds=early_stop_rounds,
   699   5387.6 MiB      0.0 MiB                                 feval=ub.mcc_eval, maximize=True,
   700   6654.6 MiB   1266.9 MiB                                 evals=watchlist, verbose_eval=True)
   701                             
   702   6654.6 MiB      0.0 MiB               model_fname = os.path.join(ub.output_dir, 'xbg_{}.model'.format(postfix_train))
   703   6654.6 MiB      0.0 MiB               if not compile_data:
   704                                             model_fname = model_fname.replace('.model', '_{}.model'.format(datetime_str))
   705   6654.6 MiB      0.0 MiB               ub.log('Saving model: {}...'.format(model_fname))
   706   6654.6 MiB      0.0 MiB               model.save_model(model_fname)
   707   6654.6 MiB      0.0 MiB               model.dump_model(model_fname + '.raw.txt')
   708   6654.6 MiB      0.0 MiB               run_info['model_fname'] = model_fname
   709                             
   710   6654.6 MiB      0.0 MiB               ntree_limit = model.best_iteration + 1
   711                             
   712   6654.6 MiB      0.0 MiB               ub.log('Predictions on xgtrain...', 'highlight')
   713   6654.6 MiB      0.0 MiB               predictions = model.predict(xgtrain, ntree_limit=ntree_limit)
   714                             
   715   6654.6 MiB      0.0 MiB               best_proba, best_mcc, y_pred = ub.eval_mcc(y_train, predictions, True)
   716   6654.6 MiB      0.0 MiB               mcc_official = matthews_corrcoef(y_train, y_pred)
   717   6654.6 MiB      0.0 MiB               print 'ntree limit:', ntree_limit
   718   6654.6 MiB      0.0 MiB               print 'best_mcc:', best_mcc
   719   6654.6 MiB      0.0 MiB               print 'best_proba:', best_proba
   720   6654.6 MiB      0.0 MiB               print 'matthews_corroef', mcc_official
   721                             
   722   6654.6 MiB      0.0 MiB               run_info['ntree_limit_train'] = ntree_limit
   723   6654.6 MiB      0.0 MiB               run_info['best_mcc_train'] = best_mcc
   724   6654.6 MiB      0.0 MiB               run_info['best_proba_train'] = best_proba
   725   6654.6 MiB      0.0 MiB               run_info['mcc_official_train'] = mcc_official
   726                             
   727   6654.6 MiB      0.0 MiB               ub.log('Predictions on xgval...', 'highlight')
   728   6654.6 MiB      0.0 MiB               predictions = model.predict(xgval, ntree_limit=ntree_limit)
   729                             
   730   6654.6 MiB      0.0 MiB               best_proba, best_mcc, y_pred = ub.eval_mcc(y_val, predictions, True)
   731   6654.6 MiB      0.0 MiB               mcc_official = matthews_corrcoef(y_val, y_pred)
   732   6654.6 MiB      0.0 MiB               print 'ntree limit:', ntree_limit
   733   6654.6 MiB      0.0 MiB               print 'best_mcc:', best_mcc
   734   6654.6 MiB      0.0 MiB               print 'best_proba:', best_proba
   735   6654.6 MiB      0.0 MiB               print 'matthews_corroef', mcc_official
   736                             
   737   6654.6 MiB      0.0 MiB               run_info['ntree_limit_val'] = ntree_limit
   738   6654.6 MiB      0.0 MiB               run_info['best_mcc_val'] = best_mcc
   739   6654.6 MiB      0.0 MiB               run_info['best_proba_val'] = best_proba
   740   6654.6 MiB      0.0 MiB               run_info['mcc_official_val'] = mcc_official
   741                             
   742   6654.6 MiB      0.0 MiB               if analyze_feature_importance:
   743                                             ub.log('Analyzing feature importance...')
   744                                             feature_imp_fname_template = run_info['feature_imp_fname_template']
   745                                             top_features_fname = run_info['top_features_fname']
   746                                             feature_imp_fname = feature_imp_fname_template.format(postfix_train)
   747                                             imp = model.get_fscore()
   748                                             imp = sorted(imp.items(), key=operator.itemgetter(1))
   749                                             imp_df = pd.DataFrame(imp, columns=['feature', 'fscore'])
   750                                             imp_df['fscore'] = imp_df['fscore'] / imp_df['fscore'].sum()
   751                             
   752                                             ub.log('Output result csv to {}...'.format(feature_imp_fname + '.csv'))
   753                                             imp_df.to_csv(feature_imp_fname + '.csv')
   754                             
   755                                             plt.figure()
   756                                             imp_df.plot(kind='barh', x='feature', y='fscore', legend=False, figsize=(6, 10))
   757                                             plt.title('XGBoost Feature Importance @ {}'.format(postfix_train))
   758                                             plt.xlabel('relative importance')
   759                                             plt.gcf().savefig(feature_imp_fname + '.png', bbox_inches='tight')
   760                             
   761                                             feature_lists = glob.glob(feature_imp_fname_template.replace('{}', '*.csv'))
   762                                             ub.log('Aggregating previous analysis results...')
   763                                             print feature_lists
   764                                             features_df = None
   765                                             if feature_lists:
   766                                                 for f_l in feature_lists:
   767                                                     tmp_df = pd.read_csv(f_l, index_col=0)
   768                                                     if features_df is None:
   769                                                         features_df = tmp_df
   770                                                     else:
   771                                                         features_df = pd.concat([features_df, tmp_df], ignore_index=True)
   772                             
   773                                             f_df = features_df.groupby(['feature']).mean().reset_index()
   774                                             f_df['overall'] = True
   775                                             imp_df['overall'] = False
   776                                             merged_df = pd.concat([imp_df, f_df]).sort_values(by=['overall', 'fscore'], ascending=False)
   777                                             sns_plot = sns.factorplot(y='feature', x='fscore', data=merged_df, hue='overall', kind='bar',
   778                                                                       hue_order=[True, False], size=20, aspect=0.5)
   779                                             sns_plot.savefig(feature_imp_fname + '_overall.png', bbox_inches='tight')
   780                             
   781                                             ub.log('Output overall result csv to {}...'.format(top_features_fname))
   782                                             with open(top_features_fname, 'w') as tf:
   783                                                 tf.write('\n'.join(list(set(merged_df.feature.values))))
   784                             
   785                                             merged_df.to_csv(top_features_fname.replace('.txt', '_df.csv'), index=False)
   786                             
   787                             
   788                                             # json has trouble serializing np.float32
   789                                             # with open(run_info_fname, 'w') as fp:
   790                                             #    json.dump(run_info, fp)
   791                             
   792   6654.6 MiB      0.0 MiB       if make_submission:
   793                                     assert (run_info_fname is not None)
   794                             
   795                                     if not train_model and not compile_data:
   796                                         ub.log('(make_submission) Loading run info from {} ...'.format(run_info_fname))
   797                                         with open(run_info_fname, 'r') as fp:
   798                                             run_info = eval(fp.read())
   799                                         print json.dumps(run_info, indent=2)
   800                             
   801                                     if ub.home_dir not in run_info['model_fname']:
   802                                         for i in ub.possible_home_dirs:
   803                                             if i in run_info['model_fname']:
   804                                                 logged_home_dir = i
   805                             
   806                                     for k in ['fname_xgtest', 'model_fname']:
   807                                         if ub.home_dir not in run_info[k]:
   808                                             for i in ub.possible_home_dirs:
   809                                                 if i in run_info[k]:
   810                                                     run_info[k] = run_info[k].replace(i, ub.home_dir)
   811                             
   812                                     if not train_model:
   813                                         model = xgb.Booster()
   814                                         ub.log('Loading model {} ...'.format(run_info['model_fname']))
   815                                         model.load_model(run_info['model_fname'])
   816                             
   817                                     if not compile_data:
   818                                         ub.log('Loading xgtest data {} ...'.format(run_info['fname_xgtest']))
   819                                         xgtest = xgb.DMatrix(run_info['fname_xgtest'])
   820                             
   821                                     ub.log('XGB making predictions...')
   822                             
   823                                     postfix_train = run_info['postfix_train']
   824                             
   825                                     ypred = model.predict(xgtest, ntree_limit=run_info['ntree_limit_train'])
   826                                     nrows = len(ypred)
   827                             
   828                                     sample = pd.read_csv(os.path.join(ub.data_dir, 'sample_submission.csv'), nrows=nrows)
   829                                     sample['Response'] = ypred
   830                                     fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}_prob.csv".format(postfix_train))
   831                                     if not compile_data:
   832                                         fname_output = fname_output.replace('.csv', '_{}.csv'.format(datetime_str))
   833                                     ub.log('Writing output file (raw proba) {} ...'.format(fname_output))
   834                                     sample.to_csv(fname_output, index=False)
   835                             
   836                                     best_proba = (run_info['best_proba_train'] + run_info['best_proba_val']) / 2.0
   837                                     ub.log('Using threshold: best_proba == {}'.format(best_proba))
   838                                     sample['Response'] = (ypred > best_proba).astype(int)
   839                                     fname_output = os.path.join(ub.output_dir, "sub_xgboost_{}.csv".format(postfix_train))
   840                                     if not compile_data:
   841                                         fname_output = fname_output.replace('.csv', '_{}.csv'.format(datetime_str))
   842                                     ub.log('Writing output file {} ...'.format(fname_output))
   843                                     sample.to_csv(fname_output, index=False)
   844                             
   845   6654.6 MiB      0.0 MiB       if compile_data or train_model:
   846   6654.6 MiB      0.0 MiB           if compile_data:
   847   6654.6 MiB      0.0 MiB               if run_info_fname is not None:
   848                                             ub.log('Ignore input run_info_fname {}'.format(run_info_fname))
   849   6654.6 MiB      0.0 MiB               run_info_fname = os.path.join(ub.output_dir, 'run_info_{}.txt'.format(postfix_train))
   850                                     # else run_info_fname is an input parameter
   851   6654.6 MiB      0.0 MiB           ub.log('Saving run_info into {}'.format(run_info_fname))
   852   6654.6 MiB      0.0 MiB           print pd.Series(run_info)
   853   6654.6 MiB      0.0 MiB           with open(run_info_fname, 'w') as fp:
   854   6654.6 MiB      0.0 MiB               fp.write(str(run_info))
   855                             
   856   6654.6 MiB      0.0 MiB       return run_info_fname


